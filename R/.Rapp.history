77/950
1.5+4+2+1.25
8.75/(3+3+4+2+3+2+2)
8.75/(3+3+4+2+3+2+2) * 6
260/8
(1+2+2.25+4+2+4+1.25+2)
(1.5+4+0.25+.5+0.25+2)
(1.5+4+0.25+.5+0.25+2)/18
(1.5+4+0.25+.5+0.25+2)/18 * 6
(1+2+2.25+4+2+4+1.25+2)
(3+2.25+4+1.25+3+2+2)
(2.25+2.25+2+0.25+2+1.25)/19
(3+2.25+2.25+3+2.25+1.25+2)/20
(3+2.25+3+3+3+2)/20
(3+2.25+3+1.5+2.25+1.25+2)
(1.25+1+1+1+1)
(1.25+1+1+1+1)/17
(1.25+1+1+1+1)/17*6
1.25+2+4+1.5
1.25+2+4+1.5/10 * 6
(1.25+2+4+1.5)/10 * 6
(1.25+2+4+1.5)/19 * 6
setwd('/Users/KSauby/Documents/Projects/Dissertation')
library(ProjectTemplate)#
load.project()#
#
# load GTMNERR#
#
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis')#
load.project()#
#
# load ACSampling#
#
setwd('/Users/KSauby/Documents/Projects/ACSampling_project')#
load.project()#
#
# load marsico project#
#
setwd('/Users/KSauby/Documents/Projects/marsico-time-series')#
load.project()
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/Manuscript/Demography/population_modeling_files')
source("processing/values_same_across_all_models.R")#
# ---------------------------------------------------------------------------- ##
TransitionYear 	= 2013#
source("processing/prep_ldf_cldf.R")#
source("processing/mutate_ldf_cldf.R")
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/Manuscript/Demography/population_modeling_files')
ldf <- cldf <- NULL#
source("processing/prep_ldf_cldf.R")#
source("2013_2014/LTRE/bootstrapping/01_transition_matrix_analysis_2013_4_size_stages_Island7_bootstrap.R", chdir = TRUE)
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/Manuscript/Demography/population_modeling_files')
ldf <- cldf <- NULL#
source("processing/prep_ldf_cldf.R")
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/Manuscript/Demography/population_modeling_files/2013_2014/LTRE/bootstrapping')
# ALL PLANT DATA: add new columns, filter out mothpresence = 1#
ldf %<>%#
	map(#
		~ mutate(#
			., #
			allYears 	= TransitionYear, #
			Year 		= FecundityYear#
		)#
	) %>%#
	map(#
		~ filter(#
			.,#
			Island == "7"#
		)#
	)#
# CLONE DATA: add plant info, filter out mothpresence = 1#
cldf %<>%#
	map(#
		~ merge(#
			., #
			Plant.Info.Analysis, #
			by.x="Parent.ID",#
			by.y="PlantID"#
		)#
	) %>%#
	map(#
		~ filter(#
			.,#
			Island == "7"#
		)#
	)#
#
if (length(ldf) != length(cldf)) {#
	stop(paste("ldf and cldf are of different lengths"))#
}#
# ---------------------------------------------------------------------------- ##
SizeClass <- SizeClass.4#
#
SizeClass <- SizeClass.4#
SeedBankSize = 1000#
SeedSurvival = 0.5#
#
x <- Sys.time()#
B <- runBootstrapPopulationModels(ldf,cldf, SizeClass.4, TransitionYear, SeedSurvival, SeedBankSize, SeedsPerFruit, n.iter, n_bootstraps=2000)#
Sys.time() - x
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/Manuscript/Demography/population_modeling_files/2013_2014/LTRE/bootstrapping')
n_bootstraps=2000
setwd('/Users/KSauby/Documents/Projects/GTMNERRproc/R')
SizeClass <- SizeClass#
	A <- list()#
	for (i in 1:length(ldf)) {#
		A[[i]] <- prepDataTransitionMatrix(#
			ldf[[i]], #
			cldf[[i]], #
			SizeClass, #
			TransitionYear#
		)#
	}#
	B <- list()#
	for (i in 1:length(ldf)) {#
		B[[i]] <- analyzeBootstrappedMatrixPopModels(#
			trans_data = A[[i]],#
			clonal_repro_dataset = cldf[[i]],#
			SizeClass,#
			TransitionYear,#
			SeedSurvival,#
			SeedBankSize,#
			SeedsPerFruit,#
			n.iter,#
			n_bootstraps#
		)#
	}
i
B
setwd('/Users/KSauby/Documents/Projects/GTMNERRproc/R')
B[[i]] <- analyzeBootstrappedMatrixPopModels(#
			trans_data = A[[i]],#
			clonal_repro_dataset = cldf[[i]],#
			SizeClass,#
			TransitionYear,#
			SeedSurvival,#
			SeedBankSize,#
			SeedsPerFruit,#
			n.iter,#
			n_bootstraps#
		)
setwd('/Users/KSauby/Documents/Projects/GTMNERRproc/R')
n.iter=1000
setwd('/Users/KSauby/Documents/Projects/GTMNERRproc/R')
A <- vector("list", length(SeedBankSize))	#
	for (i in 1:length(SeedBankSize)) {#
		A[[i]] <- vector("list", length(SeedsPerFruit))	#
		for (j in 1:length(SeedsPerFruit)) {#
			A[[i]][[j]] <- vector("list", length(SeedSurvival))	#
			for (k in 1:length(SeedSurvival)) {#
				for (l in 1:n_bootstraps) {#
					# -------------------------------------------------------- ##
					# Create growth/retrogression/survival/fecundity transition matrix#
					# -------------------------------------------------------- ##
					# bootstrap ldf#
					x <- sample(nrow(trans_data$trans01), replace=TRUE)#
					ldf_bootstrap <- trans_data$trans01[x, ]#
					# create transition matrix#
					proj_mat <- createProjectionMatrix(#
						ldf_bootstrap,#
						SeedBankSize[i],#
						SeedsPerFruit[j],#
						SeedSurvival[k]#
					)#
					# -------------------------------------------------------- ##
					# Create clonal reproduction transition matrix#
					# -------------------------------------------------------- ##
					# bootstrap cldf#
					clonal_repro_dat <- clonal_repro_dataset %>%#
						filter(#
							minFecundityYear == TransitionYear,#
							Species == "Opuntia stricta"#
						)#
					x <- NULL#
					x <- sample(nrow(clonal_repro_dat), replace=TRUE)#
					cldf_bootstrap <- clonal_repro_dat[x, ]#
					# create clonal transition matrix#
					clonal.matrices <- createClonalReproTransitionMatrix(#
						cldf_bootstrap, #
						ldf_bootstrap,#
						trans_data$stages#
					)#
					# ------------------------------------------------------- ##
					# add transition matrices together#
					# ------------------------------------------------------- ##
					all_proj_matrix <- proj_mat + clonal.matrices[[2]]#
					# ------------------------------------------------------- ##
					# starting numbers#
					# ------------------------------------------------------- ##
					n_per_stage <- NULL#
					n_per_stage <- calculateNumberIndivperStage(#
						trans_data$trans01, #
						trans_data$stages#
					)#
					# ------------------------------------------------------- ##
					# dynamics#
					# ------------------------------------------------------- ##
					all_proj_matrix[1, 1] <- SeedSurvival[k]#
					n_per_stage %<>% #
						mutate(#
							n = replace(#
								n, #
								which(stage=="Seed"),#
								SeedBankSize[i]#
							)#
						)#
					pr <- pop.projection(#
						A = all_proj_matrix, #
						n = n_per_stage$n, #
						iterations = n.iter#
					)#
					analysis.results <- eigen.analysis(all_proj_matrix)#
					# create table of results				#
					#		repro.values#
					repro.value.dat <- analysis.results$repro.value#
					names(repro.value.dat) <- #
						paste("repro.value",names(repro.value.dat),sep=".")#
					repro.value.dat %<>% t %>% as.data.frame#
					#		stable stage distribution#
					stable.stage.dat <- analysis.results$stable.stage#
					names(stable.stage.dat) <- #
						paste("stable.stage",names(stable.stage.dat),sep=".")#
					stable.stage.dat %<>% t %>% as.data.frame#
					#		elasticities#
					elasticities <- analysis.results$elasticities %>% #
						as.data.frame %>%#
						mutate(#
							Name = paste(#
								"elasticities.", #
								Var2, "-", #
								Var1, #
								sep=""#
							)#
						) %>%#
						as.data.frame(row.names=.$Name) %>%#
						dplyr::select(Freq) %>%#
						t %>%#
						as.data.frame()#
					#		sensitivities#
					sensitivities <- analysis.results$sensitivities %>% #
						as.table %>% as.data.frame %>%#
						mutate(#
							Name = paste(#
								"sensitivities.", #
								Var2, "-",#
								Var1, #
								sep=""#
							)#
						) %>%#
						as.data.frame(row.names=.$Name) %>%#
						dplyr::select(Freq) %>%#
						t %>%#
						as.data.frame()#
					A[[i]][[j]][[k]][[l]] <- data.frame(#
						repro.value.dat,#
						stable.stage.dat,#
						sensitivities,#
						elasticities,#
						lambda1 		= analysis.results$lambda1,#
						damping.ratio 	= analysis.results$damping.ratio,#
						SeedBankSize 	= SeedBankSize[i],#
						SeedsPerFruit 	= SeedsPerFruit[j],#
						SeedSurvival 	= SeedSurvival[k],#
						Bootstrap		= l#
					)				#
				}#
				A[[i]][[j]][[k]] <- do.call(rbind.data.frame, A[[i]][[j]][[k]])#
			}#
			A[[i]][[j]] <- do.call(rbind.data.frame, A[[i]][[j]])#
		}#
		A[[i]] <- do.call(rbind.data.frame, A[[i]])#
	}
setwd('/Users/KSauby/Documents/Projects/GTMNERRproc/R')
trans_data = A[[i]]
setwd('/Users/KSauby/Documents/Projects/GTMNERRproc/R')
clonal_repro_dataset = cldf[[i]]
dim(trans_data)
setwd('/Users/KSauby/Documents/Projects/GTMNERRproc/R')
SizeClass <- SizeClass#
	A <- list()#
	for (i in 1:length(ldf)) {#
		A[[i]] <- prepDataTransitionMatrix(#
			ldf[[i]], #
			cldf[[i]], #
			SizeClass, #
			TransitionYear#
		)#
	}
str(A)
setwd('/Users/KSauby/Documents/Projects/GTMNERRproc/R')
B <- list()
i
i=1
setwd('/Users/KSauby/Documents/Projects/GTMNERRproc/R')
trans_data = A[[i]]
dim(trans_data)
setwd('/Users/KSauby/Documents/Projects/GTMNERRproc/R')
trans_data = A[[i]]$trans01
dim(trans_data)
str(cldf[[i]])
setwd('/Users/KSauby/Documents/Projects/GTMNERRproc/R')
B[[i]] <- analyzeBootstrappedMatrixPopModels(#
			trans_data = A[[i]]$trans01,#
			clonal_repro_dataset = cldf[[i]],#
			SizeClass,#
			TransitionYear,#
			SeedSurvival,#
			SeedBankSize,#
			SeedsPerFruit,#
			n.iter,#
			n_bootstraps#
		)
str(A[[i]]$trans01)
i
setwd('/Users/KSauby/Documents/Projects/GTMNERRproc/R')
trans_data = A[[i]]
str(trans_data)
i=``
j=``
i=1
j=1
k=1
l=1
setwd('/Users/KSauby/Documents/Projects/GTMNERRproc/R')
trans_data = A[[i]]
setwd('/Users/KSauby/Documents/Projects/GTMNERRproc/R')
clonal_repro_dataset = cldf[[i]]
setwd('/Users/KSauby/Documents/Projects/GTMNERRproc/R')
# -------------------------------------------------------- ##
					# bootstrap ldf#
					x <- sample(nrow(trans_data$trans01), replace=TRUE)#
					ldf_bootstrap <- trans_data$trans01[x, ]#
					# create transition matrix#
					proj_mat <- createProjectionMatrix(#
						ldf_bootstrap,#
						SeedBankSize[i],#
						SeedsPerFruit[j],#
						SeedSurvival[k]#
					)#
					# -------------------------------------------------------- ##
					# Create clonal reproduction transition matrix#
					# -------------------------------------------------------- ##
					# bootstrap cldf#
					clonal_repro_dat <- clonal_repro_dataset %>%#
						filter(#
							minFecundityYear == TransitionYear,#
							Species == "Opuntia stricta"#
						)#
					x <- NULL#
					x <- sample(nrow(clonal_repro_dat), replace=TRUE)#
					cldf_bootstrap <- clonal_repro_dat[x, ]#
					# create clonal transition matrix#
					clonal.matrices <- createClonalReproTransitionMatrix(#
						cldf_bootstrap, #
						ldf_bootstrap,#
						trans_data$stages#
					)
setwd('/Users/KSauby/Documents/Projects/GTMNERRproc/R')
# ------------------------------------------------------- ##
					# add transition matrices together#
					# ------------------------------------------------------- ##
					all_proj_matrix <- proj_mat + clonal.matrices[[2]]#
					# ------------------------------------------------------- ##
					# starting numbers#
					# ------------------------------------------------------- ##
					n_per_stage <- NULL#
					n_per_stage <- calculateNumberIndivperStage(#
						trans_data$trans01, #
						trans_data$stages#
					)#
					# ------------------------------------------------------- ##
					# dynamics#
					# ------------------------------------------------------- ##
					all_proj_matrix[1, 1] <- SeedSurvival[k]#
					n_per_stage %<>% #
						mutate(#
							n = replace(#
								n, #
								which(stage=="Seed"),#
								SeedBankSize[i]#
							)#
						)#
					pr <- pop.projection(#
						A = all_proj_matrix, #
						n = n_per_stage$n, #
						iterations = n.iter#
					)#
					analysis.results <- eigen.analysis(all_proj_matrix)#
					# create table of results				#
					#		repro.values#
					repro.value.dat <- analysis.results$repro.value#
					names(repro.value.dat) <- #
						paste("repro.value",names(repro.value.dat),sep=".")#
					repro.value.dat %<>% t %>% as.data.frame#
					#		stable stage distribution#
					stable.stage.dat <- analysis.results$stable.stage#
					names(stable.stage.dat) <- #
						paste("stable.stage",names(stable.stage.dat),sep=".")#
					stable.stage.dat %<>% t %>% as.data.frame#
					#		elasticities#
					elasticities <- analysis.results$elasticities %>% #
						as.data.frame %>%#
						mutate(#
							Name = paste(#
								"elasticities.", #
								Var2, "-", #
								Var1, #
								sep=""#
							)#
						) %>%#
						as.data.frame(row.names=.$Name) %>%#
						dplyr::select(Freq) %>%#
						t %>%#
						as.data.frame()#
					#		sensitivities#
					sensitivities <- analysis.results$sensitivities %>% #
						as.table %>% as.data.frame %>%#
						mutate(#
							Name = paste(#
								"sensitivities.", #
								Var2, "-",#
								Var1, #
								sep=""#
							)#
						) %>%#
						as.data.frame(row.names=.$Name) %>%#
						dplyr::select(Freq) %>%#
						t %>%#
						as.data.frame()#
					A[[i]][[j]][[k]][[l]] <- data.frame(#
						repro.value.dat,#
						stable.stage.dat,#
						sensitivities,#
						elasticities,#
						lambda1 		= analysis.results$lambda1,#
						damping.ratio 	= analysis.results$damping.ratio,#
						SeedBankSize 	= SeedBankSize[i],#
						SeedsPerFruit 	= SeedsPerFruit[j],#
						SeedSurvival 	= SeedSurvival[k],#
						Bootstrap		= l#
					)
i
j
k
l
setwd('/Users/KSauby/Documents/Projects/GTMNERRproc/R')
A <- vector("list", length(SeedBankSize))	#
	for (i in 1:length(SeedBankSize)) {#
		A[[i]] <- vector("list", length(SeedsPerFruit))	#
		for (j in 1:length(SeedsPerFruit)) {#
			A[[i]][[j]] <- vector("list", length(SeedSurvival))	#
			for (k in 1:length(SeedSurvival)) {#
				for (l in 1:n_bootstraps) {#
					# -------------------------------------------------------- ##
					# Create growth/retrogression/survival/fecundity transition matrix#
					# -------------------------------------------------------- ##
					# bootstrap ldf#
					x <- sample(nrow(trans_data$trans01), replace=TRUE)#
					ldf_bootstrap <- trans_data$trans01[x, ]#
					# create transition matrix#
					proj_mat <- createProjectionMatrix(#
						ldf_bootstrap,#
						SeedBankSize[i],#
						SeedsPerFruit[j],#
						SeedSurvival[k]#
					)#
					# -------------------------------------------------------- ##
					# Create clonal reproduction transition matrix#
					# -------------------------------------------------------- ##
					# bootstrap cldf#
					clonal_repro_dat <- clonal_repro_dataset %>%#
						filter(#
							minFecundityYear == TransitionYear,#
							Species == "Opuntia stricta"#
						)#
					x <- NULL#
					x <- sample(nrow(clonal_repro_dat), replace=TRUE)#
					cldf_bootstrap <- clonal_repro_dat[x, ]#
					# create clonal transition matrix#
					clonal.matrices <- createClonalReproTransitionMatrix(#
						cldf_bootstrap, #
						ldf_bootstrap,#
						trans_data$stages#
					)#
					# ------------------------------------------------------- ##
					# add transition matrices together#
					# ------------------------------------------------------- ##
					all_proj_matrix <- proj_mat + clonal.matrices[[2]]#
					# ------------------------------------------------------- ##
					# starting numbers#
					# ------------------------------------------------------- ##
					n_per_stage <- NULL#
					n_per_stage <- calculateNumberIndivperStage(#
						trans_data$trans01, #
						trans_data$stages#
					)#
					# ------------------------------------------------------- ##
					# dynamics#
					# ------------------------------------------------------- ##
					all_proj_matrix[1, 1] <- SeedSurvival[k]#
					n_per_stage %<>% #
						mutate(#
							n = replace(#
								n, #
								which(stage=="Seed"),#
								SeedBankSize[i]#
							)#
						)#
					pr <- pop.projection(#
						A = all_proj_matrix, #
						n = n_per_stage$n, #
						iterations = n.iter#
					)#
					analysis.results <- eigen.analysis(all_proj_matrix)#
					# create table of results				#
					#		repro.values#
					repro.value.dat <- analysis.results$repro.value#
					names(repro.value.dat) <- #
						paste("repro.value",names(repro.value.dat),sep=".")#
					repro.value.dat %<>% t %>% as.data.frame#
					#		stable stage distribution#
					stable.stage.dat <- analysis.results$stable.stage#
					names(stable.stage.dat) <- #
						paste("stable.stage",names(stable.stage.dat),sep=".")#
					stable.stage.dat %<>% t %>% as.data.frame#
					#		elasticities#
					elasticities <- analysis.results$elasticities %>% #
						as.data.frame %>%#
						mutate(#
							Name = paste(#
								"elasticities.", #
								Var2, "-", #
								Var1, #
								sep=""#
							)#
						) %>%#
						as.data.frame(row.names=.$Name) %>%#
						dplyr::select(Freq) %>%#
						t %>%#
						as.data.frame()#
					#		sensitivities#
					sensitivities <- analysis.results$sensitivities %>% #
						as.table %>% as.data.frame %>%#
						mutate(#
							Name = paste(#
								"sensitivities.", #
								Var2, "-",#
								Var1, #
								sep=""#
							)#
						) %>%#
						as.data.frame(row.names=.$Name) %>%#
						dplyr::select(Freq) %>%#
						t %>%#
						as.data.frame()#
					A[[i]][[j]][[k]][[l]] <- data.frame(#
						repro.value.dat,#
						stable.stage.dat,#
						sensitivities,#
						elasticities,#
						lambda1 		= analysis.results$lambda1,#
						damping.ratio 	= analysis.results$damping.ratio,#
						SeedBankSize 	= SeedBankSize[i],#
						SeedsPerFruit 	= SeedsPerFruit[j],#
						SeedSurvival 	= SeedSurvival[k],#
						Bootstrap		= l#
					)				#
				}#
				A[[i]][[j]][[k]] <- do.call(rbind.data.frame, A[[i]][[j]][[k]])#
			}#
			A[[i]][[j]] <- do.call(rbind.data.frame, A[[i]][[j]])#
		}#
		A[[i]] <- do.call(rbind.data.frame, A[[i]])#
	}
i
j
k
l
setwd('/Users/KSauby/Documents/Projects/GTMNERRproc/R')
analysis.results
setwd('/Users/KSauby/Documents/Projects/GTMNERRproc/R')
analysis.results$lambda1
setwd('/Users/KSauby/Documents/Projects/GTMNERRproc/R')
analysis.results$sensitivities %>% #
						as.table %>% as.data.frame %>%#
						mutate(#
							Name = paste(#
								"sensitivities.", #
								Var2, "-",#
								Var1, #
								sep=""#
							)#
						) %>%#
						as.data.frame(row.names=.$Name) %>%#
						dplyr::select(Freq) %>%#
						t %>%#
						as.data.frame()
setwd('/Users/KSauby/Documents/Projects/GTMNERRproc/R')
analysis.results$elasticities %>% #
						as.data.frame %>%#
						mutate(#
							Name = paste(#
								"elasticities.", #
								Var2, "-", #
								Var1, #
								sep=""#
							)#
						) %>%#
						as.data.frame(row.names=.$Name) %>%#
						dplyr::select(Freq) %>%#
						t %>%#
						as.data.frame()
setwd('/Users/KSauby/Documents/Projects/GTMNERRproc/R')
analysis.results$stable.stage
setwd('/Users/KSauby/Documents/Projects/GTMNERRproc/R')
analysis.results$repro.value
setwd('/Users/KSauby/Documents/Projects/GTMNERRproc/R')
pr <- pop.projection(#
						A = all_proj_matrix, #
						n = n_per_stage$n, #
						iterations = n.iter#
					)#
					analysis.results <- eigen.analysis(all_proj_matrix)
pr
setwd('/Users/KSauby/Documents/Projects/GTMNERRproc/R')
pr <- pop.projection(#
						A = all_proj_matrix, #
						n = n_per_stage$n, #
						iterations = n.iter#
					)#
					analysis.results <- eigen.analysis(all_proj_matrix)
setwd('/Users/KSauby/Documents/Projects/GTMNERRproc/R')
pr <- pop.projection(#
						A = all_proj_matrix, #
						n = n_per_stage$n, #
						iterations = n.iter#
					)
pr
setwd('/Users/KSauby/Documents/Projects/GTMNERRproc/R')
analysis.results <- eigen.analysis(all_proj_matrix)
setwd('/Users/KSauby/Documents/Projects/GTMNERRproc/R')
analysis.results
setwd('/Users/KSauby/Documents/Projects/GTMNERRproc/R')
A <- vector("list", length(SeedBankSize))	#
	for (i in 1:length(SeedBankSize)) {#
		A[[i]] <- vector("list", length(SeedsPerFruit))	#
		for (j in 1:length(SeedsPerFruit)) {#
			A[[i]][[j]] <- vector("list", length(SeedSurvival))	#
			for (k in 1:length(SeedSurvival)) {#
				for (l in 1:n_bootstraps) {#
					analysis.results <- NULL#
					# -------------------------------------------------------- ##
					# Create growth/retrogression/survival/fecundity transition matrix#
					# -------------------------------------------------------- ##
					# bootstrap ldf#
					x <- sample(nrow(trans_data$trans01), replace=TRUE)#
					ldf_bootstrap <- trans_data$trans01[x, ]#
					# create transition matrix#
					proj_mat <- createProjectionMatrix(#
						ldf_bootstrap,#
						SeedBankSize[i],#
						SeedsPerFruit[j],#
						SeedSurvival[k]#
					)#
					# -------------------------------------------------------- ##
					# Create clonal reproduction transition matrix#
					# -------------------------------------------------------- ##
					# bootstrap cldf#
					clonal_repro_dat <- clonal_repro_dataset %>%#
						filter(#
							minFecundityYear == TransitionYear,#
							Species == "Opuntia stricta"#
						)#
					x <- NULL#
					x <- sample(nrow(clonal_repro_dat), replace=TRUE)#
					cldf_bootstrap <- clonal_repro_dat[x, ]#
					# create clonal transition matrix#
					clonal.matrices <- createClonalReproTransitionMatrix(#
						cldf_bootstrap, #
						ldf_bootstrap,#
						trans_data$stages#
					)#
					# ------------------------------------------------------- ##
					# add transition matrices together#
					# ------------------------------------------------------- ##
					all_proj_matrix <- proj_mat + clonal.matrices[[2]]#
					# ------------------------------------------------------- ##
					# starting numbers#
					# ------------------------------------------------------- ##
					n_per_stage <- NULL#
					n_per_stage <- calculateNumberIndivperStage(#
						trans_data$trans01, #
						trans_data$stages#
					)#
					# ------------------------------------------------------- ##
					# dynamics#
					# ------------------------------------------------------- ##
					all_proj_matrix[1, 1] <- SeedSurvival[k]#
					n_per_stage %<>% #
						mutate(#
							n = replace(#
								n, #
								which(stage=="Seed"),#
								SeedBankSize[i]#
							)#
						)#
					pr <- pop.projection(#
						A = all_proj_matrix, #
						n = n_per_stage$n, #
						iterations = n.iter#
					)#
					analysis.results <- eigen.analysis(all_proj_matrix)#
					# create table of results				#
					#		repro.values#
					repro.value.dat <- analysis.results$repro.value#
					names(repro.value.dat) <- #
						paste("repro.value",names(repro.value.dat),sep=".")#
					repro.value.dat %<>% t %>% as.data.frame#
					#		stable stage distribution#
					stable.stage.dat <- analysis.results$stable.stage#
					names(stable.stage.dat) <- #
						paste("stable.stage",names(stable.stage.dat),sep=".")#
					stable.stage.dat %<>% t %>% as.data.frame#
					#		elasticities#
					elasticities <- analysis.results$elasticities %>% #
						as.data.frame %>%#
						mutate(#
							Name = paste(#
								"elasticities.", #
								Var2, "-", #
								Var1, #
								sep=""#
							)#
						) %>%#
						as.data.frame(row.names=.$Name) %>%#
						dplyr::select(Freq) %>%#
						t %>%#
						as.data.frame()#
					#		sensitivities#
					sensitivities <- analysis.results$sensitivities %>% #
						as.table %>% as.data.frame %>%#
						mutate(#
							Name = paste(#
								"sensitivities.", #
								Var2, "-",#
								Var1, #
								sep=""#
							)#
						) %>%#
						as.data.frame(row.names=.$Name) %>%#
						dplyr::select(Freq) %>%#
						t %>%#
						as.data.frame()#
					A[[i]][[j]][[k]][[l]] <- data.frame(#
						repro.value.dat,#
						stable.stage.dat,#
						sensitivities,#
						elasticities,#
						lambda1 		= analysis.results$lambda1,#
						damping.ratio 	= analysis.results$damping.ratio,#
						SeedBankSize 	= SeedBankSize[i],#
						SeedsPerFruit 	= SeedsPerFruit[j],#
						SeedSurvival 	= SeedSurvival[k],#
						Bootstrap		= l#
					)				#
				}#
				A[[i]][[j]][[k]] <- do.call(rbind.data.frame, A[[i]][[j]][[k]])#
			}#
			A[[i]][[j]] <- do.call(rbind.data.frame, A[[i]][[j]])#
		}#
		A[[i]] <- do.call(rbind.data.frame, A[[i]])#
	}
i
j
k
l
setwd('/Users/KSauby/Documents/Projects/GTMNERRproc/R')
analysis.results
setwd('/Users/KSauby/Documents/Projects/GTMNERRproc/R')
pr <- pop.projection(#
						A = all_proj_matrix, #
						n = n_per_stage$n, #
						iterations = n.iter#
					)#
					analysis.results <- eigen.analysis(all_proj_matrix)
setwd('/Users/KSauby/Documents/Projects/GTMNERRproc/R')
analysis.results
A
setwd('/Users/KSauby/Documents/Projects/GTMNERRproc/R')
trans_data$stages
setwd('/Users/KSauby/Documents/Projects/GTMNERRproc/R')
paste("repro.value.", trans_data$stages, sep="")
?data.frame
?as.data.frame
as.data.frame(col.names=paste("repro.value.", trans_data$stages, sep=""), NA)
paste("repro.value.", trans_data$stages, sep="")
as.data.frame(NA, col.names=paste("repro.value.", trans_data$stages, sep=""))
as.data.frame(rep("NA", length(paste("repro.value.", trans_data$stages, sep=""))), col.names=paste("repro.value.", trans_data$stages, sep=""))
as.data.frame(x = rep("NA", length(paste("repro.value.", trans_data$stages, sep=""))), col.names=paste("repro.value.", trans_data$stages, sep=""))
as.data.frame(x = rep("NA", length(paste("repro.value.", trans_data$stages, sep=""))), col.names=paste("repro.value.", trans_data$stages, sep=""))
rep("NA", length(paste("repro.value.", trans_data$stages, sep="")))
data.frame(x = rep("NA", length(paste("repro.value.", trans_data$stages, sep=""))), col.names=paste("repro.value.", trans_data$stages, sep=""))
data.frame(x = rep("NA", length(paste("repro.value.", trans_data$stages, sep=""))), col.names=paste("repro.value.", trans_data$stages, sep="")) %>% t %>% as.data.frame
as.data.frame(x = rep("NA", length(paste("repro.value.", trans_data$stages, sep=""))), col.names=paste("repro.value.", trans_data$stages, sep=""))
x = rep("NA", length(paste("repro.value.", trans_data$stages, sep="")))
as.data.frame(x, col.names=paste("repro.value.", trans_data$stages, sep=""))
data.frame(x, col.names=paste("repro.value.", trans_data$stages, sep=""))
? data.frame
as.data.frame(x, col.names=paste("repro.value.", trans_data$stages, sep=""))
y <- as.data.frame(x)
col.names(y)
colnames(y)
y
col.names(y)x
x
x %>% as.data.frame %>% t %>% as.data.frame
x %>% as.data.frame
x %>% t %>% as.data.frame
setwd('/Users/KSauby/Documents/Projects/GTMNERRproc/R')
rep("NA", length(paste("repro.value.", trans_data$stages, sep=""))) %>% t %>% as.data.frame
setwd('/Users/KSauby/Documents/Projects/GTMNERRproc/R')
colnames(x) <- paste("repro.value.", trans_data$stages, sep="")
setwd('/Users/KSauby/Documents/Projects/GTMNERRproc/R')
x <- rep("NA", length(paste("repro.value.", trans_data$stages, sep=""))) %>% t %>% as.data.frame#
						colnames(x) <- paste("repro.value.", trans_data$stages, sep="")
x
setwd('/Users/KSauby/Documents/Projects/GTMNERRproc/R')
repros <- paste(#
							"repro.value.", #
							trans_data$stages, #
							sep=""#
						)#
						x <- rep("NA", length(repros)) %>% t %>% as.data.frame#
						colnames(x) <- repros
x
