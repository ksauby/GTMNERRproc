35/37
30/37
29/37
26/37
26/37 - .6757
28/37
30/37
29/37
37-12
25/37
219*.8
219*.8 - 17
26/3
17/900
42/900
49/900
29/40
1/25
8/25
10/25
(7.5 + 3.75)/15
12*0.75
11 * 0.75
11/15
11*0.25
11/15 * 6
32/41 +0.03.5
32/41 + 0.035
(32/41 + 0.035)*100
100/41
23/40 * 100
(23/40 * 100)+5
(164 + 13.5 + 6)
(164 + 13.5 + 6)/365
(164 + 13.5 + 6 + (50))/365
(164 + 13.5 + 6 + (60))/365
(164 + 13.5 + 6 + (70))/365
(164 + 13.5 + 6 + (75))/365
102/40
102/41
?table
9.49/2
12.75+8.25
(10.5 + 6.5)/(12.75+8.25)
.25^2 * 2
(.25^2 * 2)^0.5
(.25^2 * 2)^0.5 * 2
3/8
5/8
6/8
30*1.5
40*15
40*1.5
13.25 - 4.5
(276.29+8.75)/365
16*3
16*4
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis')
library(ProjectTemplate)#
#
# when working on a Windows computer#
# setwd("C:/Users/KSauby/Dropbox/gradschool/Research/Projects/sampling")#
#
# load project#
load.project()
head(Plant.Info.Analysis.stricta)
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/Manuscript/Demography')
Plant.Info.Analysis.stricta %>% filter(RecruitmentMode=="Clonal") %$% hist(First_Size)
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/Manuscript/Demography')
Plant.Info.Analysis.stricta %>% filter(RecruitmentMode=="Clonal") %$% max(First_Size)
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/Manuscript/Demography')
# sizes of recruits#
Plant.Info.Analysis.stricta %>% filter(RecruitmentMode=="Clonal") %$% mean(First_Size, na.rm=T) #
#
Plant.Info.Analysis.stricta %>% filter(RecruitmentMode=="Clonal") %$% max(First_Size, na.rm=T)
head(Plot.Surveys)
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
# ---------------------------------------------------------- Shorten names#
Plot_Info <- OccupancySRSWOR.Plot.Surveys.Info#
Plot_Surveys <- OccupancySRSWOR.Plot.Surveys#
Plant_Surveys <- Demographic.Plant.Surveys#
Plant_Info <- Demographic.Plant.Info#
Plant_Surveys_All <- Demographic.Plant.Surveys#
Plant_Info_All <- Demographic.Plant.Info#
D_Plot_Surveys <- Demographic.Plot.Surveys#
Original_Plant_Data <- Original.Demographic.Plant.Data#
Seed_Abundance <- Seed.Abundance#
Seed_Abundance_Surveys <- Seed.Abundance.Surveys#
GIS_data_updated <- GIS.data.updated
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
filter(Plant_Surveys, !(PlantID %in% Plant_Info$PlantID))[, 4:5]
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
dim(filter(Plant_Surveys, !(PlantID %in% Plant_Info$PlantID))[, 4:5] > 0
_
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
dim(filter(Plant_Surveys, !(PlantID %in% Plant_Info$PlantID))[, 4:5]
)
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
dim(filter(Plant_Surveys, !(PlantID %in% Plant_Info$PlantID))[, 4:5])[1] > 0
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
if (dim(filter(Plant_Surveys, !(PlantID %in% Plant_Info$PlantID))[, 4:5])[1] > 0) {stop("Duplicates observations for a PlantID, Date combination are present in the dataset." filter(Plant_Surveys, !(PlantID %in% Plant_Info$PlantID))[, 4:5])}
?stop
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
if (dim(#
		filter(Plant_Surveys, !(PlantID %in% Plant_Info$PlantID))[, 4:5]#
	)[1] > 0) {stop("Some Plant IDs from Plant Surveys are not in Plant Info."}
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
if (dim(#
		filter(Plant_Surveys, !(PlantID %in% Plant_Info$PlantID))[, 4:5]#
	)[1] > 0) {#
		filter(Plant_Surveys, !(PlantID %in% Plant_Info$PlantID))[, 4:5]#
		stop("Some Plant IDs from Plant Surveys are not in Plant Info.")#
	}
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
if (dim(#
		filter(Plant_Surveys, !(PlantID %in% Plant_Info$PlantID))[, 4:5]#
	)[1] > 0) {#
		stop("Some Plant IDs from Plant Surveys are not in Plant Info.")#
		filter(Plant_Surveys, !(PlantID %in% Plant_Info$PlantID))[, 4:5]#
	}
filter(Plant_Surveys, !(PlantID %in% Plant_Info$PlantID))[, 4:5]
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
dups <- filter(Plant_Surveys, !(PlantID %in% Plant_Info$PlantID))[, 4:5]
dups
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
dups <- filter(Plant_Surveys, !(PlantID %in% Plant_Info$PlantID))[, 4:5]#
	if (dim(#
		filter(Plant_Surveys, !(PlantID %in% Plant_Info$PlantID))[, 4:5]#
	)[1] > 0) {#
		stop(c(#
			"Some Plant IDs from Plant Surveys are not in Plant Info.",#
			unique(dups$PlantID)#
			)#
			)#
	}
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
dups <- filter(Plant_Surveys, !(PlantID %in% Plant_Info$PlantID))[, 4:5]#
	if (dim(#
		filter(Plant_Surveys, !(PlantID %in% Plant_Info$PlantID))[, 4:5]#
	)[1] > 0) {#
		stop(c(#
			"These Plant IDs from Plant Surveys are not in Plant Info:",#
			unique(dups$PlantID)#
			)#
			)#
	}
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
dups <- filter(Plant_Surveys, !(PlantID %in% Plant_Info$PlantID))[, 4:5]#
	if (dim(#
		filter(Plant_Surveys, !(PlantID %in% Plant_Info$PlantID))[, 4:5]#
	)[1] > 0) {#
		stop(c(#
			"These Plant IDs from Plant Surveys are not in Plant Info:",#
			unique(dups$PlantID)#
			)#
			)#
	}
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
dups <- filter(Plant_Surveys, !(PlantID %in% Plant_Info$PlantID))[, 4:5]#
	if (dim(#
		filter(Plant_Surveys, !(PlantID %in% Plant_Info$PlantID))[, 4:5]#
	)[1] > 0) {#
		stop(paste(#
			"These Plant IDs from Plant Surveys are not in Plant Info:",#
			unique(dups$PlantID)#
			)#
			)#
	}
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
# are any plant IDs from Plant Surveys not in the Plant Info?#
filter(Plant_Surveys, !(PlantID %in% Plant_Info$PlantID))[,2:5]
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
dups <- filter(Plant_Surveys, !(PlantID %in% Plant_Info$PlantID))[, 4:5]#
	if (dim(#
		filter(Plant_Surveys, !(PlantID %in% Plant_Info$PlantID))[, 4:5]#
	)[1] > 0) {#
		warning(paste(#
			"These Plant IDs from Plant Surveys are not in Plant Info:",#
			unique(dups$PlantID)#
		))#
	}
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
Plant_Surveys %>%#
		group_by(PlantID, DateSurveyed) %>%#
		summarise(Nrecords = length(First_Observer_Initials)) %>%#
		as.data.frame %>% #
		arrange(PlantID)
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
Plant_Surveys %>%#
		group_by(PlantID, DateSurveyed) %>%#
		summarise(Nrecords = length(First_Observer_Initials)) %>%#
		as.data.frame %>% #
		arrange(PlantID) %>%#
		filter(Nrecords > 1)
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
Plant_Surveys[which(Plant_Surveys$Max_Height=="0"), ] %>% dim
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
Plant_Surveys[which(Plant_Surveys$Max_Width=="0"), ] %>% dim
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
dim(dups)[1]
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
Plant_Surveys %>%#
		group_by(PlantID, DateSurveyed) %>%#
		summarise(Nrecords = length(First_Observer_Initials)) %>%#
		as.data.frame %>% #
		arrange(PlantID) %>%#
		filter(Nrecords > 1)
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
dups = Plant_Surveys %>%#
		group_by(PlantID, DateSurveyed) %>%#
		summarise(Nrecords = length(First_Observer_Initials)) %>%#
		as.data.frame %>% #
		arrange(PlantID) %>%#
		filter(Nrecords > 1)
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
dim(dups)[1]
head(Plant_Surveys)
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
dups = Plant_Surveys %>%#
		group_by(PlantID, DateSurveyed) %>%#
		summarise(Nrecords = length(First_Observer_Initials)) %>%#
		as.data.frame %>% #
		arrange(PlantID) %>%#
		filter(Nrecords > 1)#
	if (dim(dups)[1] > 0) {#
		warning(paste(#
			"Duplicate surveys on the same date for the following plants:",#
			unique(dups$PlantID)#
		))#
	}
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
dups <- Plant_Surveys[which(Plant_Surveys$Max_Height=="0"), ]#
		if (dim(dups)[1] > 0) {stop("Max. height values = 0.")}#
	dups <- Plant_Surveys[which(Plant_Surveys$Max_Width=="0"), ]#
		if (dim(dups)[1] > 0) {stop("Max. width values = 0.")}#
	dups <- Plant_Surveys[which(Plant_Surveys$Perpen_Width=="0"), ]#
		if (dim(dups)[1] > 0) {stop("Perpendicular width values = 0.")}
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
Plant_Surveys[which(Plant_Surveys$Max_Height=="0"), ]
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
dups <- Plant_Surveys %>% filter(Size_t==0)
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
dups <- Plant_Surveys %>% filter(sum(#
		Plant_Segments_total,#
		Plant_Segments_w_leaves,#
		Plant_Segments_wo_leaves,#
		Plant_Segments_woody, na.rm=T)#
	==0)
dups
dups <- Plant_Surveys %>% filter(sum(#
		Plant_Segments_total,#
		Plant_Segments_w_leaves,#
		Plant_Segments_wo_leaves,#
		Plant_Segments_woody, na.rm=T)#
	==1)
dups
dups <- Plant_Surveys %>% filter(sum(#
		Plant_Segments_total,#
		Plant_Segments_w_leaves,#
		Plant_Segments_wo_leaves,#
		Plant_Segments_woody, na.rm=T)#
	==2)
dups
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
dups <- Plant_Surveys %>% mutate(tot_segments = sum(#
		Plant_Segments_total,#
		Plant_Segments_w_leaves,#
		Plant_Segments_wo_leaves,#
		Plant_Segments_woody,#
		na.rm=T#
	))
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
dups <- Plant_Surveys %>% mutate(tot_segments = sum(#
		Plant_Segments_total,#
		Plant_Segments_w_leaves,#
		Plant_Segments_wo_leaves,#
		Plant_Segments_woody,#
		na.rm=T#
	))
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
dups %>% filter(tot_segments==0)
dups %>% filter(tot_segments==1)
dups %>% filter(tot_segments==2)
dups %>% filter(tot_segments==3)
dups %>% filter(tot_segments==4)
dups %>% filter(tot_segments==5)
head(Plant_Surveys)
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
# check for size = 0#
	dups <- Plant_Surveys %>% filter(Max_Height==0)#
		if (dim(dups)[1] > 0) {stop("Max. height values = 0.")}#
	dups <- Plant_Surveys %>% filter(Max_Width==0)
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
print(Plant_Info[which(Plant_Info$HostSpecies=="Not Recorded"), ]$PlantID)
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
Plant_Info[which(Plant_Info$HostSpecies=="Not Recorded"), ]
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
dups <- Plant_Info[which(Plant_Info$HostSpecies=="Not Recorded"), ]#
	if (dim(dups)[1] > 0) {warning(paste(#
		"Species identity not recorded for plantID: ",#
		dups$PlantID#
	))}
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
filter(Plant_Info, !(PlantID %in% Plant_Surveys$PlantID))[,2:5]
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
Plant_Info %>%#
		filter(!(PlantID %in% Plant_Surveys$PlantID)) %>% #
		.[,2:5]
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
dups <- Plant_Info %>%#
		filter(!(PlantID %in% Plant_Surveys$PlantID)) %>% #
		.[,2:5]#
	if (dim(dups)[1] > 0) {#
		warning(paste(#
			"Some plant IDs are not in Plant Surveys data: ",#
			dups$PlantID#
		))#
	}
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
dups <- Plant_Info %>%#
		filter(!(PlantID %in% Plant_Surveys$PlantID)) %>% #
		.[,2:5]#
	if (dim(dups)[1] > 0) {#
		warning(paste(#
			"Some plant IDs are not in Plant Surveys data: ",#
			paste(dups$PlantID)#
		))#
	}
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
paste(dups$PlantID)
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
paste(dups$PlantID, collapse=", ")
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
dups <- Plant_Info %>%#
		filter(!(PlantID %in% Plant_Surveys$PlantID)) %>% #
		.[,2:5]#
	if (dim(dups)[1] > 0) {#
		warning(paste(#
			"Some plant IDs are not in Plant Surveys data: ",#
			paste(dups$PlantID, collapse=", ")#
		))#
	}
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
dups <- filter(Plant_Surveys, !(PlantID %in% Plant_Info$PlantID))[, 4:5]#
	if (dim(#
		filter(Plant_Surveys, !(PlantID %in% Plant_Info$PlantID))[, 4:5]#
	)[1] > 0) {#
		warning(paste(#
			"These Plant IDs from Plant Surveys are not in Plant Info:",#
			paste(unique(dups$PlantID), collapse=", ")#
		))#
	}
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
Plant_Info %>%#
	filter(!(Tag_Number %in% Plot_Info$Tag_Number))
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
dups <- Plant_Info %>%#
		filter(!(Tag_Number %in% Plot_Info$Tag_Number))#
	if (dim(dups)[1] > 0) {#
		warning(paste(#
			"These plots are not in Plot Info data: ",#
			paste(unique(dups$Tag_Number), collapse=", ")#
		))#
	}
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
dups <- Plant_Info %>%#
		filter(!(Tag_Number %in% Plot_Info$Tag_Number))#
	if (dim(dups)[1] > 0) {#
		warning(paste(#
			"Plants ",#
			" are listed in not in Plot Info data (",#
			paste(unique(dups$Tag_Number), collapse=", "),#
			")"#
		))#
	}
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
dups <- Plant_Info %>%#
		filter(!(Tag_Number %in% Plot_Info$Tag_Number))#
	if (dim(dups)[1] > 0) {#
		warning(paste(#
			"Plants (",#
			paste(unique(dups$PlantID), collapse=", "),#
			") are listed in as being in plots not in Plot Info data (",#
			paste(unique(dups$Tag_Number), collapse=", "),#
			")"#
		))#
	}
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
# Duplicates in Plot Surveys#
	duplicate.records = as.data.frame(summarise(group_by(Plot_Surveys, Tag_Number, Date),#
			Nrecords = length(CACA_on_Pusilla)))#
#
	print(filter(duplicate.records, Nrecords > 1))
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
duplicate.records = Plot_Surveys %>%#
		group_by(Tag_Number, Date) %>%#
		summarise(Nrecords = length(CACA_on_Pusilla)) %>%#
		as.data.frame#
#
	print(filter(duplicate.records, Nrecords > 1))
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
Plot_Surveys %>%#
		group_by(Tag_Number, Date) %>%#
		summarise(Nrecords = length(CACA_on_Pusilla)) %>%#
		as.data.frame %>%#
		filter(Nrecords > 1)
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
dups = Plot_Surveys %>%#
		group_by(Tag_Number, Date) %>%#
		summarise(Nrecords = length(CACA_on_Pusilla)) %>%#
		as.data.frame %>%#
		filter(Nrecords > 1)#
	if (dim(dups)[1] > 0) {#
		warning(paste(#
			"Duplicate plot surveys for plot(s) ",#
			paste(unique(dups$Tag_Number), collapse=", "),#
			" on date(s) ",#
			paste(unique(dups$Date), collapse=", ")#
		))#
	}
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
if (dim(dups)[1] > 0) {#
		warning(paste(#
			"Duplicate plot surveys for plot(s)",#
			paste(unique(dups$Tag_Number), collapse=", "),#
			"on date(s)",#
			paste(unique(dups$Date), collapse=", ")#
		))#
	}
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
#' Abbreviate Variable Names#
#'#
#' @description Steps:#
#' \itemize{#
#'  	\item Replace "CACA_on_Pusilla" with "P_Ca"#
#'  	\item Replace "MEPR_on_Pusilla" with "P_Me"#
#'  	\item Replace "CHVI_on_Pusilla" with "P_Ch"#
#'  	\item Replace "UnknwnMoth_on_Pusilla" with "P_Umoth"#
#'  	\item Replace "Old_Moth_Evidence_Pusilla" with "P_Omoth"#
#'  	\item Replace "Height_Pusilla" with "P_H"#
#'  	\item Replace "Percent_Cover_Pusilla" with "P_PC"#
#'  	\item Replace "CACA_on_Stricta" with "S_Ca"#
#'  	\item Replace "MEPR_on_Stricta" with "S_Me"#
#'  	\item Replace "CHVI_on_Stricta" with "S_Ch"#
#'  	\item Replace "UnknwnMoth_on_Stricta" with "S_Umoth"#
#'  	\item Replace "Old_Moth_Evidence_Stricta" with "S_Omoth"#
#'  	\item Replace "Height_Stricta" with "S_H"#
#'  	\item Replace "Percent_Cover_Stricta" with "S_PC"#
#' 	}#
#'#
#' @export#
#
changeVariableNames <- function(Plot_Surveys) {#
	Plot_Surveys %<>% #
		as.data.table %<>%#
		# pusilla#
		setnames("CACA_on_Pusilla", 			"P_Ca") %>%#
		setnames("MEPR_on_Pusilla", 			"P_Me") %>%#
		setnames("CHVI_on_Pusilla", 			"P_Ch") %>%#
		setnames("UnknwnMoth_on_Pusilla", 		"P_Umoth") %>%#
		setnames("Old_Moth_Evidence_Pusilla", 	"P_Omoth") %>%#
		setnames("Height_Pusilla", 				"P_H") %>%#
		setnames("Percent_Cover_Pusilla",		"P_PC")  %>%#
		# stricta#
		setnames("CACA_on_Stricta", 			"S_Ca") %>%#
		setnames("MEPR_on_Stricta", 			"S_Me") %>%#
		setnames("CHVI_on_Stricta", 			"S_Ch") %>%#
		setnames("UnknwnMoth_on_Stricta", 		"S_Umoth") %>%#
		setnames("Old_Moth_Evidence_Stricta", 	"S_Omoth") %>%#
		setnames("Height_Stricta",				"S_H")  %>%#
		setnames("Percent_Cover_Stricta",		"S_PC") %>%#
		as.data.frame	#
}#
#
#' Process Plot Survey Data#
#'#
#' @description Steps:#
#' \itemize{#
#'  \item fix Cluster variable name#
#'  \item include "In Demography Study" information#
#'  \item add vegetation information#
#'  \item add elevation, distance to water information#
#'  \item limit to only plots still in study#
#'  \item make coordinates numeric#
#' 	}#
#'#
#' @export#
#
processOccupancyPlotInfo <- function(Plot_Info) {#
	#--------------------------------------- Misc#
	# fix Cluster name#
	"Cluster" -> Plot_Info$Sampling[which(Plot_Info$Sampling=="Clusters")]#
	Plot_Info$Island %<>% as.factor#
	# file with ALL plots#
	# Plot_Info_All <- Plot_Info#
	#--------------------------------- include "In Demography Study" information#
	Plot_Info %<>% merge(ClustersInDemographicStudy, by = "Cluster", all=T)#
	# change NA to "no"#
	Plot_Info$InDemographicStudy[which(is.na(Plot_Info$InDemographicStudy))] <- "no"#
	# ---------------------------------------- ADD VEGETATION INFO ----------- ##
	# has two records for 1572#
	Plot_Info %<>% merge(Plot.Vegetation, by="Tag_Number", all=T)#
	# ---------------------------------------- ADD GIS INFO ------------------ ##
	# GIS_data_updated has remote sensing information, including elevation, dist_water#
	Plot_Info %<>% merge(GIS_data_updated, by="Tag_Number", all=T)#
	# limit to only plots still in study#
	Plot_Info %<>% filter(RemovedFromStudy!="Yes")#
	# make coordinates numeric#
	Plot_Info[,c(#
		"Easting", #
		"Northing")] %<>% #
		apply(., 2, as.numeric#
	)#
	return(Plot_Info)	#
}#
#
#' Process Plot Survey Data#
#'#
#' @description Steps:#
#' \itemize{#
	#'  \item limit to only plots still in study#
	#'  \item format date#
	#'  \item Change Yes/No to 1/0#
	#'  \item make variables numeric#
	#'  \item If pusilla is not present, change all pusilla-dependent data to NA#
	#'  \item If stricta is not present, change all stricta-dependent data to NA#
#' 	}#
#'#
#' @export#
#
processOccupancyPlotSurveys <- function(Plot_Surveys) {#
	# ----------------------------------------------------------- ERROR MESSAGES#
	# Duplicates in Plot Surveys#
	dups = Plot_Surveys %>%#
		group_by(Tag_Number, Date) %>%#
		summarise(Nrecords = length(CACA_on_Pusilla)) %>%#
		as.data.frame %>%#
		filter(Nrecords > 1)#
	if (dim(dups)[1] > 0) {#
		warning(paste(#
			"Duplicate plot surveys for plot(s)",#
			paste(unique(dups$Tag_Number), collapse=", "),#
			"on date(s)",#
			paste(unique(dups$Date), collapse=", ")#
		))#
	}#
	# duplicates for 1795 on 2013-02-10 are okay - I accidentally surveyed the plot twice; keep it for detectability#
	# ---------------------------- LIMIT TO ONLY SURVEYS OF PLOTS STILL IN STUDY#
	# Plot_Surveys_All <- Plot_Surveys#
	Plot_Surveys %<>% .[(.$Tag_Number %in% Plot_Info$Tag_Number), ]#
	# -------------------------------------------------------------- FORMAT DATE#
	Plot_Surveys$Date %<>% Format_Date_Function#
	# -------------------------------------------------- CHANGE YES, NO to 0, 1 #
	Plot_Surveys[,c(#
		"Ammophila",#
		"CACA_on_Ammo",#
		"MEPR_on_Ammo",#
		"CHVI_on_Ammo",#
		"DACT_on_Ammo",#
		"UnknwnMoth_on_Ammo",#
		"Old_Moth_Evidence_Ammophila",#
		"Pusilla",#
		"CACA_on_Pusilla",#
		"MEPR_on_Pusilla",#
		"CHVI_on_Pusilla",#
		"DACT_on_Pusilla",#
		"UnknwnMoth_on_Pusilla",#
		"Old_Moth_Evidence_Pusilla",#
		"Stricta",#
		"CACA_on_Stricta",#
		"MEPR_on_Stricta",#
		"CHVI_on_Stricta",#
		"DACT_on_Stricta",#
		"UnknwnMoth_on_Stricta",#
		"Old_Moth_Evidence_Stricta")] %<>% #
		apply(., 2, Yes_Function#
	)#
	Plot_Surveys[,c(#
		"Ammophila",#
		"CACA_on_Ammo",#
		"MEPR_on_Ammo",#
		"CHVI_on_Ammo",#
		"DACT_on_Ammo",#
		"UnknwnMoth_on_Ammo",#
		"Old_Moth_Evidence_Ammophila",#
		"Pusilla",#
		"CACA_on_Pusilla",#
		"MEPR_on_Pusilla",#
		"CHVI_on_Pusilla",#
		"DACT_on_Pusilla",#
		"UnknwnMoth_on_Pusilla",#
		"Old_Moth_Evidence_Pusilla",#
		"Stricta",#
		"CACA_on_Stricta",#
		"MEPR_on_Stricta",#
		"CHVI_on_Stricta",#
		"DACT_on_Stricta",#
		"UnknwnMoth_on_Stricta",#
		"Old_Moth_Evidence_Stricta")] %<>%#
		apply(., 2, No_Function#
	)#
	Plot_Surveys[,c(#
		"Ammophila",#
		"CACA_on_Ammo",#
		"MEPR_on_Ammo",#
		"CHVI_on_Ammo",#
		"DACT_on_Ammo",#
		"UnknwnMoth_on_Ammo",#
		"Old_Moth_Evidence_Ammophila",#
		"Pusilla",#
		"CACA_on_Pusilla",#
		"MEPR_on_Pusilla",#
		"CHVI_on_Pusilla",#
		"DACT_on_Pusilla",#
		"UnknwnMoth_on_Pusilla",#
		"Old_Moth_Evidence_Pusilla",#
		"Stricta",#
		"CACA_on_Stricta",#
		"MEPR_on_Stricta",#
		"CHVI_on_Stricta",#
		"DACT_on_Stricta",#
		"UnknwnMoth_on_Stricta",#
		"Old_Moth_Evidence_Stricta")] %<>% #
		apply(., 2, NA_Function#
	)#
	# ------------------------------------------------------------- MAKE NUMERIC#
	Plot_Surveys[,c(#
		"Ammophila",#
		"CACA_on_Ammo",#
		"MEPR_on_Ammo",#
		"CHVI_on_Ammo",#
		"DACT_on_Ammo",#
		"UnknwnMoth_on_Ammo",#
		"Old_Moth_Evidence_Ammophila",#
		"Pusilla",#
		"CACA_on_Pusilla",#
		"MEPR_on_Pusilla",#
		"CHVI_on_Pusilla",#
		"DACT_on_Pusilla",#
		"UnknwnMoth_on_Pusilla",#
		"Old_Moth_Evidence_Pusilla",#
		"Stricta",#
		"CACA_on_Stricta",#
		"MEPR_on_Stricta",#
		"CHVI_on_Stricta",#
		"DACT_on_Stricta",#
		"UnknwnMoth_on_Stricta",#
		"Old_Moth_Evidence_Stricta")] %<>% #
		apply(., 2, as.numeric#
	)#
	# ------------------ CHANGE CACTUS DEPENDENT DATA TO NA IF CACTI NOT PRESENT#
	# If pusilla is not present, change all pusilla-dependent data to NA#
	Plot_Surveys_Pusilla_1 <- Plot_Surveys %>% filter(Pusilla==1)#
	Plot_Surveys_Pusilla_0 <- Plot_Surveys %>% #
		filter(Pusilla==0 | is.na(Pusilla))#
	Plot_Surveys_Pusilla_0[,c(#
		"CACA_on_Pusilla",#
		"MEPR_on_Pusilla",#
		"CHVI_on_Pusilla",#
		"DACT_on_Pusilla",#
		"UnknwnMoth_on_Pusilla",#
		"Old_Moth_Evidence_Pusilla",#
		"Old_Moth_Evidence_recent_Pusilla",#
		"Percent_Cover_Pusilla",#
		"Height_Pusilla")] %<>% #
		apply(2, NA_Function#
	)#
	Plot_Surveys <- rbind(Plot_Surveys_Pusilla_1, Plot_Surveys_Pusilla_0)#
	# If stricta is not present, change all stricta-dependent data to NA#
	Plot_Surveys_Stricta_1 <- Plot_Surveys %>% filter(Stricta==1)#
	Plot_Surveys_Stricta_0 <- Plot_Surveys %>% #
		filter(Stricta==0 | is.na(Stricta))#
	Plot_Surveys_Stricta_0[,c(#
		"CACA_on_Stricta",#
		"MEPR_on_Stricta",#
		"CHVI_on_Stricta",#
		"DACT_on_Stricta",#
		"UnknwnMoth_on_Stricta",#
		"Old_Moth_Evidence_Stricta",#
		"Old_Moth_Evidence_recent_Stricta",#
		"Percent_Cover_Stricta",#
		"Height_Stricta")] %<>% #
		apply(2, NA_Function#
	)#
	Plot_Surveys <- rbind(Plot_Surveys_Stricta_1, Plot_Surveys_Stricta_0)#
	# ------------------------------------------------------------------------ ##
	return(Plot_Surveys)#
}#
#' fill occupancy plot surveys with info from plant surveys#
#' @description This data is from when I was specifically doing occupancy plot surveys.#
#' Specific rules for filling the plot surveys:#
#' \itemize{#
#'  \item percent cover: get from plot survey data; if no plot survey data for that tag number and date, fill with NA#
#'  \item height: get from plot survey data; if it was not recorded in the plot survey then use max. plant height from the plant survey data#
#'  \item insect presence/absence: get from plot survey data; if it was not recorded in the plot survey then use max. plant height from the plant survey data#
#'  \item limit to plot surveys after Dec. 2, 2012 (I wasn't surveying individual plants before this)#
#'  \item limit to Tag_Numbers that have marked plants#
#' }#
#' @param Plot_Surveys#
#' @param Plant_Surveys#
#' @export#
#
mergePlantSurveysPlotSurveys <- function(Plot_Surveys, Plant_Surveys) {#
	temp_A = filter(#
		Plot_Surveys, #
		Date > "2012-12-01", Tag_Number %in% Plant_Surveys$Tag_Number#
	)#
	Z = list()#
	# for each tag number in the plot surveys data#
	for (i in 1:length(unique(temp_A$Tag_Number))) {#
		# pull all records for this Tag Number from plot surveys#
		L = filter(temp_A, Tag_Number==unique(temp_A$Tag_Number)[i])#
		Z[[i]] <- as.data.frame(matrix(NA,length(L$Date),1))#
		Z[[i]][, 1] 					<- L$Tag_Number[1]#
		Z[[i]][, "Date"] 				<- L$Date#
		Z[[i]][, "Pictures"] 			<- L$Pictures#
		Z[[i]][, "PictureDirection"] 	<- L$PictureDirection#
		Z[[i]][, "Notes"] 				<- L$Notes#
		# for each date#
		for (j in 1:dim(L)[1]) {#
			# fill with occupancy survey data#
			Z[[i]][j, "P_plot_survey"] 	<- L$Pusilla[j]#
			Z[[i]][j, "P_plant_survey"] <-  "NA"#
			Z[[i]][j, "P_Ca"] 			<- L$P_Ca[j]#
			Z[[i]][j, "P_Me"] 			<- L$P_Me[j]#
			Z[[i]][j, "P_Ch"] 			<- L$P_Ch[j]#
			Z[[i]][j, "P_Umoth"] 		<- L$P_Umoth[j]#
			Z[[i]][j, "P_Omoth"] 		<- L$P_Omoth[j]#
			Z[[i]][j, "P_PC"] 			<- L$P_PC[j]#
			Z[[i]][j, "P_H"] 			<- L$P_H[j]#
			Z[[i]][j, "S_plot_survey"] 	<- L$Stricta[j]#
			Z[[i]][j, "S_plant_survey"] <- "NA"#
			Z[[i]][j, "S_Ca"] 			<- L$S_Ca[j]#
			Z[[i]][j, "S_Me"] 			<- L$S_Me[j]#
			Z[[i]][j, "S_Ch"] 			<- L$S_Ch[j]#
			Z[[i]][j, "S_Umoth"] 		<- L$S_Umoth[j]#
			Z[[i]][j, "S_Omoth"] 		<- L$S_Omoth[j]#
			Z[[i]][j, "S_PC"] 			<- L$S_PC[j]#
			Z[[i]][j, "S_H"] 			<- L$S_H[j]#
			# pull all plant survey records for this Tag Number and date from plant surveys#
			M = filter(Plant_Surveys, #
				Tag_Number==L$Tag_Number[1], #
				Date==unique(L$Date)[j],#
				# remove plants marked as dead#
				Dead!=1)#
			# remove plants marked as missing	#
			M = M[which(M$Missing!=1 | is.na(M$Missing)==T), ]#
			# if there is plant survey data for this date, update the occupancy survey data#
			# if the M dataframe has at least one row of data:#
			if (dim(M)[1] > 0) {#
				P = filter(M, Species=="pusilla")#
				Z[[i]][j, "P_plot_survey"] 	<- L$Pusilla[j]#
				Z[[i]][j, "P_plant_survey"] <- ifelse(dim(P)[1] > 0, 1, 0)#
				Z[[i]][j, "P_Ca"] 			<- Maximum(c(P$CA_t, L[j,]$P_Ca))#
				Z[[i]][j, "P_Me"] 			<- Maximum(c(P$ME_t, L[j,]$P_Me))#
				Z[[i]][j, "P_Ch"] 			<- Maximum(c(P$CH_t, L[j,]$P_Ch))#
				Z[[i]][j, "P_Umoth"] 		<- Maximum(c(#
												P$Unknown_Moth_t, #
												L[j,]$P_Umoth#
											))#
				Z[[i]][j, "P_Omoth"] 		<- Maximum(c(#
												P$Old_Moth_Evidence_t, #
												L[j,]$P_Omoth#
											))#
				Z[[i]][j, "P_PC"] 			<- L$P_PC[j]#
				# Height - if plot survey height is NA, then replace with max height from plant surveys#
				Z[[i]][j, "P_H"] 			<- ifelse(#
												is.na(L$P_H[j]) & dim(P)[1] > 0,#
												Maximum(P$Height_t), #
												L$P_H[j]#
											) #
				S = filter(M, Species=="stricta")#
				Z[[i]][j, "S_plot_survey"] 	<- L$Stricta[j]#
				Z[[i]][j, "S_plant_survey"] <- ifelse(dim(S)[1] > 0, 1, 0)#
				Z[[i]][j, "S_Ca"] 			<- Maximum(c(S$CA_t, L[j,]$S_Ca))#
				Z[[i]][j, "S_Me"] 			<- Maximum(c(S$ME_t, L[j,]$S_Me))#
				Z[[i]][j, "S_Ch"] 			<- Maximum(c(S$CH_t, L[j,]$S_Ch))#
				Z[[i]][j, "S_Umoth"] 		<- Maximum(c(#
												S$Unknown_Moth_t, #
												L[j,]$S_Umoth#
											))#
				Z[[i]][j, "S_Omoth"] 		<- Maximum(c(#
												S$Old_Moth_Evidence_t, #
												L[j,]$S_Omoth#
											))#
				Z[[i]][j, "S_PC"] 			<- L$S_PC[j]#
				# Height - if plot survey height is NA, then replace with max height from plant surveys#
				Z[[i]][j, "S_H"] <- ifelse(#
					is.na(L$S_H[j]) & dim(S)[1] > 0, #
					Maximum(S$Height_t), #
					L$S_H[j]#
				)#
			}#
		}	#
	}#
	A <- do.call(rbind.data.frame, Z)#
	names(A)[1] <- "Tag_Number"#
	#  FIX DATA FORMAT#
	A[,c(column_list,#
		"P_plot_survey", #
		"P_PC", #
		"P_H", #
		"S_plot_survey", #
		"S_PC", #
		"S_H")] %<>%#
		apply(., 2, as.numeric#
	)#
	A[,c(column_list,#
		"P_plot_survey", #
		"P_PC", #
		"P_H", #
		"S_plot_survey", #
		"S_PC", #
		"S_H")] %<>%#
		apply(., 2, NA_Function#
	)#
	return(A)#
}#
#
#' fill demography plot surveys with info from plant surveys#
#' @description I only entered a plot as surveyed in this dataset if I had completely marked/surveyed all plants in the plot. I entered data in this dataset near the beginning of the demography study, when I was setting the study up.#
#' Specific rules for filling the plot surveys:#
#' \itemize{#
#'  \item only use demography plot surveys that are not a duplicate of the occupancy plot surveys#
#' }#
#' @param D_Plot_Surveys#
#' @param Plant_Surveys#
#' @export#
#
mergePlotSurveysDemoPlotSurveys <- function(D_Plot_Surveys, Plant_Surveys) {#
	Z = list()#
	# for each tag number in the demography plot survey data#
	for (i in 1:length(unique(D_Plot_Surveys$Tag_Number))) {#
		# pull all records for this Tag Number from plot surveys#
		L = filter(#
			D_Plot_Surveys, #
			Tag_Number==unique(D_Plot_Surveys$Tag_Number)[i]#
		)#
		Z[[i]] 			<- as.data.frame(matrix(NA,length(unique(L$Date)),1))#
		Z[[i]][, 1] 	<- L$Tag_Number[1]#
		Z[[i]][, "Date"] <- unique(L$Date)#
		# for each date#
		for (j in 1:length(unique(L$Date))) {#
			# pull all plant survey records for this Tag Number and date from plant surveys#
			M = filter(#
				Plant_Surveys, #
				Tag_Number==L$Tag_Number[1], #
				Date==unique(L$Date)[j],#
				# remove plants marked as dead#
				Dead!=1#
			)#
			# remove plants marked as missing	#
			M = M[which(M$Missing!=1 | is.na(M$Missing)==T), ]#
			# if there is plant survey data for this date, update the occupancy survey data#
			# if the M dataframe has at least one row of data:#
			if (dim(M)[1] > 0) {#
				P = filter(M, Species=="pusilla")#
				Z[[i]][j, "P_plant_survey"] <-  ifelse(dim(P)[1] > 0, 1, 0) #
				Z[[i]][j, "P_Ca"] 			<-  Maximum(P$CA_t) #
				Z[[i]][j, "P_Me"] 			<-  Maximum(P$ME_t) #
				Z[[i]][j, "P_Ch"] 			<-  Maximum(P$CH_t) #
				Z[[i]][j, "P_Umoth"] 		<-  Maximum(P$Unknown_Moth_t) #
				Z[[i]][j, "P_Omoth"] 		<-  Maximum(P$Old_Moth_Evidence_t) #
				Z[[i]][j, "P_H"] 			<- Maximum(P$Height_t)#
				S = filter(M, Species=="stricta")#
				Z[[i]][j, "S_plant_survey"] <- ifelse(dim(S)[1] > 0, 1, 0) #
				Z[[i]][j, "S_Ca"] 			<- Maximum(S$CA_t) #
				Z[[i]][j, "S_Me"] 			<- Maximum(S$ME_t) #
				Z[[i]][j, "S_Ch"] 			<- Maximum(S$CH_t) #
				Z[[i]][j, "S_Umoth"] 		<- Maximum(S$Unknown_Moth_t) #
				Z[[i]][j, "S_Omoth"] 		<- Maximum(S$Old_Moth_Evidence_t) #
				Z[[i]][j, "S_H"] 			<- Maximum(S$Height_t)#
			}#
		}#
	}#
	B <- do.call(rbind.fill, Z)#
	names(B)[1] <- "Tag_Number"#
	#  FIX DATA FORMAT#
	B[,c(#
		column_list,#
		"P_H", #
		"S_H")] %<>%#
		apply(., 2, as.numeric#
	)#
	B[,c(#
		column_list,#
		"P_H",  #
		"S_H")] %<>%#
		apply(., 2, NA_Function#
	)#
	return(B)	#
}#
#
#' Create occupancy plot survey data from plant surveys#
#' @description This data is from when I was surveying plants only, not also doing plot surveys.#
#' Specific rules for filling the plot surveys:#
#' \itemize{#
#'  \item I can only add absence data when I know that I surveyed all the plants that day; this requires creating a list of possible plants alive for each survey day#
#'  \item filter plant surveys by dates that are not in plot surveys and also not in demographic plot surveys (I don't want to replicate plot, date combos)#
#' }#
#' @param Plant_Surveys#
#' @param Plot_Surveys#
#' @param D_Plot_Surveys#
#' @export#
#
createPlotSurveysfromPlantSurveys <- function(Plant_Surveys, Plot_Surveys, D_Plot_Surveys) {#
	# create Tag/Date Combo Field#
	Plant_Surveys 	%<>% mutate(Tag_Date=paste(Tag_Number, Date))#
	Plot_Surveys 	%<>% mutate(Tag_Date=paste(Tag_Number, Date))#
	D_Plot_Surveys 	%<>% mutate(Tag_Date=paste(Tag_Number, Date))#
	# keep records of Tag Numbers not surveyed on particular dates#
	temp.plant.surveys <- filter(#
		Plant_Surveys, #
		!(Tag_Date %in% Plot_Surveys$Tag_Date),#
		!(Tag_Date %in% D_Plot_Surveys$Tag_Date)#
	)#
	# print plants with Tag_Number==NA as warning#
	TagNumbNA <- temp.plant.surveys %>% #
		filter(is.na(temp.plant.surveys$Tag_Number)) %$%#
		PlantID#
	if (length(TagNumbNA) > 0) {#
		warning("Plants with Tag_Number=NA:", paste(TagNumbNA, collapse=","))#
	}#
	# remove plants with Tag_Number==NA#
	temp.plant.surveys <- filter(#
		temp.plant.surveys, #
		is.na(temp.plant.surveys$Tag_Number)==FALSE#
	)#
	Z = list()#
	# for each tag number in the demography plot survey data#
	for (i in 1:length(unique(temp.plant.surveys$Tag_Number))) {#
		# pull all records for this Tag Number from temp.plant.surveys#
		L = filter(#
			temp.plant.surveys, #
			Tag_Number==unique(temp.plant.surveys$Tag_Number)[i]#
		)#
		Z[[i]] 			<- as.data.frame(matrix(NA,length(unique(L$Date)),1))	#
		Z[[i]][, 1] 	<- L$Tag_Number[1]#
		Z[[i]][, "Date"] <- unique(L$Date)#
		# for each date#
		for (j in 1:length(unique(L$Date))) {#
			# pull all plant survey records for this Tag Number and date from plant surveys remove plants marked as missing or dead	#
			M = filter(L, Date==unique(L$Date)[j], Dead!=1)#
			M = M[which(M$Missing!=1 | is.na(M$Missing)==T), ]#
			# get list of PlantIDs for this plot#
			N = filter(#
				Plant_Info, #
				Tag_Number==L$Tag_Number[1], #
				# only include plants that are listed as having been added to Plant.Info on or after Date#
				First.Survey.Date <= unique(L$Date)[j],#
				# exclude dead plants (including date plant was first recorded as dead)#
				FirstDeadMissingObservation > unique(L$Date)[j] | #
					is.na(FirstDeadMissingObservation)==T#
			)#
			# if all PlotPlantIDs were surveyed for a given date:#
			if (identical(#
				M$PlotPlantID[order(M$PlotPlantID)], #
				N$PlotPlantID[order(N$PlotPlantID)]#
			)==T) {#
				P = filter(M, Species=="pusilla")#
				Z[[i]][j, "P_plant_survey"] <- ifelse(dim(P)[1] > 0, 1, 0) #
				Z[[i]][j, "P_Ca"] 			<- Maximum(P$CA_t) #
				Z[[i]][j, "P_Me"] 			<- Maximum(P$ME_t) #
				Z[[i]][j, "P_Ch"] 			<- Maximum(P$CH_t) #
				Z[[i]][j, "P_Umoth"] 		<- Maximum(P$Unknown_Moth_t) #
				Z[[i]][j, "P_Omoth"] 		<- Maximum(P$Old_Moth_Evidence_t) #
				S = filter(M, Species=="stricta")#
				Z[[i]][j, "S_plant_survey"] <- ifelse(dim(S)[1] > 0, 1, 0) #
				Z[[i]][j, "S_Ca"] 			<- Maximum(S$CA_t) #
				Z[[i]][j, "S_Me"] 			<- Maximum(S$ME_t) #
				Z[[i]][j, "S_Ch"] 			<- Maximum(S$CH_t) #
				Z[[i]][j, "S_Umoth"] 		<- Maximum(S$Unknown_Moth_t) #
				Z[[i]][j, "S_Omoth"] 		<- Maximum(S$Old_Moth_Evidence_t)#
				Z[[i]][j, "all_surveyed"] 	<- "Yes"#
			} #
			# if all PlotPlantIDs were NOT surveyed on this date#
			else {#
				P = filter(M, Species=="pusilla")#
				Z[[i]][j, "P_plant_survey"] <- ifelse(dim(P)[1] > 0, 1, NA) #
				Z[[i]][j, "P_Ca"] 			<- mysum1(P$CA_t)#
				Z[[i]][j, "P_Me"] 			<- mysum1(P$ME_t)#
				Z[[i]][j, "P_Ch"] 			<- mysum1(P$CH_t)#
				Z[[i]][j, "P_Umoth"] 		<- mysum1(P$Unknown_Moth_t)#
				Z[[i]][j, "P_Omoth"] 		<- mysum1(P$Old_Moth_Evidence_t)#
				S = filter(M, Species=="stricta")#
				Z[[i]][j, "S_plant_survey"] <- ifelse(dim(S)[1] > 0, 1, NA) #
				Z[[i]][j, "S_Ca"] 			<- mysum1(S$CA_t)#
				Z[[i]][j, "S_Me"] 			<- mysum1(S$ME_t)#
				Z[[i]][j, "S_Ch"] 			<- mysum1(S$CH_t)#
				Z[[i]][j, "S_Umoth"] 		<- mysum1(S$Unknown_Moth_t)#
				Z[[i]][j, "S_Omoth"] 		<- mysum1(S$Old_Moth_Evidence_t)#
				Z[[i]][j, "all_surveyed"] 	<- "No"#
			}#
		}#
	}	#
	C <- do.call(rbind.data.frame, Z)#
	names(C)[1] <- "Tag_Number"#
	# FIX DATA FORMAT#
	C[, column_list] %<>% apply(., 2, as.numeric)#
	C[, column_list] %<>% apply(., 2, NA_Function)#
	return(C)	#
}#
#
#' Create occupancy plot survey data from original plant survey data#
#' @description This data is from when I was surveying plants only, not also doing occupancy plot surveys. After IDing and surveying these plants, I deleted these IDs and renamed the plants so the IDs here DO NOT match the surveys and IDs in the demography study data.#
#' Specific rules for filling the plot surveys:#
#' \itemize{#
#'  \item for these dates I am not certain that I surveyed all plants in the plots therefore either something is present or an NA#
#' }#
#' @param Original_Plant_Data#
#' @export#
#
createPlotSurveysfromOrigPlantSurveys <- function(Original_Plant_Data) {#
	Z = list()#
	# for each tag number in the demography plot survey data#
	for (i in 1:length(unique(Original_Plant_Data$Tag_Number))) {#
		# pull all records for this Tag Number from temp.plant.surveys#
		L = filter(#
			Original_Plant_Data, #
			Tag_Number==unique(Original_Plant_Data$Tag_Number)[i]#
		)#
		Z[[i]] 			<- as.data.frame(matrix(NA,length(unique(L$Date)),1))	#
		Z[[i]][, 1] 	<- L$Tag_Number[1]#
		Z[[i]][, "Date"] <- unique(L$Date)#
		# for each date#
		for (j in 1:length(unique(L$Date))) {#
			# pull all plant survey records for this Tag Number and date from plant surveys#
			M = filter(L, Date==unique(L$Date)[j])#
			P = filter(M, HostSpecies=="pusilla")#
			Z[[i]][j, "P_plant_survey"] 	<-  ifelse(dim(P)[1] > 0, 1, NA) #
			Z[[i]][j, "P_Ca"] 				<- mysum1(P$CA_t)#
			Z[[i]][j, "P_Me"] 				<- mysum1(P$ME_t)#
			Z[[i]][j, "P_Ch"] 				<- mysum1(P$CH_t)#
			Z[[i]][j, "P_Umoth"] 			<- mysum1(P$Unknown_Moth_t)#
			Z[[i]][j, "P_Omoth"] 	<- mysum1(P$Old_Moth_Evidence_t)			#
			S = filter(M, HostSpecies=="stricta")#
			Z[[i]][j, "S_plant_survey"] 	<-  ifelse(dim(S)[1] > 0, 1, NA) #
			Z[[i]][j, "S_Ca"] 				<- mysum1(S$CA_t)#
			Z[[i]][j, "S_Me"] 				<- mysum1(S$ME_t)#
			Z[[i]][j, "S_Ch"] 				<- mysum1(S$CH_t)#
			Z[[i]][j, "S_Umoth"]	 		<- mysum1(S$Unknown_Moth_t)#
			Z[[i]][j, "S_Omoth"] 			<- mysum1(S$Old_Moth_Evidence_t)#
		}#
	}	#
	D <- do.call(rbind.data.frame, Z)#
	names(D)[1] <- "Tag_Number"#
	#  FIX DATA FORMAT#
	D[, column_list] %<>% apply(., 2, as.numeric)#
	D[, column_list] %<>% apply(., 2, NA_Function)#
	return(D)	#
}#
#
#' Merge Duplicate Surveys#
#' @description Merge duplicate surveys (two or more surveys on the same date) and add columns for CACA presence and MEPR presence (regardless of which cactus the insects were found).#
#' @param E#
#' @export#
#
mergeDuplicateSurveys <- function(E) {#
	Z = list()#
	# for each tag number#
	for (i in 1:length(unique(E$Tag_Number))) {#
		# pull all records for this Tag Number from temp.plant.surveys#
		L = filter(E, Tag_Number==unique(E$Tag_Number)[i])#
		Z[[i]] 			<- as.data.frame(matrix(NA,length(unique(L$Date)),1))#
		Z[[i]][, 1] 	<- L$Tag_Number[1]#
		Z[[i]][, "Date"] <- unique(L$Date)#
		# for each date#
		for (j in 1:length(unique(L$Date))) {#
			# pull all plant survey records for this Tag Number and date from plant surveys#
			M = filter(L, Date==unique(L$Date)[j])#
			# pusilla		#
			Z[[i]][j, "P_plot_survey"] 		<- Maximum(M$P_plot_survey)#
			Z[[i]][j, "P_plant_survey"] 	<- Maximum(M$P_plant_survey) #
			Z[[i]][j, "P_Ca"] 				<- Maximum(M$P_Ca)#
			Z[[i]][j, "P_Me"] 				<- Maximum(M$P_Me)#
			Z[[i]][j, "P_Ch"] 				<- Maximum(M$P_Ch)#
			Z[[i]][j, "P_Umoth"] 			<- Maximum(M$P_Umoth)#
			Z[[i]][j, "P_Omoth"] 			<- Maximum(M$P_Omoth)#
			Z[[i]][j, "P_PC"] 				<- Maximum(M$P_PC)#
			Z[[i]][j, "P_H"] 				<- Maximum(M$P_H)#
			# stricta		#
			Z[[i]][j, "S_plot_survey"] 		<- Maximum(M$S_plot_survey)#
			Z[[i]][j, "S_plant_survey"] 	<- Maximum(M$S_plant_survey)#
			Z[[i]][j, "S_Ca"] 				<- Maximum(M$S_Ca)#
			Z[[i]][j, "S_Me"] 				<- Maximum(M$S_Me)#
			Z[[i]][j, "S_Ch"] 				<- Maximum(M$S_Ch)#
			Z[[i]][j, "S_Umoth"] 			<- Maximum(M$S_Umoth)#
			Z[[i]][j, "S_Omoth"] 			<- Maximum(M$S_Omoth)#
			Z[[i]][j, "S_PC"] 				<- Maximum(M$S_PC)#
			Z[[i]][j, "S_H"] 				<- Maximum(M$S_H)#
		}#
	}#
	return(Z)#
}
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
#' Process Plant Info#
#'#
#' @description Process Plant Info#
#' @param Plant_Info Dataset with Plant Information#
#' @param Plot_Info Dataset with Plot Information#
#'#
#' @importFrom dplyr select summarise group_by arrange#
#
#' @export#
#
processPlantInfo <- function(Plant_Info, Plot_Info) {#
	# ----------------------------------------------------------- ERROR MESSAGES#
	# Plants listed as species Not Recorded#
	dups <- Plant_Info[which(Plant_Info$HostSpecies=="Not Recorded"), ]#
	if (dim(dups)[1] > 0) {#
		warning(paste(#
			"Species identity not recorded for plantID: ",#
			paste(dups$PlantID, collapse=", ")#
		))#
	}#
	# are any plant IDs in Plant Info not in the surveys?#
	dups <- Plant_Info %>%#
		filter(!(PlantID %in% Plant_Surveys$PlantID)) %>% #
		.[,2:5]#
	if (dim(dups)[1] > 0) {#
		warning(paste(#
			"Some plant IDs are not in Plant Surveys data: ",#
			paste(dups$PlantID, collapse=", ")#
		))#
	}#
	# make sure that there is plot info for each tag number in plant info#
	dups <- Plant_Info %>%#
		filter(!(Tag_Number %in% Plot_Info$Tag_Number))#
	if (dim(dups)[1] > 0) {#
		warning(paste(#
			"Plants (",#
			paste(unique(dups$PlantID), collapse=", "),#
			") are listed as being in plots not in Plot Info data (",#
			paste(unique(dups$Tag_Number), collapse=", "),#
			")"#
		))#
	}#
	# ----------------- ADD INFO FROM Plot_Info (Cluster, Network, Island, etc.)#
	Plant_Info <- Plot_Info %>%#
		select(#
			Island, #
			Tag_Number, #
			Cluster, #
			Cluster2, #
			Network, #
			Sampling, #
			SurveyOrder#
		) %>%#
		merge(Plant_Info, by = "Tag_Number", all.y=TRUE) %>%#
		as.data.table %>%#
		setnames("HostSpecies", "Species") %>%#
		as.data.frame#
	#---------------------------------------------------------- FORMAT PLANT IDs#
	Plant_Info %<>% Format_PlantIDs_Function#
	#---------------------- CALCULATE AND ADD NUMBER OF PlotPlantIDs PER PlantID#
	Plant_Info <- Plant_Info %>%#
		group_by(PlantID) %>%#
		summarise(#
			N.PlotPlantIDs = length(unique(PlotPlantID))#
		) %>%#
		merge(Plant_Info, by="PlantID")#
	#-------------------------- ADD FIRST and LAST DATE PlotPlantID WAS SURVEYED#
	# particularly relevant for plants that grew into plots over the course of the study (and thus the number of PlotPlantIDs for a given PlantID changed over time)#
	# also helps calculate the number of days a plant was known to have survived#
	Plant_Info <- Plant_Surveys %>%#
		group_by(PlotPlantID) %>%#
		summarise(#
			First.Survey.Date = min(Date),#
			Last.Survey.Date = max(Date)#
		) %>%#
		merge(Plant_Info, ., by="PlotPlantID", all.y=TRUE)#
	# ----------------------------------------------------------- PLANT SURVIVAL#
	# indicate whether plant was previously listed as dead or missing#
	# group based on plant ID number#
	Plant_Info <- Plant_Surveys %>% group_by(PlotPlantID) %>%#
		summarise( #
		# a plant has been obvserved to be dead/missing if at least 1 observation (> 0)#
		DeadObservation 		= Dead_Missing_Function(Dead),#
		MissingObservation 		= Dead_Missing_Function(Missing),#
		# a plant is confirmed dead/missing if at least 2 observations (> 1)#
		ConfirmedDead 			= Confirmed_Dead_Missing_Function(Dead),#
		ConfirmedMissing 		= Confirmed_Dead_Missing_Function(Missing),#
		ConfirmedDeadMissing = Confirmed_Dead_Missing_Function(c(Dead,Missing))	#
	) %>%#
	merge(Plant_Info, ., by="PlotPlantID")#
	# for those first marked dead/missing during the last survey, assume they are confirmed dead/missing#
	Plant_Info %<>% #
		group_by(PlotPlantID) %>%#
		mutate(#
			ConfirmedDeadMissing = replace(#
				ConfirmedDeadMissing,#
				which(Last.Survey.Date >= "2015-05-01"),#
				max(#
					DeadObservation,#
					MissingObservation,#
					ConfirmedDead,#
					ConfirmedMissing,#
					ConfirmedDeadMissing,#
					na.rm=T#
				)#
			)#
		)#
		# FIX LAST SURVEY DATE FOR THOSE THAT AREN'T DEAD#
	#---------------- ADD FIRST DATE PlotPlantID WAS RECORDED AS DEAD OR MISSING#
	# oldest date PlotPlantID was recorded as dead#
	temp_dead_obs <- filter(Plant_Surveys, Dead=="1") %>%#
		group_by(PlotPlantID) %>%#
		summarise(FirstDeadObservation = min(Date))#
	# oldest date PlotPlantID was recorded as missing#
	temp_missing_obs <- filter(Plant_Surveys, Missing=="1") %>%#
		group_by(PlotPlantID) %>%#
		summarise(FirstMissingObservation = min(Date))#
	# oldest date PlotPlantID was recorded as missing or dead#
	temp_dead_missing <- merge(#
		temp_dead_obs, #
		temp_missing_obs, #
		by="PlotPlantID", #
		all=T#
	) #
	temp_dead_missing$FirstDeadMissingObservation = #
		select(#
			temp_dead_missing, #
			FirstDeadObservation,#
			FirstMissingObservation#
		) %>% #
		apply(., 1, min, na.rm=T) %>%#
		as.Date#
	# merge with Plant_Info#
	Plant_Info <- merge(Plant_Info, temp_dead_missing, by="PlotPlantID", all=T)#
	# fix last survey date#
	#	for each PlotPlantID, keep FirstDeadMissingObservation#
	Plant_Info %<>% #
		group_by(PlotPlantID) %>%#
		mutate(#
			PlantID.Last.Alive = replace(#
				Last.Survey.Date,#
				which(ConfirmedDeadMissing==1),#
				FirstDeadMissingObservation#
			)#
		)#
		# then find latest date at which a plant was surveyed (regardless of whether it had died or not)#
		Plant_Info %<>% group_by(PlantID) %>%#
		mutate(#
			PlantID.Last.Alive = max(Last.Survey.Date, na.rm=T)#
		)#
		# find the earliest date that the plant was surveyed#
		Plant_Info %<>% group_by(PlantID) %>%#
		mutate(#
			PlantID.First.Alive = min(First.Survey.Date, na.rm=T)#
		)#
		# STANDARDIZE PARENT, REPRODUCTIVEMODE for PLANTIDs#
#
	# ---------------------- CALCULATE HOW MANY DAYS PLANT WAS KNOWN TO BE ALIVE#
	Plant_Info %<>% #
		group_by(PlantID) %>%#
		mutate(DaysAlive = PlantID.Last.Alive - PlantID.First.Alive)#
	# -------------------------------------------------- CLEANUP FOR CONSISTENCY#
	Plant_Info[,c(#
		"Quadrant",#
		"ReproductiveMode",#
		"Parent")] %<>%#
		apply(., 2, as.character#
	)#
	Plant_Info[,c(#
		"Quadrant",#
		"ReproductiveMode",#
		"Parent")] %<>%#
		apply(., 2, NA_Function#
	)#
	Plant_Info$ReproductiveMode %<>% WoodyTrunk_Function()#
	Plant_Info[,c(#
		"Quadrant",#
		"ReproductiveMode",#
		"Parent")] %<>%#
		apply(., 2, as.factor#
	)#
	# ------------------------------------------------- ADD InDemomographicStudy#
	# save all Plant_Info#
	Plant_Info_All <- Plant_Info#
	Plant_Info %<>% merge(#
		., #
		ClustersInDemographicStudy, #
		by = "Cluster",#
		all=TRUE#
	) #
	# ------------------------------------------------------------ ADD ClusterID#
	#	do this because some clusters share plots#
	Plot_Info_Cluster <- Plot_Info %>%#
		select(Tag_Number, Cluster, Cluster2) %>%#
		reshape2:::melt.data.frame(., id.vars=c("Tag_Number"), #
			value.name="ClusterID") %>%#
		filter(ClusterID!=0) %>%#
		.[, -2] %>%#
		arrange(Tag_Number)#
	Plot_Info_Cluster %<>%#
		group_by(Tag_Number) %>%#
		summarise(ClusterID = paste(ClusterID, collapse=", "))#
	# CLUSTER ID FOR PLOTS *NOT* IN CLUSTERS#
	temp_A = Plot_Info %>%#
		select(Tag_Number, Cluster) %>%#
		filter(Cluster==0)#
	temp_A$ClusterID <- temp_A$Tag_Number#
	temp_A %<>% .[, -2]#
	Plot_Info_Cluster %<>% rbind.fill(temp_A) %>% #
		merge(Plot_Info, by="Tag_Number") %>%#
		select(ClusterID, Tag_Number)#
	Plant_Info %<>% merge(Plot_Info_Cluster, by="Tag_Number", all.x=T)#
	# --------------------------------------------------- remove InBigPlantStudy#
	Plant_Info[which(is.na(Plant_Info$InBigPlantStudy)), ]$InBigPlantStudy <- "No"#
	Plant_Info[which(Plant_Info$InBigPlantStudy=="yes"), ]$InBigPlantStudy <- "Yes"#
	Plant_Info[which(Plant_Info$InBigPlantStudy==""), ]$InBigPlantStudy <- "No"#
	Plant_Info %<>% filter(InBigPlantStudy=="No")#
	# ------------------------------------------------------------------------ ##
	return(Plant_Info)#
}#
#' Save File with Confirmed Dead and Missing Plants#
#'#
#' @description write csv with dead/missing plants - remove them from the maps#
#' @param Plant_Info Dataset with Plant Information#
#'#
#' @export#
saveConfirmedDeadMissing <- function(Plant_Info) {#
	Plant_Info_Dead <- filter(#
		Plant_Info, #
		ConfirmedDead=="1" | ConfirmedMissing=="1"#
	)#
	Plant_Info_Dead %<>% arrange(Tag_Number, PlantID)#
}
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
#' Process Plant Info#
#'#
#' @description Process Plant Info#
#' @param Plant_Info Dataset with Plant Information#
#' @param Plot_Info Dataset with Plot Information#
#'#
#' @importFrom dplyr select summarise group_by arrange#
#
#' @export#
#
processPlantInfo <- function(Plant_Info, Plot_Info) {#
	# ----------------------------------------------------------- ERROR MESSAGES#
	# Plants listed as species Not Recorded#
	dups <- Plant_Info[which(Plant_Info$HostSpecies=="Not Recorded"), ]#
	if (dim(dups)[1] > 0) {#
		warning(paste(#
			"Species identity not recorded for plantID: ",#
			paste(dups$PlantID, collapse=", ")#
		))#
	}#
	# are any plant IDs in Plant Info not in the surveys?#
	dups <- Plant_Info %>%#
		filter(!(PlantID %in% Plant_Surveys$PlantID)) %>% #
		.[,2:5]#
	if (dim(dups)[1] > 0) {#
		warning(paste(#
			"Some plant IDs are not in Plant Surveys data: ",#
			paste(dups$PlantID, collapse=", ")#
		))#
	}#
	# make sure that there is plot info for each tag number in plant info#
	dups <- Plant_Info %>%#
		filter(!(Tag_Number %in% Plot_Info$Tag_Number))#
	if (dim(dups)[1] > 0) {#
		warning(paste(#
			"Plants (",#
			paste(unique(dups$PlantID), collapse=", "),#
			") are listed as being in plots not in Plot Info data (",#
			paste(unique(dups$Tag_Number), collapse=", "),#
			")"#
		))#
	}#
	# ----------------- ADD INFO FROM Plot_Info (Cluster, Network, Island, etc.)#
	Plant_Info <- Plot_Info %>%#
		select(#
			Island, #
			Tag_Number, #
			Cluster, #
			Cluster2, #
			Network, #
			Sampling, #
			SurveyOrder#
		) %>%#
		merge(Plant_Info, by = "Tag_Number", all.y=TRUE) %>%#
		as.data.table %>%#
		setnames("HostSpecies", "Species") %>%#
		as.data.frame#
	#---------------------------------------------------------- FORMAT PLANT IDs#
	Plant_Info %<>% Format_PlantIDs_Function#
	#---------------------- CALCULATE AND ADD NUMBER OF PlotPlantIDs PER PlantID#
	Plant_Info <- Plant_Info %>%#
		group_by(PlantID) %>%#
		summarise(#
			N.PlotPlantIDs = length(unique(PlotPlantID))#
		) %>%#
		merge(Plant_Info, by="PlantID")#
	#-------------------------- ADD FIRST and LAST DATE PlotPlantID WAS SURVEYED#
	# particularly relevant for plants that grew into plots over the course of the study (and thus the number of PlotPlantIDs for a given PlantID changed over time)#
	# also helps calculate the number of days a plant was known to have survived#
	Plant_Info <- Plant_Surveys %>%#
		group_by(PlotPlantID) %>%#
		summarise(#
			First.Survey.Date = min(Date),#
			Last.Survey.Date = max(Date)#
		) %>%#
		merge(Plant_Info, ., by="PlotPlantID", all.y=TRUE)#
	# ----------------------------------------------------------- PLANT SURVIVAL#
	# indicate whether plant was previously listed as dead or missing#
	# group based on plant ID number#
	Plant_Info <- Plant_Surveys %>% group_by(PlotPlantID) %>%#
		summarise( #
		# a plant has been obvserved to be dead/missing if at least 1 observation (> 0)#
		DeadObservation 		= Dead_Missing_Function(Dead),#
		MissingObservation 		= Dead_Missing_Function(Missing),#
		# a plant is confirmed dead/missing if at least 2 observations (> 1)#
		ConfirmedDead 			= Confirmed_Dead_Missing_Function(Dead),#
		ConfirmedMissing 		= Confirmed_Dead_Missing_Function(Missing),#
		ConfirmedDeadMissing = Confirmed_Dead_Missing_Function(c(Dead,Missing))	#
	) %>%#
	merge(Plant_Info, ., by="PlotPlantID")#
	# for those first marked dead/missing during the last survey, assume they are confirmed dead/missing#
	Plant_Info %<>% #
		group_by(PlotPlantID) %>%#
		mutate(#
			ConfirmedDeadMissing = replace(#
				ConfirmedDeadMissing,#
				which(Last.Survey.Date >= "2015-05-01"),#
				max(#
					DeadObservation,#
					MissingObservation,#
					ConfirmedDead,#
					ConfirmedMissing,#
					ConfirmedDeadMissing,#
					na.rm=T#
				)#
			)#
		)#
		# FIX LAST SURVEY DATE FOR THOSE THAT AREN'T DEAD#
	#---------------- ADD FIRST DATE PlotPlantID WAS RECORDED AS DEAD OR MISSING#
	# oldest date PlotPlantID was recorded as dead#
	temp_dead_obs <- filter(Plant_Surveys, Dead=="1") %>%#
		group_by(PlotPlantID) %>%#
		summarise(FirstDeadObservation = min(Date))#
	# oldest date PlotPlantID was recorded as missing#
	temp_missing_obs <- filter(Plant_Surveys, Missing=="1") %>%#
		group_by(PlotPlantID) %>%#
		summarise(FirstMissingObservation = min(Date))#
	# oldest date PlotPlantID was recorded as missing or dead#
	temp_dead_missing <- merge(#
		temp_dead_obs, #
		temp_missing_obs, #
		by="PlotPlantID", #
		all=T#
	) #
	temp_dead_missing$FirstDeadMissingObservation = #
		select(#
			temp_dead_missing, #
			FirstDeadObservation,#
			FirstMissingObservation#
		) %>% #
		apply(., 1, min, na.rm=T) %>%#
		as.Date#
	# merge with Plant_Info#
	Plant_Info <- merge(Plant_Info, temp_dead_missing, by="PlotPlantID", all=T)#
	# fix last survey date#
	#	for each PlotPlantID, keep FirstDeadMissingObservation#
	Plant_Info %<>% #
		group_by(PlotPlantID) %>%#
		mutate(#
			PlantID.Last.Alive = replace(#
				Last.Survey.Date,#
				which(ConfirmedDeadMissing==1),#
				FirstDeadMissingObservation#
			)#
		)#
		# then find latest date at which a plant was surveyed (regardless of whether it had died or not)#
		Plant_Info %<>% group_by(PlantID) %>%#
		mutate(#
			PlantID.Last.Alive = max(Last.Survey.Date, na.rm=T)#
		)#
		# find the earliest date that the plant was surveyed#
		Plant_Info %<>% group_by(PlantID) %>%#
		mutate(#
			PlantID.First.Alive = min(First.Survey.Date, na.rm=T)#
		)#
		# STANDARDIZE PARENT, REPRODUCTIVEMODE for PLANTIDs#
#
	# ---------------------- CALCULATE HOW MANY DAYS PLANT WAS KNOWN TO BE ALIVE#
	Plant_Info %<>% #
		group_by(PlantID) %>%#
		mutate(DaysAlive = PlantID.Last.Alive - PlantID.First.Alive)#
	# -------------------------------------------------- CLEANUP FOR CONSISTENCY#
	Plant_Info[,c(#
		"Quadrant",#
		"ReproductiveMode",#
		"Parent")] %<>%#
		apply(., 2, as.character#
	)#
	Plant_Info[,c(#
		"Quadrant",#
		"ReproductiveMode",#
		"Parent")] %<>%#
		apply(., 2, NA_Function#
	)#
	Plant_Info$ReproductiveMode %<>% WoodyTrunk_Function()#
	Plant_Info[,c(#
		"Quadrant",#
		"ReproductiveMode",#
		"Parent")] %<>%#
		apply(., 2, as.factor#
	)#
	# ------------------------------------------------- ADD InDemomographicStudy#
	# save all Plant_Info#
	Plant_Info_All <- Plant_Info#
	Plant_Info %<>% merge(#
		., #
		ClustersInDemographicStudy, #
		by = "Cluster",#
		all=TRUE#
	) #
	# ------------------------------------------------------------ ADD ClusterID#
	#	do this because some clusters share plots#
	Plot_Info_Cluster <- Plot_Info %>%#
		select(Tag_Number, Cluster, Cluster2) %>%#
		reshape2:::melt.data.frame(., id.vars=c("Tag_Number"), #
			value.name="ClusterID") %>%#
		filter(ClusterID!=0) %>%#
		.[, -2] %>%#
		arrange(Tag_Number)#
	Plot_Info_Cluster %<>%#
		group_by(Tag_Number) %>%#
		summarise(ClusterID = paste(ClusterID, collapse=", "))#
	# CLUSTER ID FOR PLOTS *NOT* IN CLUSTERS#
	temp_A = Plot_Info %>%#
		select(Tag_Number, Cluster) %>%#
		filter(Cluster==0)#
	temp_A$ClusterID <- temp_A$Tag_Number#
	temp_A %<>% .[, -2]#
	Plot_Info_Cluster %<>% rbind.fill(temp_A) %>% #
		merge(Plot_Info, by="Tag_Number") %>%#
		select(ClusterID, Tag_Number)#
	Plant_Info %<>% merge(Plot_Info_Cluster, by="Tag_Number", all.x=T)#
	# --------------------------------------------------- remove InBigPlantStudy#
	Plant_Info[which(is.na(Plant_Info$InBigPlantStudy)), ]$InBigPlantStudy <- "No"#
	Plant_Info[which(Plant_Info$InBigPlantStudy=="yes"), ]$InBigPlantStudy <- "Yes"#
	Plant_Info[which(Plant_Info$InBigPlantStudy==""), ]$InBigPlantStudy <- "No"#
	Plant_Info %<>% filter(InBigPlantStudy=="No")#
	# ------------------------------------------------------------------------ ##
	return(Plant_Info)#
}#
#' Save File with Confirmed Dead and Missing Plants#
#'#
#' @description write csv with dead/missing plants - remove them from the maps#
#' @param Plant_Info Dataset with Plant Information#
#'#
#' @export#
saveConfirmedDeadMissing <- function(Plant_Info) {#
	Plant_Info_Dead <- filter(#
		Plant_Info, #
		ConfirmedDead=="1" | ConfirmedMissing=="1"#
	)#
	Plant_Info_Dead %<>% arrange(Tag_Number, PlantID)#
}
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
#' Process Plant Survey Data#
#'#
#' @description Steps:#
#' \itemize{#
#'  \item Fix column names#
#'  \item format dates#
#'  \item format PlantIDs#
#'  \item format convert "999" values to NA#
#'  \item format change "yes"/"no" values of the insect survey, missing, and dead columns to 0/1#
#'  \item format numeric columns#
#'  \item add total segment column#
#'  \item add fruit count column#
#'  \item add fruit/flower count column#
#'  \item check for observations of 0 pads, 0 height, or 0 width; if there are observations, stop#
#' 	}#
#' Column Names:#
#' \itemize{#
#'  \item PlantMeasureID Record number if Microsoft Access database#
#'  \item First_Observer_Initials Initials of primary observer (should always be KS, for Kristen Sauby)#
#'  \item Second_Observer_Initials Initials of secondary observer; CJP - Cory Penca; YP - Yani Paulay; KS - Kristen Sauby; JW: Juliana Welch; CW: Cedric Worman; AP: Adam Payton#
#'  \item Date Date#
#'  \item PlantID Unique number for the individual plant#
#'  \item Plant_collected Were plant samples collected?#
#'  \item Time#
#'  \item PlantPictures identifying numbers of photos taken#
#'  \item PlantPictures_Direction direction that the photo(s) was(were) taken#
#
#'  \item CA_t Presence/absence (1/0) of Cactoblastis cactorum#
#'  \item CACA_collected Were samples of Cactoblastis cactorum collected?#
#'  \item CACA_quantity Number of Cactoblastis cactorum samples collected#
#
#'  \item ME_t Presence/absence (1/0) of Melitara prodenialis#
#'  \item MEPR_collected Were samples of Melitara prodenialis collected?#
#'  \item MEPR_quantity Number of Melitara prodenialis samples collected#
#
#'  \item CH_t Presence/absence (1/0) of Chelinidea vittiger#
#'  \item CHVI_collected Were samples of Chelinidea vittiger collected?#
#'  \item CHVI_quantity Number of Chelinidea vittiger samples collected#
#
#'  \item DA_t Presence/absence (1/0) of Dactylopius species#
#'  \item DACT_collected Were samples of Dactylopius species collected?#
#'  \item DACT_quantity Number of Dactylopius species samples collected#
#
#'  \item Unknown_Moth_t Presence/absence (1/0) of unknown moth#
#'  \item UnknownMoth_collected Were samples of unknown moth collected?#
#'  \item UnknownMoth_quantity Number of unknown moth samples collected#
#
#'  \item Old_Moth_Evidence_t Evidence of past moth infestation#
#'  \item Old_Moth_Evidence_recent Whether evidence of past moth infestation appears recent or old#
#
#'  \item Fungus Presence/absence (1/0) of plant fungal infection#
#'  \item Gerstaeckeria Presence/absence (1/0) of Gerstaeckeria#
#'  \item Plant_Segments_total Number of segments#
#'  \item Plant_Segments_w_leaves New, green segments with leaves#
#'  \item Plant_Segments_wo_leaves Green segments without leaves#
#'  \item Plant_Segments_woody number of woody segments/trunks; these segments are entirely brown on the outside      #
#'  \item Height_t maximum height in cm#
#'  \item Width_t maximum width in cm#
#'  \item Perpen_Width width, perpendicular to max width, in cm#
#'  \item Num_FlowerBuds Number of flower buds#
#'  \item Num_Fruit_red Number of red fruit#
#'  \item Num_Fruit_green Number of green fruit#
#'  \item Num_Flowers Number of flowers#
#'  \item Num_Fruit use this when number is recorded but distinction by color is not made#
#'  \item Pollinators#
#'  \item Spiders#
#'  \item Ants#
#'  \item Other_collected_quantity#
#'  \item Plant_Notes#
#'  \item Insect_Notes        #
#'  \item Other_Notes#
#'  \item Dead Whether the plant is observed to be dead; 0 or 1#
#'  \item Missing#
#'  \item OutsideOfPlot "Yes" if plant is no longer in plot#
#'  \item PlotPlantID Unique number for the individual plant; if a plant is counted in multiple plots, a letter is appended to the plant ID here (e.g., 9606a) and then removed for analysis#
#'  \item Size_t The sum of Plant_Segments_total, Plant_Segments_w_leaves, Plant_Segments_wo_leaves, and Plant_Segments_woody#
#
#'  \item Fruit_t The sum of Num_Fruit_red, Num_Fruit_green, and Num_Fruit#
#'  \item Fruit_Flowers_t The sum of Num_FlowerBuds, Num_Flowers, Num_Fruit_red, Num_Fruit_green, and Num_Fruit#
#' 	}#
#'#
#' @export#
#
processPlantSurveys <- function(Plant_Surveys, Plant_Info) {#
	# ----------------------------------------------------------- ERROR MESSAGES#
	# check first duplicate data entries#
	dups <- Plant_Surveys %>% #
		group_by(PlantID, DateSurveyed) %>%#
		summarise(n.obs = length(Plant_collected)) %>%#
		filter(n.obs > 1)#
	if (dim(dups)[1] > 0) {stop("Duplicates observations for a PlantID, Date combination are present in the dataset.")}#
	# check for PlantID = NA#
	dups <- Plant_Surveys %>% filter(is.na(PlantID))#
	if (dim(dups)[1] > 0) {stop("NA values for PlantID.")}#
	# are all Plant IDs from the Plant Surveys data in Plant Info?#
	dups <- filter(Plant_Surveys, !(PlantID %in% Plant_Info$PlantID))[, 4:5]#
	if (dim(#
		filter(Plant_Surveys, !(PlantID %in% Plant_Info$PlantID))[, 4:5]#
	)[1] > 0) {#
		warning(paste(#
			"These Plant IDs from Plant Surveys are not in Plant Info:",#
			paste(unique(dups$PlantID), collapse=", ")#
		))#
	}#
	# Duplicates in Plant Surveys#
	# duplicates for 1795 on 2013-02-10 are okay - I accidentally surveyed the plot twice; keep it for detectability#
	dups = Plant_Surveys %>%#
		group_by(PlantID, DateSurveyed) %>%#
		summarise(Nrecords = length(First_Observer_Initials)) %>%#
		as.data.frame %>% #
		arrange(PlantID) %>%#
		filter(Nrecords > 1)#
	if (dim(dups)[1] > 0) {#
		warning(paste(#
			"Duplicate surveys on the same date for the following plants:",#
			paste(unique(dups$PlantID), collapse=", ")#
		))#
	}#
	# check for size = 0#
	dups <- Plant_Surveys %>% filter(Max_Height==0)#
		if (dim(dups)[1] > 0) {stop("Max. height values = 0.")}#
	dups <- Plant_Surveys %>% filter(Max_Width==0)#
		if (dim(dups)[1] > 0) {stop("Max. width values = 0.")}#
	dups <- Plant_Surveys %>% filter(Perpen_Width==0)#
		if (dim(dups)[1] > 0) {stop("Perpendicular width values = 0.")}#
	# ------------------------------------------------------------- CHANGE NAMES#
	# remame size and height#
	Plant_Surveys %<>%	as.data.table %>%#
		setnames("Max_Height", 				"Height_t") %>%#
		setnames("Max_Width", 				"Width_t") %>%#
		setnames("CACA_Larvae", 			"CA_t") %>%#
		setnames("MEPR_Larvae", 			"ME_t") %>%#
		setnames("CHVI_Evidence", 			"CH_t") %>%#
		setnames("DACT_Evidence", 			"DA_t") %>%#
		setnames("UnknownMoth_Evidence", 	"Unknown_Moth_t") %>%#
		setnames("Old_Moth_Evidence", 		"Old_Moth_Evidence_t") %>%#
		setnames("DateSurveyed", 			"Date") %>%#
		setnames("Gerstaeckeria", 			"Gerstaeckeria_t") %>%#
		as.data.frame#
	# formatting/preparation necessary for prepping Demographic Plant Info#
	Plant_Surveys$Date %<>% Format_Date_Function#
	Plant_Surveys %<>% arrange(Date)#
	Plant_Surveys %<>% Format_PlantIDs_Function#
	# ------------------------------------------------ CONVERT ALL "999s" to NAs#
	Plant_Surveys[,c(#
		"Plant_Segments_total", #
		"Plant_Segments_w_leaves",#
		"Plant_Segments_wo_leaves",#
		"Plant_Segments_woody",#
		"Perpen_Width",#
		"Width_t",#
		"Height_t",#
		"Num_FlowerBuds",#
		"Num_Fruit_red",#
		"Num_Fruit_green",#
		"Num_Flowers",#
		"Num_Fruit")] %<>% #
		apply(2, NA_Function#
	)#
	# ------------------- INSECT SURVEYS, MISSING, DEAD - CHANGE YES, NO to 0, 1#
	Plant_Surveys[,c(#
		"CA_t",#
		"ME_t",#
		"CH_t",#
		"DA_t",#
		"Unknown_Moth_t",#
		"Gerstaeckeria_t",#
		"Old_Moth_Evidence_t",#
		"Dead",#
		"Missing")] %<>% #
		apply(2, Yes_Function#
	)#
	Plant_Surveys[,c(#
		"CA_t",#
		"ME_t",#
		"CH_t",#
		"DA_t",#
		"Unknown_Moth_t",#
		"Gerstaeckeria_t",#
		"Old_Moth_Evidence_t",#
		"Dead",#
		"Missing")] %<>%#
		apply(2, No_Function#
	)#
	Plant_Surveys[,c(#
		"CA_t",#
		"ME_t",#
		"CH_t",#
		"DA_t",#
		"Unknown_Moth_t",#
		"Gerstaeckeria_t",#
		"Old_Moth_Evidence_t",#
		"Dead",#
		"Missing")] %<>% #
		apply(2, NA_Function#
	)#
	# ------------------------------------------------------------- MAKE NUMERIC#
	Plant_Surveys[,c(#
		"CA_t",#
		"ME_t",#
		"CH_t",#
		"DA_t",#
		"Unknown_Moth_t",#
		"Gerstaeckeria_t",#
		"Old_Moth_Evidence_t",#
		"Plant_Segments_total",#
		"Plant_Segments_w_leaves",#
		"Plant_Segments_wo_leaves",#
		"Plant_Segments_woody",#
		"Height_t",#
		"Width_t",#
		"Perpen_Width",#
		"Num_FlowerBuds",#
		"Num_Fruit_red",#
		"Num_Fruit_green",#
		"Num_Flowers",#
		"Num_Fruit",#
		"Dead",#
		"Missing")] %<>% #
		apply(2, as.numeric#
	)#
	# ------------------------------------------------- ADD TOTAL SEGMENT COLUMN#
	# do this so that plants that have no segments recorded (all NAs) have a total segment count = NA#
	# for those plants that have fewer than four NAs (at least one segment column has a number), sum the segments#
	Plant_Surveys$Size_t <- Plant_Surveys %>%#
		dplyr::select(#
			Plant_Segments_total,#
			Plant_Segments_w_leaves,#
			Plant_Segments_wo_leaves,#
			Plant_Segments_woody#
		) %>%#
		apply(1, mysum)#
	Plant_Surveys$Size_t %<>% Zero_is_NA_Function#
	# --------------------------------------------------------- ADD FRUIT COLUMN#
	Plant_Surveys$Fruit_t <- Plant_Surveys %>%#
		dplyr::select(#
			Num_Fruit_red,#
			Num_Fruit_green,#
			Num_Fruit#
		) %>%#
		apply(1, mysum)#
	Plant_Surveys$Fruit_Flowers_t <- Plant_Surveys %>%#
		dplyr::select(#
			Num_FlowerBuds,#
			Num_Flowers,#
			Num_Fruit_red,#
			Num_Fruit_green,#
			Num_Fruit#
		) %>%#
		apply(1, mysum)#
	# ----------------------------------------------------------- ERROR MESSAGES#
	dups <- Plant_Surveys %>% filter(Size_t==0)#
		if (dim(dups)[1] > 0) {stop("Size values = 0.")}#
	# ------------------------------------------------------------------------ ##
	return(Plant_Surveys)#
}#
#
#' Process Original Plant Survey Data#
#'#
#' @description I collected this data in December 2012, then gave the plants new Plant IDs. This data cannot be used for the demography study but can be used to determine plot occupancy.#
#' Steps:#
#' \itemize{#
#'  \item Fix column names#
#'  \item format dates#
#'  \item format PlantIDs#
#'  \item format convert "999" values to NA#
#'  \item format change "yes"/"no" values of the insect survey, missing, and dead columns to 0/1#
#'  \item format numeric columns#
#'  \item check for observations of 0 pads, 0 height, or 0 width; if there are observations, stop#
#' 	}#
#
#' 	}#
#'#
#' @export#
#
processOriginalPlantData <- function(Original_Plant_Data) {#
	# ------------------------------------------------------------- CHANGE NAMES#
	# remame size and height#
	Original_Plant_Data %<>% as.data.table %>%#
		setnames("Max_Height", 				"Height_t") %>%#
		setnames("Max_Width", 				"Width_t") %>%#
		setnames("CACA_Larvae", 			"CA_t") %>%#
		setnames("MEPR_Larvae", 			"ME_t") %>%#
		setnames("CHVI_Evidence", 			"CH_t") %>%#
		setnames("DACT_Evidence", 			"DA_t") %>%#
		setnames("UnknownMoth_Evidence", 	"Unknown_Moth_t") %>%#
		setnames("Old_Moth_Evidence", 		"Old_Moth_Evidence_t") %>%#
		as.data.frame#
	# formatting/preparation necessary for prepping Demographic Plant Info#
	Original_Plant_Data$Date %<>% Format_Date_Function#
	Original_Plant_Data %<>% arrange(Date)#
	# ------------------------------------------------ CONVERT ALL "999s" to NAs#
	Original_Plant_Data[,c(#
		"Plant_Segments_w_leaves",#
		"Plant_Segments_wo_Leaves",#
		"Perpen_Width",#
		"Width_t",#
		"Height_t",#
		"Num_FlowerBuds",#
		"Num_Fruit_red",#
		"Num_Fruit_green",#
		"Num_Flowers",#
		"Num_Fruit")] %<>% #
		apply(2, NA_Function#
	)#
	# ------------------- INSECT SURVEYS, MISSING, DEAD - CHANGE YES, NO to 0, 1#
	Original_Plant_Data[,c(#
		"CA_t",#
		"ME_t",#
		"CH_t",#
		"DA_t",#
		"Unknown_Moth_t",#
		"Old_Moth_Evidence_t")] %<>% #
		apply(2, Yes_Function#
	)#
	Original_Plant_Data[,c(#
		"CA_t",#
		"ME_t",#
		"CH_t",#
		"DA_t",#
		"Unknown_Moth_t",#
		"Old_Moth_Evidence_t")] %<>%#
		apply(2, No_Function#
	)#
	Original_Plant_Data[,c(#
		"CA_t",#
		"ME_t",#
		"CH_t",#
		"DA_t",#
		"Unknown_Moth_t",#
		"Old_Moth_Evidence_t")] %<>% #
		apply(2, NA_Function#
	)#
	# ------------------------------------------------------------- MAKE NUMERIC#
	Original_Plant_Data[,c(#
		"CA_t",#
		"ME_t",#
		"CH_t",#
		"DA_t",#
		"Unknown_Moth_t",#
		"Old_Moth_Evidence_t",#
		"Plant_Segments_w_leaves",#
		"Plant_Segments_wo_Leaves",#
		"Height_t",#
		"Width_t",#
		"Perpen_Width",#
		"Num_FlowerBuds",#
		"Num_Fruit_red",#
		"Num_Fruit_green",#
		"Num_Flowers",#
		"Num_Fruit")] %<>% #
		apply(2, as.numeric#
	)#
	# ----------------------------------------------------------- ERROR MESSAGES#
	# There should never be observations of 0 pads, 0 height, or 0 width#
	# replace 0 with NA#
	dups <- Original_Plant_Data %>% filter(Height_t==0)#
	if (dim(dups)[1] > 0) {stop("Values for Height_t equal 0.")}#
#
	dups <- Original_Plant_Data %>% filter(Width_t==0)#
	if (dim(dups)[1] > 0) {stop("Values for Width_t equal 0.")}#
#
	dups <- Original_Plant_Data %>% filter(Perpen_Width==0)#
	if (dim(dups)[1] > 0) {stop("Values for Perpen_Width equal 0.")}#
	return(Original_Plant_Data)#
}#
#' Merge Plant Info and Plant Surveys data files#
#'#
#' @description Add Island, Cluster, and Host Species information to the Plant_Surveys dataset.#
#' @param Plant_Surveys Plant Survey Dataset#
#' @param Plant_Info  Plant Information Dataset#
#'#
#' @export#
#
mergePlantSurveysPlantInfo <- function(Plant_Surveys, Plant_Info) {#
	Plant_Surveys <- Plant_Info %>%#
		dplyr::select(#
			ClusterID, #
			InDemographicStudy, #
			PlotPlantID, #
			Tag_Number, #
			Island, #
			Cluster2, #
			Network, #
			Species, #
			InBigPlantStudy, #
			N.PlotPlantIDs, #
			Easting, #
			Northing,#
			RecruitmentMode#
		) %>%#
		merge(Plant_Surveys, by = "PlotPlantID")#
	return(Plant_Surveys)#
}#
#
#' Add Sampling Period Variable#
#'#
#' @param Plant_Surveys Plant Survey Dataset#
#'#
#' @export#
#
addSamplingPeriods <- function(Plant_Surveys) {#
	Plant_Surveys$DemographicSurvey <- "NA"#
	Plant_Surveys %<>% #
		group_by(Date) %>% #
		mutate(#
			# SURVEY 0#
			DemographicSurvey = replace(DemographicSurvey, #
				which(Date < "2013-05-14"), "0"),#
			# SURVEY 1 - SPRING/SUMMER 2013#
			DemographicSurvey = replace(DemographicSurvey, #
				which(Date >= "2013-05-14" & Date <= "2013-08-06"), "1"),#
			# SURVEY 2 - FALL/WINTER 2013/2014#
			DemographicSurvey = replace(DemographicSurvey, #
				which(Date >= "2013-12-13" & Date <= "2014-01-28"), "2"),#
			# SURVEY 3 - SPRING/SUMMER 2014#
			DemographicSurvey = replace(DemographicSurvey, #
				which(Date >= "2014-05-06" & Date <= "2014-09-24"), "3"),#
			# SURVEY 4 - WINTER 2015#
			DemographicSurvey = replace(DemographicSurvey, #
				which(Date >= "2015-01-08" & Date <= "2015-02-21"), "4"),#
			# SURVEY 5 - SPRING/SUMMER 2015#
			DemographicSurvey = replace(DemographicSurvey, #
				which(Date >= "2015-05-01"), "5"))#
	return(Plant_Surveys)#
}#
#
#' Add Sampling Year Variable#
#'#
#' @param Plant_Surveys Plant Survey Dataset#
#'#
#' @export#
#
addSamplingYear <- function(Plant_Surveys) {#
	Plant_Surveys$SamplingYear <- NA#
	Plant_Surveys %<>% #
		group_by(Date) %>% #
		mutate(#
			SamplingYear = replace(#
				SamplingYear, #
				which(Date >= "2012-12-02" & Date < "2013-05-01"), #
				2012#
			),#
			SamplingYear = replace(#
				SamplingYear, #
				which(Date >= "2013-05-01" & Date < "2014-05-01"), #
				2013#
			),#
			SamplingYear = replace(#
				SamplingYear, #
				which(Date >= "2014-05-01" & Date < "2015-05-01"), #
				2014#
			),#
			SamplingYear = replace(#
				SamplingYear, #
				which(Date >= "2015-05-01"), #
				2015#
			)#
		)#
	return(Plant_Surveys)#
}#
#
#' Determine Fruit and Flower Presence#
#'#
#' @description Create separate variables indicating whether fruit and fruit and flowers were present.#
#' @param Plant_Surveys Plant Survey Dataset#
#'#
#' @export#
#
calculateFruitPresence <- function(Plant_Surveys) {#
	Plant_Surveys %>% #
		mutate(#
			FruitPres_t 		= ifelse(Fruit_t > 0, 1, 0),#
			FruitFlowerPres_t 	= ifelse(Fruit_Flowers_t > 0, 1, 0)#
		) %>%#
		as.data.table %>%#
		# add NAs#
		.[is.na(Fruit_t), FruitPres_t := NA] %>%#
		.[is.na(Fruit_Flowers_t), FruitPres_t := NA] %>%#
		as.data.frame#
}#
#
#' Calculate Plant Volume#
#'#
#' @description Calculate plant volume as a cone, cylinder, and elliptic cylinder.#
#' @param Plant_Surveys Plant_Surveys Plant Survey Dataset#
#'#
#' @export#
#
calculatePlantVolume <- function(Plant_Surveys) {#
	Plant_Surveys %>% #
		mutate(#
			Cone_t 				= pi * (((Width_t + Perpen_Width)/4)^2) * #
									Height_t / 3,#
			Cylinder_t 			= pi * ((Perpen_Width/2)^2) * Width_t,#
			Elliptic_Cylinder_t = pi * Height_t/2 * Perpen_Width/2 * Width_t#
		)#
}#
#
#' Determine if a survey was complete#
#'#
#' @param x Plant_Surveys Plant Survey Dataset#
#'#
#' @export#
#
Complete_Surveys_function <- function(x){#
	ifelse(rowSums(is.na(x))==0, 1, 0)#
	return(x)#
}#
#
#' Determine whether a survey was complete#
#'#
#' @description Determine whether all data was collected during a survey.#
#' Determine complete surveys for:#
#' \itemize{#
#'  \item insect surveys#
#'  \item plant size#
#'  \item size measurements (cm)#
#'  \item fruit, flowers, and flower buds#
#'  \item all data#
#' 	}#
#' @param Plant_Surveys Plant Survey Dataset#
#'#
#' @export#
#
determineCompleteSurveys <- function(Plant_Surveys) {#
	Plant_Surveys$complete_insect_surveys <- ifelse(rowSums(is.na(#
		Plant_Surveys[, #
		c(#
			"CA_t",#
			"ME_t",#
			"Unknown_Moth_t",#
			"Old_Moth_Evidence_t"#
		)]))==0, 1, 0#
	)#
	Plant_Surveys$complete_segments_surveys <- ifelse(rowSums(is.na(#
		Plant_Surveys[, #
		c(#
			"Plant_Segments_w_leaves",#
			"Plant_Segments_wo_leaves",#
			"Plant_Segments_woody"#
		)]))==0, 1, 0#
	)#
	Plant_Surveys$complete_size_surveys <- ifelse(rowSums(is.na(#
		Plant_Surveys[, #
		c(#
			"Height_t",#
			"Width_t",#
			"Perpen_Width"#
		)]))==0, 1, 0#
	)#
	Plant_Surveys$complete_fruit_surveys <- ifelse(rowSums(is.na(#
		Plant_Surveys[, #
		c(#
			"Num_FlowerBuds",#
			"Num_Fruit_red",#
			"Num_Fruit_green",#
			"Num_Flowers"#
		)]))==0, 1, 0#
	)#
	Plant_Surveys$complete_surveys <- ifelse(rowSums(is.na(#
		Plant_Surveys[, #
		c(#
		# insects#
		"CA_t",#
		"ME_t",#
		"Unknown_Moth_t",#
		"Old_Moth_Evidence_t",#
		# number of segments#
		"Size_t",#
		"Plant_Segments_w_leaves",#
		"Plant_Segments_wo_leaves",#
		"Plant_Segments_woody",#
		# size in cm#
		"Height_t",#
		"Width_t",#
		"Perpen_Width",#
		# flowers and fruit#
		"Fruit_t" #
		)]))==0, 1, 0#
	)#
	return(Plant_Surveys)#
}#
#
#' Determine if an insect species was ever detected during the study period#
#'#
#' @description Determine if an insect species was ever detected during the study period.#
#' @param Plant_Surveys Plant Survey Dataset#
#'#
#' @export#
#
determineInsectPresenceDuringStudy <- function(Plant_Surveys) {#
	Plant_Surveys.present <- Plant_Surveys %>%#
		group_by(PlantID) %>%#
		summarise(#
			CAPresent = ifelse(sum(CA_t, na.rm=T) > 0, 1, 0),#
			MEPresent = ifelse(sum(ME_t, na.rm=T) > 0, 1, 0)#
			) %>%#
		as.data.frame()#
	Plant_Surveys %>% merge(Plant_Surveys.present, by="PlantID")#
}#
#
#' Rename Species levels#
#'#
#' @param Plant_Surveys Plant Survey Dataset#
#'#
#' @export#
#
renameSpecies <- function(Plant_Surveys) {#
	Plant_Surveys %>% #
		as.data.table %>%#
		.[Species == "pusilla", Species := "Opuntia pusilla"] %>%#
		.[Species == "stricta", Species := "Opuntia stricta"] %>%#
		as.data.frame#
}#
#
#' Rename Convert 1/0 to Yes/No#
#'#
#' @param x Vector of 0/1 data#
#'#
#' @export#
#
Yes_No_from_1_0_Function <- function(x){#
	x[x > 0] <- "Yes"#
	x[x == 0] <- "No"#
	return(x)#
}#
#
#' Make Insect Factor Variables#
#'#
#' @description Make new insect variables with "yes"/"no" values instead of 0/1.#
#' @param Plant_Surveys Plant Survey Dataset#
#'#
#' @export#
#
createInsectFactorVariables <- function(Plant_Surveys) {#
	Plant_Surveys$C_cactorum 	<- Plant_Surveys$CA_t#
	Plant_Surveys$M_prodenialis <- Plant_Surveys$ME_t#
	Plant_Surveys[,c(#
		"C_cactorum",#
		"M_prodenialis")] %<>%#
		apply(., 2, Yes_No_from_1_0_Function) %>%#
		apply(., 2, as.factor#
	)#
	return(Plant_Surveys)#
}#
#
#' Format as Factors#
#'#
#' @description Format variables as factors.#
#' @param Plant_Surveys Plant Survey Dataset#
#'#
#' @export#
#
formatasFactors <- function(x) {#
	factors <- c("ClusterID", "Network", "Island", "Species", #
		"DemographicSurvey", "Year", "Season", "C_cactorum", #
		"M_prodenialis")#
	for (i in 1:length(factors)) {#
		if (factors[i] %in% names(x)) {#
			x[, factors[i]] %<>% as.factor#
		}#
	}#
	return(x)#
}#
#
#' Process Plant Survey Data#
#'#
#' @description Steps:#
#' \itemize{#
#'  \item add column, "DemographicSurvey"#
#'	\itemize{#
#'		\item survey 1 - spring/summer 2013#
#'		\item survey 2 - fall/winter 2013/2014#
#'		\item survey 3 - spring/summer 2014#
#'		\item survey 4 - winter 2015#
#'		\item survey 5 - spring/summer 2015#
#'	}#
#'  \item addSamplingYear#
#'	\itemize{#
#'		\item 2012 - Date >= "2012-12-02" & Date < "2013-05-01"#
#'		\item 2013 - Date >= "2013-05-01" & Date < "2014-05-01"#
#'		\item 2014 - Date >= "2014-05-01" & Date < "2015-05-01"#
#'		\item 2015 - Date >= "2015-05-01"#
#'	}#
#' }#
#'#
#' @export#
#
processPlantSurveysafterMergewPlantInfo <- function(Plant_Surveys) {#
	Plant_Surveys %>%#
		filter(InBigPlantStudy!="yes" & InBigPlantStudy!="Yes") %>%#
		addSamplingPeriods %>%#
		addSamplingYear %>%#
		as.data.frame#
}#
#' Process Plant Survey Data, per plant#
#'#
#' @description Steps:#
#' \itemize{#
#'  	\item merge records for the same plant from multiple plots; the data to be merged must have been collected on the same day.#
#'  	\item Create separate variables indicating whether fruit and fruit and flowers were present#
#'  	\item Calculate plant volume as a cone, cylinder, and elliptic cylinder#
#'  	\item Determine if an insect species was ever detected during the study period#
#'  	\item Rename species levels ("Opuntia stricta" instead of "stricta" and "Opuntia pusilla" instead of "pusilla")#
#' 	 	\item Make new insect variables with "yes"/"no" values instead of 0/1, named "C_cactorum" and "M_prodenialis"#
#'  	\item format the variables "ClusterID", "Network", "Island", "Species", "DemographicSurvey", "SamplingYear", "Year", "Season", "C_cactorum", "M_prodenialis" as factors#
#' 	}#
#'#
#' @export#
processSurveysMergedbyPlant <- function(Plant_Surveys) {#
	Plant_Surveys %>%#
		mergePlantRecordsfromMultiplePlots %>%#
		calculateFruitPresence %>%#
		calculatePlantVolume %>%#
		determineInsectPresenceDuringStudy %>%#
		renameSpecies %>%#
		createInsectFactorVariables %>%#
		formatasFactors#
}
head(Plant_Info)
?setnames
?set.names
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
Plant_Info %<>% setnames("ReproductiveMode", "RecruitmentMode")
str(Plant_Info)
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
Plant_Info %<>% setnames("ReproductiveMode", "RecruitmentMode")#
	Plant_Info %<>% mutate(#
		RecruitmentMode = replace(#
			RecruitmentMode,#
			which(RecruitmentMode=="WoodyTrunk"),#
			"Unknown"#
		),#
		RecruitmentMode = replace(#
			RecruitmentMode,#
			which(is.na(RecruitmentMode)),#
			"Unknown"#
		)#
	)
unique(Plant_Info$RecruitmentMode)
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
dups <- Plant_Info[which(Plant_Info$HostSpecies=="Not Recorded"), ]#
	if (dim(dups)[1] > 0) {#
		warning(paste(#
			"Species identity not recorded for plantID: ",#
			paste(dups$PlantID, collapse=", ")#
		))#
	}#
	# are any plant IDs in Plant Info not in the surveys?#
	dups <- Plant_Info %>%#
		filter(!(PlantID %in% Plant_Surveys$PlantID)) %>% #
		.[,2:5]#
	if (dim(dups)[1] > 0) {#
		warning(paste(#
			"Some plant IDs are not in Plant Surveys data: ",#
			paste(dups$PlantID, collapse=", ")#
		))#
	}#
	# make sure that there is plot info for each tag number in plant info#
	dups <- Plant_Info %>%#
		filter(!(Tag_Number %in% Plot_Info$Tag_Number))#
	if (dim(dups)[1] > 0) {#
		warning(paste(#
			"Plants (",#
			paste(unique(dups$PlantID), collapse=", "),#
			") are listed as being in plots not in Plot Info data (",#
			paste(unique(dups$Tag_Number), collapse=", "),#
			")"#
		))#
	}
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
Plant_Info <- Plot_Info %>%#
		select(#
			Island, #
			Tag_Number, #
			Cluster, #
			Cluster2, #
			Network, #
			Sampling, #
			SurveyOrder#
		) %>%#
		merge(Plant_Info, by = "Tag_Number", all.y=TRUE) %>%#
		as.data.table %>%#
		setnames("HostSpecies", "Species") %>%#
		as.data.frame#
	#---------------------------------------------------------- FORMAT PLANT IDs#
	Plant_Info %<>% Format_PlantIDs_Function#
	#---------------------- CALCULATE AND ADD NUMBER OF PlotPlantIDs PER PlantID#
	Plant_Info <- Plant_Info %>%#
		group_by(PlantID) %>%#
		summarise(#
			N.PlotPlantIDs = length(unique(PlotPlantID))#
		) %>%#
		merge(Plant_Info, by="PlantID")#
	#-------------------------- ADD FIRST and LAST DATE PlotPlantID WAS SURVEYED#
	# particularly relevant for plants that grew into plots over the course of the study (and thus the number of PlotPlantIDs for a given PlantID changed over time)#
	# also helps calculate the number of days a plant was known to have survived#
	Plant_Info <- Plant_Surveys %>%#
		group_by(PlotPlantID) %>%#
		summarise(#
			First.Survey.Date = min(Date),#
			Last.Survey.Date = max(Date)#
		) %>%#
		merge(Plant_Info, ., by="PlotPlantID", all.y=TRUE)#
	# ----------------------------------------------------------- PLANT SURVIVAL#
	# indicate whether plant was previously listed as dead or missing#
	# group based on plant ID number#
	Plant_Info <- Plant_Surveys %>% group_by(PlotPlantID) %>%#
		summarise( #
		# a plant has been obvserved to be dead/missing if at least 1 observation (> 0)#
		DeadObservation 		= Dead_Missing_Function(Dead),#
		MissingObservation 		= Dead_Missing_Function(Missing),#
		# a plant is confirmed dead/missing if at least 2 observations (> 1)#
		ConfirmedDead 			= Confirmed_Dead_Missing_Function(Dead),#
		ConfirmedMissing 		= Confirmed_Dead_Missing_Function(Missing),#
		ConfirmedDeadMissing = Confirmed_Dead_Missing_Function(c(Dead,Missing))	#
	) %>%#
	merge(Plant_Info, ., by="PlotPlantID")#
	# for those first marked dead/missing during the last survey, assume they are confirmed dead/missing#
	Plant_Info %<>% #
		group_by(PlotPlantID) %>%#
		mutate(#
			ConfirmedDeadMissing = replace(#
				ConfirmedDeadMissing,#
				which(Last.Survey.Date >= "2015-05-01"),#
				max(#
					DeadObservation,#
					MissingObservation,#
					ConfirmedDead,#
					ConfirmedMissing,#
					ConfirmedDeadMissing,#
					na.rm=T#
				)#
			)#
		)#
		# FIX LAST SURVEY DATE FOR THOSE THAT AREN'T DEAD#
	#---------------- ADD FIRST DATE PlotPlantID WAS RECORDED AS DEAD OR MISSING#
	# oldest date PlotPlantID was recorded as dead#
	temp_dead_obs <- filter(Plant_Surveys, Dead=="1") %>%#
		group_by(PlotPlantID) %>%#
		summarise(FirstDeadObservation = min(Date))#
	# oldest date PlotPlantID was recorded as missing#
	temp_missing_obs <- filter(Plant_Surveys, Missing=="1") %>%#
		group_by(PlotPlantID) %>%#
		summarise(FirstMissingObservation = min(Date))#
	# oldest date PlotPlantID was recorded as missing or dead#
	temp_dead_missing <- merge(#
		temp_dead_obs, #
		temp_missing_obs, #
		by="PlotPlantID", #
		all=T#
	) #
	temp_dead_missing$FirstDeadMissingObservation = #
		select(#
			temp_dead_missing, #
			FirstDeadObservation,#
			FirstMissingObservation#
		) %>% #
		apply(., 1, min, na.rm=T) %>%#
		as.Date#
	# merge with Plant_Info#
	Plant_Info <- merge(Plant_Info, temp_dead_missing, by="PlotPlantID", all=T)#
	# fix last survey date#
	#	for each PlotPlantID, keep FirstDeadMissingObservation#
	Plant_Info %<>% #
		group_by(PlotPlantID) %>%#
		mutate(#
			PlantID.Last.Alive = replace(#
				Last.Survey.Date,#
				which(ConfirmedDeadMissing==1),#
				FirstDeadMissingObservation#
			)#
		)#
		# then find latest date at which a plant was surveyed (regardless of whether it had died or not)#
		Plant_Info %<>% group_by(PlantID) %>%#
		mutate(#
			PlantID.Last.Alive = max(Last.Survey.Date, na.rm=T)#
		)#
		# find the earliest date that the plant was surveyed#
		Plant_Info %<>% group_by(PlantID) %>%#
		mutate(#
			PlantID.First.Alive = min(First.Survey.Date, na.rm=T)#
		)#
		# STANDARDIZE PARENT, REPRODUCTIVEMODE for PLANTIDs#
#
	# ---------------------- CALCULATE HOW MANY DAYS PLANT WAS KNOWN TO BE ALIVE#
	Plant_Info %<>% #
		group_by(PlantID) %>%#
		mutate(DaysAlive = PlantID.Last.Alive - PlantID.First.Alive)#
	# -------------------------------------------------- CLEANUP FOR CONSISTENCY#
	Plant_Info[,c(#
		"Quadrant",#
		"ReproductiveMode",#
		"Parent")] %<>%#
		apply(., 2, as.character#
	)#
	Plant_Info[,c(#
		"Quadrant",#
		"ReproductiveMode",#
		"Parent")] %<>%#
		apply(., 2, NA_Function#
	)#
	Plant_Info[,c(#
		"Quadrant",#
		"ReproductiveMode",#
		"Parent")] %<>%#
		apply(., 2, as.factor#
	)#
	# ------------------------------------------------- modify Reproductive Mode#
	Plant_Info$ReproductiveMode %<>% WoodyTrunk_Function()#
	Plant_Info %<>% setnames("ReproductiveMode", "RecruitmentMode")#
	Plant_Info %<>% mutate(#
		RecruitmentMode = replace(#
			RecruitmentMode,#
			which(RecruitmentMode=="WoodyTrunk"),#
			"Unknown"#
		),#
		RecruitmentMode = replace(#
			RecruitmentMode,#
			which(is.na(RecruitmentMode)),#
			"Unknown"#
		)#
	)#
	# ------------------------------------------------- ADD InDemomographicStudy#
	# save all Plant_Info#
	Plant_Info_All <- Plant_Info#
	Plant_Info %<>% merge(#
		., #
		ClustersInDemographicStudy, #
		by = "Cluster",#
		all=TRUE#
	) #
	# ------------------------------------------------------------ ADD ClusterID#
	#	do this because some clusters share plots
setwd('/Users/KSauby/Documents/Projects')
setwd("./dataproc")#
#setwd("./modresproc")#
#devtools::test()#
devtools::document()#
devtools::install()
getwd()
setwd("..")
getwd()
devtools::create("GTMNERRproc")
getwd()
devtools::create("Panhandleproc")
setwd('/Users/KSauby/Documents/Projects')
setwd("./GTMNERRproc")#
#setwd("./dataproc")#
#setwd("./modresproc")#
#devtools::test()#
devtools::document()#
devtools::install()
setwd('/Users/KSauby/Documents/Projects')
setwd("./Panhandleproc")#
#setwd("./GTMNERRproc")#
#setwd("./dataproc")#
#setwd("./modresproc")#
#devtools::test()#
devtools::document()#
devtools::install()
setwd('/Users/KSauby/Documents/Projects')
setwd("./dataproc")#
#setwd("./modresproc")#
#devtools::test()#
devtools::document()#
devtools::install()
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
# ---------------------------------------------------------- Shorten names#
Plot_Info <- OccupancySRSWOR.Plot.Surveys.Info#
Plot_Surveys <- OccupancySRSWOR.Plot.Surveys#
Plant_Surveys <- Demographic.Plant.Surveys#
Plant_Info <- Demographic.Plant.Info#
Plant_Surveys_All <- Demographic.Plant.Surveys#
Plant_Info_All <- Demographic.Plant.Info#
D_Plot_Surveys <- Demographic.Plot.Surveys#
Original_Plant_Data <- Original.Demographic.Plant.Data#
Seed_Abundance <- Seed.Abundance#
Seed_Abundance_Surveys <- Seed.Abundance.Surveys#
GIS_data_updated <- GIS.data.updated
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
# --------------- Demographic Plot Surveys ---------------------------------- ##
D_Plot_Surveys$Date %<>% as.Date("%m/%d/%Y")#
# --------------- Demographic Plant Surveys --------------------------------- ##
Plant_Surveys %<>% processPlantSurveys#
# --------------- Demographic Plant Info ------------------------------------ ##
Plant_Info %<>% processPlantInfo
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
Plant_Surveys %<>% processPlantSurveys(Plant_Info)
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
Plant_Info %<>% processPlantInfo
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
Plant_Info %<>% processPlantInfo(Plot_Info)
setwd('/Users/KSauby/Documents/Projects/GTMNERRproc/R')
# ----------------------------------------------------------- ERROR MESSAGES#
	# Plants listed as species Not Recorded#
	dups <- Plant_Info[which(Plant_Info$HostSpecies=="Not Recorded"), ]#
	if (dim(dups)[1] > 0) {#
		warning(paste(#
			"Species identity not recorded for plantID: ",#
			paste(dups$PlantID, collapse=", ")#
		))#
	}#
	# are any plant IDs in Plant Info not in the surveys?#
	dups <- Plant_Info %>%#
		filter(!(PlantID %in% Plant_Surveys$PlantID)) %>% #
		.[,2:5]#
	if (dim(dups)[1] > 0) {#
		warning(paste(#
			"Some plant IDs are not in Plant Surveys data: ",#
			paste(dups$PlantID, collapse=", ")#
		))#
	}#
	# make sure that there is plot info for each tag number in plant info#
	dups <- Plant_Info %>%#
		filter(!(Tag_Number %in% Plot_Info$Tag_Number))#
	if (dim(dups)[1] > 0) {#
		warning(paste(#
			"Plants (",#
			paste(unique(dups$PlantID), collapse=", "),#
			") are listed as being in plots not in Plot Info data (",#
			paste(unique(dups$Tag_Number), collapse=", "),#
			")"#
		))#
	}#
	# ----------------- ADD INFO FROM Plot_Info (Cluster, Network, Island, etc.)#
	Plant_Info <- Plot_Info %>%#
		select(#
			Island, #
			Tag_Number, #
			Cluster, #
			Cluster2, #
			Network, #
			Sampling, #
			SurveyOrder#
		) %>%#
		merge(Plant_Info, by = "Tag_Number", all.y=TRUE) %>%#
		as.data.table %>%#
		setnames("HostSpecies", "Species") %>%#
		as.data.frame
setwd('/Users/KSauby/Documents/Projects/GTMNERRproc/R')
dups <- Plant_Info[which(Plant_Info$HostSpecies=="Not Recorded"), ]#
	if (dim(dups)[1] > 0) {#
		warning(paste(#
			"Species identity not recorded for plantID: ",#
			paste(dups$PlantID, collapse=", ")#
		))#
	}#
	# are any plant IDs in Plant Info not in the surveys?#
	dups <- Plant_Info %>%#
		filter(!(PlantID %in% Plant_Surveys$PlantID)) %>% #
		.[,2:5]#
	if (dim(dups)[1] > 0) {#
		warning(paste(#
			"Some plant IDs are not in Plant Surveys data: ",#
			paste(dups$PlantID, collapse=", ")#
		))#
	}
head(Plant_Info)
head(Plant_Surveys)
setwd('/Users/KSauby/Documents/Projects/GTMNERRproc/R')
dups <- Plant_Info %>%#
		filter(!(PlantID %in% Plant_Surveys$PlotPlantID)) %>% #
		.[,2:5]#
	if (dim(dups)[1] > 0) {#
		warning(paste(#
			"Some plant IDs are not in Plant Surveys data: ",#
			paste(dups$PlantID, collapse=", ")#
		))#
	}
setwd('/Users/KSauby/Documents/Projects/GTMNERRproc/R')
#' Process Plant Info#
#'#
#' @description Process Plant Info#
#' @param Plant_Info Dataset with Plant Information#
#' @param Plot_Info Dataset with Plot Information#
#'#
#' @importFrom dplyr select summarise group_by arrange#
#
#' @export#
#
processPlantInfo <- function(Plant_Info, Plot_Info) {#
	# ----------------------------------------------------------- ERROR MESSAGES#
	# Plants listed as species Not Recorded#
	dups <- Plant_Info[which(Plant_Info$HostSpecies=="Not Recorded"), ]#
	if (dim(dups)[1] > 0) {#
		warning(paste(#
			"Species identity not recorded for plantID: ",#
			paste(dups$PlantID, collapse=", ")#
		))#
	}#
	# are any plant IDs in Plant Info not in the surveys?#
	dups <- Plant_Info %>%#
		filter(!(PlantID %in% Plant_Surveys$PlotPlantID)) %>% #
		.[,2:5]#
	if (dim(dups)[1] > 0) {#
		warning(paste(#
			"Some plant IDs are not in Plant Surveys data: ",#
			paste(dups$PlantID, collapse=", ")#
		))#
	}#
	# make sure that there is plot info for each tag number in plant info#
	dups <- Plant_Info %>%#
		filter(!(Tag_Number %in% Plot_Info$Tag_Number))#
	if (dim(dups)[1] > 0) {#
		warning(paste(#
			"Plants (",#
			paste(unique(dups$PlantID), collapse=", "),#
			") are listed as being in plots not in Plot Info data (",#
			paste(unique(dups$Tag_Number), collapse=", "),#
			")"#
		))#
	}#
	# ----------------- ADD INFO FROM Plot_Info (Cluster, Network, Island, etc.)#
	Plant_Info <- Plot_Info %>%#
		select(#
			Island, #
			Tag_Number, #
			Cluster, #
			Cluster2, #
			Network, #
			Sampling, #
			SurveyOrder#
		) %>%#
		merge(Plant_Info, by = "Tag_Number", all.y=TRUE) %>%#
		as.data.table %>%#
		setnames("HostSpecies", "Species") %>%#
		as.data.frame#
	#---------------------------------------------------------- FORMAT PLANT IDs#
	Plant_Info %<>% Format_PlantIDs_Function#
	#---------------------- CALCULATE AND ADD NUMBER OF PlotPlantIDs PER PlantID#
	Plant_Info <- Plant_Info %>%#
		group_by(PlantID) %>%#
		summarise(#
			N.PlotPlantIDs = length(unique(PlotPlantID))#
		) %>%#
		merge(Plant_Info, by="PlantID")#
	#-------------------------- ADD FIRST and LAST DATE PlotPlantID WAS SURVEYED#
	# particularly relevant for plants that grew into plots over the course of the study (and thus the number of PlotPlantIDs for a given PlantID changed over time)#
	# also helps calculate the number of days a plant was known to have survived#
	Plant_Info <- Plant_Surveys %>%#
		group_by(PlotPlantID) %>%#
		summarise(#
			First.Survey.Date = min(Date),#
			Last.Survey.Date = max(Date)#
		) %>%#
		merge(Plant_Info, ., by="PlotPlantID", all.y=TRUE)#
	# ----------------------------------------------------------- PLANT SURVIVAL#
	# indicate whether plant was previously listed as dead or missing#
	# group based on plant ID number#
	Plant_Info <- Plant_Surveys %>% group_by(PlotPlantID) %>%#
		summarise( #
		# a plant has been obvserved to be dead/missing if at least 1 observation (> 0)#
		DeadObservation 		= Dead_Missing_Function(Dead),#
		MissingObservation 		= Dead_Missing_Function(Missing),#
		# a plant is confirmed dead/missing if at least 2 observations (> 1)#
		ConfirmedDead 			= Confirmed_Dead_Missing_Function(Dead),#
		ConfirmedMissing 		= Confirmed_Dead_Missing_Function(Missing),#
		ConfirmedDeadMissing = Confirmed_Dead_Missing_Function(c(Dead,Missing))	#
	) %>%#
	merge(Plant_Info, ., by="PlotPlantID")#
	# for those first marked dead/missing during the last survey, assume they are confirmed dead/missing#
	Plant_Info %<>% #
		group_by(PlotPlantID) %>%#
		mutate(#
			ConfirmedDeadMissing = replace(#
				ConfirmedDeadMissing,#
				which(Last.Survey.Date >= "2015-05-01"),#
				max(#
					DeadObservation,#
					MissingObservation,#
					ConfirmedDead,#
					ConfirmedMissing,#
					ConfirmedDeadMissing,#
					na.rm=T#
				)#
			)#
		)#
		# FIX LAST SURVEY DATE FOR THOSE THAT AREN'T DEAD#
	#---------------- ADD FIRST DATE PlotPlantID WAS RECORDED AS DEAD OR MISSING#
	# oldest date PlotPlantID was recorded as dead#
	temp_dead_obs <- filter(Plant_Surveys, Dead=="1") %>%#
		group_by(PlotPlantID) %>%#
		summarise(FirstDeadObservation = min(Date))#
	# oldest date PlotPlantID was recorded as missing#
	temp_missing_obs <- filter(Plant_Surveys, Missing=="1") %>%#
		group_by(PlotPlantID) %>%#
		summarise(FirstMissingObservation = min(Date))#
	# oldest date PlotPlantID was recorded as missing or dead#
	temp_dead_missing <- merge(#
		temp_dead_obs, #
		temp_missing_obs, #
		by="PlotPlantID", #
		all=T#
	) #
	temp_dead_missing$FirstDeadMissingObservation = #
		select(#
			temp_dead_missing, #
			FirstDeadObservation,#
			FirstMissingObservation#
		) %>% #
		apply(., 1, min, na.rm=T) %>%#
		as.Date#
	# merge with Plant_Info#
	Plant_Info <- merge(Plant_Info, temp_dead_missing, by="PlotPlantID", all=T)#
	# fix last survey date#
	#	for each PlotPlantID, keep FirstDeadMissingObservation#
	Plant_Info %<>% #
		group_by(PlotPlantID) %>%#
		mutate(#
			PlantID.Last.Alive = replace(#
				Last.Survey.Date,#
				which(ConfirmedDeadMissing==1),#
				FirstDeadMissingObservation#
			)#
		)#
		# then find latest date at which a plant was surveyed (regardless of whether it had died or not)#
		Plant_Info %<>% group_by(PlantID) %>%#
		mutate(#
			PlantID.Last.Alive = max(Last.Survey.Date, na.rm=T)#
		)#
		# find the earliest date that the plant was surveyed#
		Plant_Info %<>% group_by(PlantID) %>%#
		mutate(#
			PlantID.First.Alive = min(First.Survey.Date, na.rm=T)#
		)#
		# STANDARDIZE PARENT, REPRODUCTIVEMODE for PLANTIDs#
#
	# ---------------------- CALCULATE HOW MANY DAYS PLANT WAS KNOWN TO BE ALIVE#
	Plant_Info %<>% #
		group_by(PlantID) %>%#
		mutate(DaysAlive = PlantID.Last.Alive - PlantID.First.Alive)#
	# -------------------------------------------------- CLEANUP FOR CONSISTENCY#
	Plant_Info[,c(#
		"Quadrant",#
		"ReproductiveMode",#
		"Parent")] %<>%#
		apply(., 2, as.character#
	)#
	Plant_Info[,c(#
		"Quadrant",#
		"ReproductiveMode",#
		"Parent")] %<>%#
		apply(., 2, NA_Function#
	)#
	Plant_Info[,c(#
		"Quadrant",#
		"ReproductiveMode",#
		"Parent")] %<>%#
		apply(., 2, as.factor#
	)#
	# ------------------------------------------------- modify Reproductive Mode#
	Plant_Info$ReproductiveMode %<>% WoodyTrunk_Function()#
	Plant_Info %<>% setnames("ReproductiveMode", "RecruitmentMode")#
	Plant_Info %<>% mutate(#
		RecruitmentMode = replace(#
			RecruitmentMode,#
			which(RecruitmentMode=="WoodyTrunk"),#
			"Unknown"#
		),#
		RecruitmentMode = replace(#
			RecruitmentMode,#
			which(is.na(RecruitmentMode)),#
			"Unknown"#
		)#
	)#
	# ------------------------------------------------- ADD InDemomographicStudy#
	# save all Plant_Info#
	Plant_Info_All <- Plant_Info#
	Plant_Info %<>% merge(#
		., #
		ClustersInDemographicStudy, #
		by = "Cluster",#
		all=TRUE#
	) #
	# ------------------------------------------------------------ ADD ClusterID#
	#	do this because some clusters share plots#
	Plot_Info_Cluster <- Plot_Info %>%#
		select(Tag_Number, Cluster, Cluster2) %>%#
		reshape2:::melt.data.frame(., id.vars=c("Tag_Number"), #
			value.name="ClusterID") %>%#
		filter(ClusterID!=0) %>%#
		.[, -2] %>%#
		arrange(Tag_Number)#
	Plot_Info_Cluster %<>%#
		group_by(Tag_Number) %>%#
		summarise(ClusterID = paste(ClusterID, collapse=", "))#
	# CLUSTER ID FOR PLOTS *NOT* IN CLUSTERS#
	temp_A = Plot_Info %>%#
		select(Tag_Number, Cluster) %>%#
		filter(Cluster==0)#
	temp_A$ClusterID <- temp_A$Tag_Number#
	temp_A %<>% .[, -2]#
	Plot_Info_Cluster %<>% rbind.fill(temp_A) %>% #
		merge(Plot_Info, by="Tag_Number") %>%#
		select(ClusterID, Tag_Number)#
	Plant_Info %<>% merge(Plot_Info_Cluster, by="Tag_Number", all.x=T)#
	# --------------------------------------------------- remove InBigPlantStudy#
	Plant_Info[which(is.na(Plant_Info$InBigPlantStudy)), ]$InBigPlantStudy <- "No"#
	Plant_Info[which(Plant_Info$InBigPlantStudy=="yes"), ]$InBigPlantStudy <- "Yes"#
	Plant_Info[which(Plant_Info$InBigPlantStudy==""), ]$InBigPlantStudy <- "No"#
	Plant_Info %<>% filter(InBigPlantStudy=="No")#
	# ------------------------------------------------------------------------ ##
	return(Plant_Info)#
}
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
Plant_Info %<>% processPlantInfo(Plot_Info)
setwd('/Users/KSauby/Documents/Projects/GTMNERRproc/R')
# ----------------------------------------------------------- ERROR MESSAGES#
	# Plants listed as species Not Recorded#
	dups <- Plant_Info[which(Plant_Info$HostSpecies=="Not Recorded"), ]#
	if (dim(dups)[1] > 0) {#
		warning(paste(#
			"Species identity not recorded for plantID: ",#
			paste(dups$PlantID, collapse=", ")#
		))#
	}#
	# are any plant IDs in Plant Info not in the surveys?#
	dups <- Plant_Info %>%#
		filter(!(PlantID %in% Plant_Surveys$PlotPlantID)) %>% #
		.[,2:5]#
	if (dim(dups)[1] > 0) {#
		warning(paste(#
			"Some plant IDs are not in Plant Surveys data: ",#
			paste(dups$PlantID, collapse=", ")#
		))#
	}#
	# make sure that there is plot info for each tag number in plant info#
	dups <- Plant_Info %>%#
		filter(!(Tag_Number %in% Plot_Info$Tag_Number))#
	if (dim(dups)[1] > 0) {#
		warning(paste(#
			"Plants (",#
			paste(unique(dups$PlantID), collapse=", "),#
			") are listed as being in plots not in Plot Info data (",#
			paste(unique(dups$Tag_Number), collapse=", "),#
			")"#
		))#
	}#
	# ----------------- ADD INFO FROM Plot_Info (Cluster, Network, Island, etc.)#
	Plant_Info <- Plot_Info %>%#
		select(#
			Island, #
			Tag_Number, #
			Cluster, #
			Cluster2, #
			Network, #
			Sampling, #
			SurveyOrder#
		) %>%#
		merge(Plant_Info, by = "Tag_Number", all.y=TRUE) %>%#
		as.data.table %>%#
		setnames("HostSpecies", "Species") %>%#
		as.data.frame
head(Plot_Info)
