42*2 + 17*2
118/19
21/6.2
59.5*.75
59.5*.5 + 59.5
71/12
597/80
597/8
432/8
15*8 + 9*3
?seq_len
7.25/3
7.25/4
for(i in 0:9){x=cos(2*pi/10*i);y=x+1;z=(y-2)*22;pie(c(y,8-y),col=c(0,7),init.angl=135-z,bo=F,la=NA)}
install.packages("ProjectTemplate")
install.packages("dplyr")
install.packages("ggplot2")
install.packages("data.table")
install.packages("corrgram")
install.packages("survival")
install.packages("shapefiles")
install.packages("rgdal")
install.packages("PBSmapping")
install.packages("sp")
install.packages("gdistance")
install.packages("chron")
install.packages("unmarked")
install.packages("lme4")
install.packages("rgeos", repos="http://R-Forge.R-project.org", type="source")#
require(rgeos)
install.packages('rgdal',repos="http://www.stats.ox.ac.uk/pub/RWin")
library(rgdal)
install.packages("http://cran.r-project.org/src/contrib/rgdal_0.9-1.tar.gz", repos = NULL, type="source", configure.args = "--with-gdal-config=/Library/Frameworks/GDAL.framework/Versions/1.10/unix/bin/gdal-config --with-proj-include=/Library/Frameworks/PROJ.framework/unix/include --with-proj-lib=/Library/Frameworks/PROJ.framework/unix/lib")
18/1.618
189+114
library(lubridate)
library(magrittr)
seasons <- data.frame(#
	   SE = as.POSIXct(c("2009-3-20", "2010-3-20", "2011-3-20", "2012-3-20", #
            "2013-3-20", "2014-3-20"), format="%Y-%m-%d"),#
	   SS = as.POSIXct(c("2009-6-21", "2010-6-21", "2011-6-21", "2012-6-20",#
            "2013-6-20", "2014-6-20"), format="%Y-%m-%d"),#
	   FE = as.POSIXct(c("2009-9-22", "2010-9-23", "2011-9-23", "2012-9-22",#
            "2013-9-22", "2014-9-22"), format="%Y-%m-%d"),#
	   WS = as.POSIXct(c("2009-12-21", "2010-12-21", "2011-12-22", "2012-12-21", #
            "2013-12-21", "2014-12-21"), format="%Y-%m-%d")#
    )#
#
    assignSeason <- function(dat, SeasonStarts=seasons) {#
	    dat %<>% mutate(#
		    Season = lapply(Date,#
				function(x) {#
					findInterval(#
						x, #
						SeasonStarts[which(year(x)==year(SeasonStarts$WS)), ]#
					)#
				}#
			) %>% unlist	#
		)#
	    dat[which(dat$Season==0 | dat$Season==4), ]$Season 	<- "Winter"#
	    dat[which(dat$Season==1), ]$Season 					<- "Spring"#
	    dat[which(dat$Season==2), ]$Season 					<- "Summer"#
	    dat[which(dat$Season==3), ]$Season 					<- "Fall"#
	    return(dat)#
    }
dat = data.frame(#
	    Date = as.POSIXct(strptime(as.Date("2011-12-01", format = "%Y-%m-%d") + #
            (0:10)*30, format="%Y-%m-%d" ))#
    )#
    dat %>% assignSeason
library(dplyr)
dat = data.frame(#
	    Date = as.POSIXct(strptime(as.Date("2011-12-01", format = "%Y-%m-%d") + #
            (0:10)*30, format="%Y-%m-%d" ))#
    )#
    dat %>% assignSeason
library(devtoolks)
library(devtools)
?install_github
devtools::install_github("ksauby/ACSampling", auth_token="2ab30a602e52fae481f4249cc25e892c0a9ccfc7", subdir="/code/Restricted_ACS_Simulations/ACSampling", repos=NULL)
devtools::install_github("ksauby/ACSampling", auth_token="2794c3f10db92f525181a0b1f6c19064fe3a2ef3", subdir="/code/Restricted_ACS_Simulations/ACSampling", repos=NULL)
devtools::install("~/Documents/Projects/ACSampling/code/Restricted_ACS_Simulations/ACSampling_0.0.0.9000.tar.gz")
devtools::install(pkg="~/Documents/Projects/ACSampling/code/Restricted_ACS_Simulations/ACSampling_0.0.0.9000.tar.gz")
devtools::install(pkg="Users/KSauby/Documents/Projects/ACSampling/code/Restricted_ACS_Simulations/ACSampling_0.0.0.9000.tar.gz")
devtools::install(pkg="~/Users/KSauby/Documents/Projects/ACSampling/code/Restricted_ACS_Simulations/ACSampling_0.0.0.9000.tar.gz")
devtools::install(pkg="/Users/KSauby/Documents/Projects/ACSampling/code/Restricted_ACS_Simulations/ACSampling_0.0.0.9000.tar.gz")
devtools::install_local(path="/Users/KSauby/Documents/Projects/ACSampling/code/Restricted_ACS_Simulations/ACSampling_0.0.0.9000.tar.gz")
library(devtools)
devtools::install_local(path="/Users/KSauby/Documents/Projects/ACSampling/code/Restricted_ACS_Simulations/ACSampling_0.0.0.9000.tar.gz")
devtools::install(pkg="/Users/KSauby/Documents/Projects/ACSampling/code/Restricted_ACS_Simulations/ACSampling_0.0.0.9000.tar.gz")
install.packages("~/Documents/Projects/ACSampling/code/Restricted_ACS_Simulations/ACSampling_0.0.0.9000.tar.gz")
??limit
37-13
24/37
37-13
26/37
25/37
23/37
29/37
30/37
22/37
30/37
29/37
28/37
27/37
35/37
30/37
29/37
26/37
26/37 - .6757
28/37
30/37
29/37
37-12
25/37
219*.8
219*.8 - 17
26/3
17/900
42/900
49/900
29/40
1/25
8/25
10/25
(7.5 + 3.75)/15
12*0.75
11 * 0.75
11/15
11*0.25
11/15 * 6
32/41 +0.03.5
32/41 + 0.035
(32/41 + 0.035)*100
100/41
23/40 * 100
(23/40 * 100)+5
(164 + 13.5 + 6)
(164 + 13.5 + 6)/365
(164 + 13.5 + 6 + (50))/365
(164 + 13.5 + 6 + (60))/365
(164 + 13.5 + 6 + (70))/365
(164 + 13.5 + 6 + (75))/365
102/40
102/41
?table
9.49/2
12.75+8.25
(10.5 + 6.5)/(12.75+8.25)
.25^2 * 2
(.25^2 * 2)^0.5
(.25^2 * 2)^0.5 * 2
3/8
5/8
6/8
30*1.5
40*15
40*1.5
13.25 - 4.5
(276.29+8.75)/365
16*3
16*4
84/12
9/12
9/12*14
22+60+78+80+88+98
22+38+18+2+8+10
239/785
(239+53)/785
.492+.139
.412+.166+.002
.412/.58
.166/.58
.412*.58
.71*.58
98-54
22+49+43+33+36+44
60-11
78-26
80-35
88-47
98-52
22+49+52+45+41+46
library(RMark)
?test_ddl
data(dipper)    dipper.processed=process.data(dipper,groups=("sex"))    release.gof(dipper.processed)
4+19+7+12
4+17.83+7+12
40.83/42
40.83/42*14
14
(11.25+5)/(25.5 + 10.25 - 14)
365*0.6666
365*0.6666 - 75.89
5/6 * 2
5/6 * 2 + 75.89
365*0.6666 -77.55667
365*0.6666 -77.55667 - 6 - 13 - 1
145.7523/2
15*3
11*5
8/12*14
4+15.33+5.5+12
(4+15.33+5.5+12)
(4+15.33+5.5+12)/(4+19+7+12)
(4+19+7+12)
(4+15.33+5.5+12)/(4+19+7+12)*14
2.5+17.5+12
32/42
32/42 * 14
4+12+6.5+12
(4+12+6.5+12)/42 * 14
5/6*2
5/6*2 + 0.25
5/6*2 + 0.5
2577.77/12
15/20
15/20*6
300 - 4*50
300 - 4*40
4.5/12*14
9+9+7+9
33.5/34 * 14
32/34 * 14
32/34*14
7+8.5+7+7
(7+8.5+7+7)/34 * 14
(7+5.5+5.5+8.5)/34 * 14
(7+5.5+5.5+8.5)/(9+7+9+9) * 14
9+7+9+9
(14.25+7.25)/(24.75+10.25-9)
(16.5+7.75)/(24.75+10.25)
(16.5+7.75)/(24.75+10.25)*6
(5.25+5.5)/(22.5+10.5)
(5.25+5.5)/(22.5+10.5)*6
(9.75+5.5)/(24.7+10.25-5)*6
(9.75+5.5)/(24.7+10.25-5)
3.98/6
(9.75+5.5)/(24.7+10.25-10)
(9.75+5.5)/(24.7+10.25-10)*6
5/6*2
1.83-5/6*2
1.83-4/6*2
5/6*2 + 0.5
4/6*2 + 0.5
4/6*2
4/6 + 0.5
4/6*2 + 0.5
33/34 * 14
17.5*4
24*4 + 1.75*4
library(dplyr)
library(plyr)
600*.22
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis')
library(ProjectTemplate)#
#
# when working on a Windows computer#
# setwd("C:/Users/KSauby/Dropbox/gradschool/Research/Projects/sampling")#
#
# load project#
load.project()
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
# ---------------------------------------------------------- Shorten names#
Plot_Info <- OccupancySRSWOR.Plot.Surveys.Info#
Plot_Surveys <- OccupancySRSWOR.Plot.Surveys#
Plant_Surveys <- Demographic.Plant.Surveys#
# Plant_Surveys <- Plant.Surveys.processed.26jun17#
Plant_Info <- Demographic.Plant.Info#
# Plant_Info <- Plant.Info.processed.26jun17#
Plant_Surveys_All <- Demographic.Plant.Surveys#
Plant_Info_All <- Demographic.Plant.Info#
D_Plot_Surveys <- Demographic.Plot.Surveys#
Original_Plant_Data <- Original.Demographic.Plant.Data#
Seed_Abundance <- Seed.Abundance#
Seed_Abundance_Surveys <- Seed.Abundance.Surveys#
GIS_data_updated <- GIS.data.updated
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
D_Plot_Surveys$Date %<>% as.Date("%m/%d/%Y") # Demographic Plot Surveys#
Plant_Surveys %<>% processPlantSurveys(Plant_Info) # Plant Surveys#
Plant_Surveys %<>% fixInconsistentDeadMissingRecords#
#
placeholder <- Plant_Info#
#
Plant_Info %<>% processPlantInfo(Plot_Info)#
# saved here#
# write.csv(Plant_Surveys, "../data/Plant_Surveys_processed_26jun17.csv")#
# write.csv(Plant_Info, "../data/Plant_Info_processed_26jun17.csv")#
Plant_Surveys$Date %<>% as.Date#
#
Plant_Surveys <- Plant_Info %>%#
	group_by(PlantID) %>%#
	dplyr::summarise(#
		N.PlotPlantIDs = length(unique(PlotPlantID))#
	) %>%#
	merge(Plant_Surveys, by="PlantID")#
Plant_Surveys_by_Plant <- Plant_Surveys %>% #
	processSurveysMergedbyPlant#
Plant_Surveys_by_Plant %>% filter(AllSurveyed==F) %>% write.csv("incompletesurveys.csv")#
#
Plant_Surveys %>% filter(N.PlotPlantIDs > 1) %>% filter(Dead==1 | Missing == 1) %>% write.csv("deadmissing.csv")#
#
h <- function(w) if( any( grepl( "no non-missing arguments to max", w) ) ) invokeRestart( "muffleWarning" )#
Plant_Surveys_by_Plant <- withCallingHandlers(#
	createPlantInsectPresence(Plant_Surveys_by_Plant),#
	warning = h#
)#
#
# find and keep only first dead/missing observation#
temp <- Plant_Surveys_by_Plant %>% findFirstDeadMissingObservation#
# create Fecundity and RGR dataset#
Plant_Surveys_by_Year <- createPlantSurveysbyYear(Plant_Surveys_by_Plant)#
Plant_Info_Analysis <- createPlantInfobyPlant(Plant_Info, Plant_Surveys_by_Year)
setwd('/Users/KSauby/Documents/Projects/GTMNERRproc/R')
# one record per plant#
	# 2849 records#
	Plant_Info_Analysis <- Plant_Info %>%#
		mutate(#
			Parent = replace(#
				Parent,#
				which(Parent=="Unkn"),#
				NA#
			)#
		) %>%#
		renameSpecies#
	Plant_Info_Analysis %<>%#
		arrange(First.Survey.Date.Alive) %>%#
		group_by(PlantID) %>%#
		dplyr::summarise(#
			Island 				= Island[1],#
			Network 			= Network[1],#
			# make sure they are all the same species#
			Species 			= Species[1],#
			# fix/verify#
			RecruitmentMode 	= paste(Unique(RecruitmentMode), collapse=","),#
			Parent 				= paste(Unique(Parent), collapse=","),#
			First.Survey.Date.Alive 	= First.Survey.Date.Alive[1]#
		) %>%#
		filter(!is.na(Network))#
	# save to figure out if some plants were lost during processing#
	temp1 <- Plant_Info_Analysis$PlantID#
	# Parent#
	Plant_Info_Analysis %<>% mutate(#
		Parent = replace(#
			Parent,#
			which(is.na(Parent)),#
			"Unknown"#
		)#
	)
setwd('/Users/KSauby/Documents/Projects/GTMNERRproc/R')
Plant_Info_Analysis$Parent %<>% NA_Function#
	Plant_Info_Analysis$Parent[which(Plant_Info_Analysis$Parent=="")] <- NA#
	# order#
	Plant_Info_Analysis %<>% arrange(desc(Island), desc(Parent))#
	# summarise insect presence on plants and in networks#
	# network_summary <- Plant_Surveys_by_Year %>%
setwd('/Users/KSauby/Documents/Projects/GTMNERRproc/R')
Plant_summary <- Plant_Surveys_by_Year %>%#
		group_by(PlantID) %>%#
		dplyr::summarise(#
			OldMothPlantPres 	= Maximum(Old_Moth_Evidence_t),#
			MEPlantPres 		= Maximum(ME_t),#
			CAPlantPres 		= Maximum(CA_t),#
			MothPlantPres 		= Maximum(Moth_Evidence_t)#
		)#
	Plant_Info_Analysis %<>% #
		# merge(network_summary, by="Network") %>%#
		merge(Plant_summary, by="PlantID")#
	# get size at first survey
setwd('/Users/KSauby/Documents/Projects/GTMNERRproc/R')
First_Size <- Plant_Surveys_by_Plant %>%#
		arrange(Date) %>%#
		group_by(PlantID) %>%#
		dplyr::summarise(#
			First.Survey.Date 		= Date[1],#
			minFecundityYear 		= Minimum(FecundityYear),#
			First_Size 				= Size_t[!(is.na(Size_t))][1],#
			First.Measurement.Date 	= Date[!(is.na(Size_t))][1],#
			min.Size 				= Minimum(Size_t),#
			max.Size 				= Maximum(Size_t),#
			LastDateAlive =#
				Maximum(Date[which(Dead==0 & Missing==0)]) %>% as.Date,#
			FirstDeadObservation	= Date[which(Dead==1)][1],#
			FirstMissingObservation	= Date[which(Missing==1)][1],#
			FirstDeadMissingObservation = Minimum(#
				c(#
					FirstDeadObservation,#
					FirstMissingObservation#
				)#
			) %>% as.Date,#
			# assume alive day before first observed: First.Survey.Date - 1#
			# also alive day of last survey: LastDateAlive + 1#
			minDaysAlive	= #
				(LastDateAlive + 1) - (First.Survey.Date - 1),			#
			# assume last day alive was day before death observation: FirstDeadMissingObservation - 1#
			# assume alive day before first observed: First.Survey.Date - 1#
			# the 1s cancel out#
			maxDaysAlive	= #
				(FirstDeadMissingObservation - 1) -	(First.Survey.Date - 1)#
		)
setwd('/Users/KSauby/Documents/Projects/GTMNERRproc/R')
Plant_Info_Analysis %<>% #
		merge(First_Size, by=c("PlantID"))#
	# WARNINGS	#
	temp <- Plant_Info_Analysis %>% #
		filter(grepl(",", RecruitmentMode)==TRUE)#
	if (dim(temp)[1] > 0) {#
		write.csv(temp, "InconsistentRecruitmentModePlantInfo.csv")#
		warning(paste(#
			"Inconsistent recruitment mode recorded for at least one plant spanning multiple plots. These plant info records have been written to csv."#
		))#
	}
setwd('/Users/KSauby/Documents/Projects/GTMNERRproc/R')
temp <- Plant_Info_Analysis %>% #
		filter(grepl(",", Parent)==TRUE)#
	if (dim(temp)[1] > 0) {#
		write.csv(temp, "InconsistentParentPlantInfo.csv")#
		warning(paste(#
			"Inconsistent Parent recorded for at least one plant spanning multiple plots. These plant info records have been written to csv."#
		))#
	}
setwd('/Users/KSauby/Documents/Projects/GTMNERRproc/R')
Plant_Info_Analysis <- Plant_Info %>%#
		mutate(#
			Parent = replace(#
				Parent,#
				which(Parent=="Unkn"),#
				NA#
			)#
		) %>%#
		renameSpecies#
	Plant_Info_Analysis %<>%#
		arrange(First.Survey.Date.Alive) %>%#
		group_by(PlantID) %>%#
		dplyr::summarise(#
			Island 				= Island[1],#
			Network 			= Network[1],#
			# make sure they are all the same species#
			Species 			= Species[1],#
			# fix/verify#
			RecruitmentMode 	= paste(Unique(RecruitmentMode), collapse=","),#
			Parent 				= paste(Unique(Parent), collapse=","),#
			First.Survey.Date.Alive 	= First.Survey.Date.Alive[1]#
		) %>%#
		filter(!is.na(Network))#
	# save to figure out if some plants were lost during processing#
	temp1 <- Plant_Info_Analysis$PlantID#
	# Parent#
	Plant_Info_Analysis %<>% mutate(#
		Parent = replace(#
			Parent,#
			which(is.na(Parent)),#
			"Unknown"#
		)#
	)
setwd('/Users/KSauby/Documents/Projects/GTMNERRproc/R')
Plant_Info_Analysis$Parent %<>% NA_Function#
	Plant_Info_Analysis$Parent[which(Plant_Info_Analysis$Parent=="")] <- NA#
	# order#
	Plant_Info_Analysis %<>% arrange(desc(Island), desc(Parent))#
	# summarise insect presence on plants and in networks#
	# network_summary <- Plant_Surveys_by_Year %>%#
	#	group_by(Network) %>%#
	#	dplyr::summarise(#
	#		OldMothNetworkPres 	= Maximum(Old_Moth_Evidence_t),#
	#		MENetworkPres 		= Maximum(ME_t),#
	#		CANetworkPres 		= Maximum(CA_t),#
	#		MothNetworkPres 	= Maximum(Moth_Evidence_t)#
	#	)
setwd('/Users/KSauby/Documents/Projects/GTMNERRproc/R')
Plant_summary <- Plant_Surveys_by_Year %>%#
		group_by(PlantID) %>%#
		dplyr::summarise(#
			OldMothPlantPres 	= Maximum(Old_Moth_Evidence_t),#
			MEPlantPres 		= Maximum(ME_t),#
			CAPlantPres 		= Maximum(CA_t),#
			MothPlantPres 		= Maximum(Moth_Evidence_t)#
		)#
	Plant_Info_Analysis %<>% #
		# merge(network_summary, by="Network") %>%#
		merge(Plant_summary, by="PlantID")#
	# get size at first survey
setwd('/Users/KSauby/Documents/Projects/GTMNERRproc/R')
First_Size <- Plant_Surveys_by_Plant %>%#
		arrange(Date) %>%#
		group_by(PlantID) %>%#
		dplyr::summarise(#
			First.Survey.Date 		= Date[1],#
			minFecundityYear 		= Minimum(FecundityYear),#
			First_Size 				= Size_t[!(is.na(Size_t))][1],#
			First.Measurement.Date 	= Date[!(is.na(Size_t))][1],#
			min.Size 				= Minimum(Size_t),#
			max.Size 				= Maximum(Size_t),#
			LastDateAlive =#
				Maximum(Date[which(Dead==0 & Missing==0)]) %>% as.Date,#
			FirstDeadObservation	= Date[which(Dead==1)][1],#
			FirstMissingObservation	= Date[which(Missing==1)][1],#
			FirstDeadMissingObservation = Minimum(#
				c(#
					FirstDeadObservation,#
					FirstMissingObservation#
				)#
			) %>% as.Date,#
			# assume alive day before first observed: First.Survey.Date - 1#
			# also alive day of last survey: LastDateAlive + 1#
			minDaysAlive	= #
				(LastDateAlive + 1) - (First.Survey.Date - 1),			#
			# assume last day alive was day before death observation: FirstDeadMissingObservation - 1#
			# assume alive day before first observed: First.Survey.Date - 1#
			# the 1s cancel out#
			maxDaysAlive	= #
				(FirstDeadMissingObservation - 1) -	(First.Survey.Date - 1)#
		)
setwd('/Users/KSauby/Documents/Projects/GTMNERRproc/R')
#' Create Plant Info by Plant#
#'#
#' @description Create variables giving evidence of moths and insects, including moth presence or damage.#
#' @param Plant_Surveys_by_Plant Plant Survey Dataset#
#'#
#' @export#
#' @importFrom dataproc Unique#
#
createPlantInfobyPlant <- function(Plant_Info, Plant_Surveys_by_Year) {#
	# one record per plant#
	# 2849 records#
	Plant_Info_Analysis <- Plant_Info %>%#
		mutate(#
			Parent = replace(#
				Parent,#
				which(Parent=="Unkn"),#
				NA#
			)#
		) %>%#
		renameSpecies#
	Plant_Info_Analysis %<>%#
		arrange(First.Survey.Date.Alive) %>%#
		group_by(PlantID) %>%#
		dplyr::summarise(#
			Island 				= Island[1],#
			Network 			= Network[1],#
			# make sure they are all the same species#
			Species 			= Species[1],#
			# fix/verify#
			RecruitmentMode 	= paste(Unique(RecruitmentMode), collapse=","),#
			Parent 				= paste(Unique(Parent), collapse=","),#
			First.Survey.Date.Alive 	= First.Survey.Date.Alive[1]#
		) %>%#
		filter(!is.na(Network))#
	# save to figure out if some plants were lost during processing#
	temp1 <- Plant_Info_Analysis$PlantID#
	# Parent#
	Plant_Info_Analysis %<>% mutate(#
		Parent = replace(#
			Parent,#
			which(is.na(Parent)),#
			"Unknown"#
		)#
	)	#
	Plant_Info_Analysis$Parent %<>% NA_Function#
	Plant_Info_Analysis$Parent[which(Plant_Info_Analysis$Parent=="")] <- NA#
	# order#
	Plant_Info_Analysis %<>% arrange(desc(Island), desc(Parent))#
	# summarise insect presence on plants and in networks#
	# network_summary <- Plant_Surveys_by_Year %>%#
	#	group_by(Network) %>%#
	#	dplyr::summarise(#
	#		OldMothNetworkPres 	= Maximum(Old_Moth_Evidence_t),#
	#		MENetworkPres 		= Maximum(ME_t),#
	#		CANetworkPres 		= Maximum(CA_t),#
	#		MothNetworkPres 	= Maximum(Moth_Evidence_t)#
	#	)#
	Plant_summary <- Plant_Surveys_by_Year %>%#
		group_by(PlantID) %>%#
		dplyr::summarise(#
			OldMothPlantPres 	= Maximum(Old_Moth_Evidence_t),#
			MEPlantPres 		= Maximum(ME_t),#
			CAPlantPres 		= Maximum(CA_t),#
			MothPlantPres 		= Maximum(Moth_Evidence_t)#
		)#
	Plant_Info_Analysis %<>% #
		# merge(network_summary, by="Network") %>%#
		merge(Plant_summary, by="PlantID")#
	# get size at first survey#
	First_Size <- Plant_Surveys_by_Plant %>%#
		arrange(Date) %>%#
		group_by(PlantID) %>%#
		dplyr::summarise(#
			First.Survey.Date 		= Date[1],#
			minFecundityYear 		= Minimum(FecundityYear),#
			First_Size 				= Size_t[!(is.na(Size_t))][1],#
			First.Measurement.Date 	= Date[!(is.na(Size_t))][1],#
			min.Size 				= Minimum(Size_t),#
			max.Size 				= Maximum(Size_t),#
			LastDateAlive =#
				Maximum(Date[which(Dead==0 & Missing==0)]) %>% as.Date,#
			FirstDeadObservation	= Date[which(Dead==1)][1],#
			FirstMissingObservation	= Date[which(Missing==1)][1],#
			FirstDeadMissingObservation = Minimum(#
				c(#
					FirstDeadObservation,#
					FirstMissingObservation#
				)#
			) %>% as.Date,#
			# assume alive day before first observed: First.Survey.Date - 1#
			# also alive day of last survey: LastDateAlive + 1#
			minDaysAlive	= #
				(LastDateAlive + 1) - (First.Survey.Date - 1),			#
			# assume last day alive was day before death observation: FirstDeadMissingObservation - 1#
			# assume alive day before first observed: First.Survey.Date - 1#
			# the 1s cancel out#
			maxDaysAlive	= #
				(FirstDeadMissingObservation - 1) -	(First.Survey.Date - 1)#
		)#
	Plant_Info_Analysis %<>% #
		merge(First_Size, by=c("PlantID"))#
	# WARNINGS	#
	temp <- Plant_Info_Analysis %>% #
		filter(grepl(",", RecruitmentMode)==TRUE)#
	if (dim(temp)[1] > 0) {#
		write.csv(temp, "InconsistentRecruitmentModePlantInfo.csv")#
		warning(paste(#
			"Inconsistent recruitment mode recorded for at least one plant spanning multiple plots. These plant info records have been written to csv."#
		))#
	}	#
	temp <- Plant_Info_Analysis %>% #
		filter(grepl(",", Parent)==TRUE)#
	if (dim(temp)[1] > 0) {#
		write.csv(temp, "InconsistentParentPlantInfo.csv")#
		warning(paste(#
			"Inconsistent Parent recorded for at least one plant spanning multiple plots. These plant info records have been written to csv."#
		))#
	}	#
	return(Plant_Info_Analysis)#
}
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
Plant_Info_Analysis <- createPlantInfobyPlant(Plant_Info, Plant_Surveys_by_Year)
setwd('/Users/KSauby/Documents/Projects')
setwd("./GTMNERRproc")#
#setwd("./dataproc")#
#setwd("./modresproc")#
#setwd("./unmarked")#
#setwd("./RPresence")#
#devtools::test()#
devtools::document()#
devtools::install()
