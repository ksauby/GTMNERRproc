21/6.2
59.5*.75
59.5*.5 + 59.5
71/12
597/80
597/8
432/8
15*8 + 9*3
?seq_len
7.25/3
7.25/4
for(i in 0:9){x=cos(2*pi/10*i);y=x+1;z=(y-2)*22;pie(c(y,8-y),col=c(0,7),init.angl=135-z,bo=F,la=NA)}
install.packages("ProjectTemplate")
install.packages("dplyr")
install.packages("ggplot2")
install.packages("data.table")
install.packages("corrgram")
install.packages("survival")
install.packages("shapefiles")
install.packages("rgdal")
install.packages("PBSmapping")
install.packages("sp")
install.packages("gdistance")
install.packages("chron")
install.packages("unmarked")
install.packages("lme4")
install.packages("rgeos", repos="http://R-Forge.R-project.org", type="source")#
require(rgeos)
install.packages('rgdal',repos="http://www.stats.ox.ac.uk/pub/RWin")
library(rgdal)
install.packages("http://cran.r-project.org/src/contrib/rgdal_0.9-1.tar.gz", repos = NULL, type="source", configure.args = "--with-gdal-config=/Library/Frameworks/GDAL.framework/Versions/1.10/unix/bin/gdal-config --with-proj-include=/Library/Frameworks/PROJ.framework/unix/include --with-proj-lib=/Library/Frameworks/PROJ.framework/unix/lib")
18/1.618
189+114
library(lubridate)
library(magrittr)
seasons <- data.frame(#
	   SE = as.POSIXct(c("2009-3-20", "2010-3-20", "2011-3-20", "2012-3-20", #
            "2013-3-20", "2014-3-20"), format="%Y-%m-%d"),#
	   SS = as.POSIXct(c("2009-6-21", "2010-6-21", "2011-6-21", "2012-6-20",#
            "2013-6-20", "2014-6-20"), format="%Y-%m-%d"),#
	   FE = as.POSIXct(c("2009-9-22", "2010-9-23", "2011-9-23", "2012-9-22",#
            "2013-9-22", "2014-9-22"), format="%Y-%m-%d"),#
	   WS = as.POSIXct(c("2009-12-21", "2010-12-21", "2011-12-22", "2012-12-21", #
            "2013-12-21", "2014-12-21"), format="%Y-%m-%d")#
    )#
#
    assignSeason <- function(dat, SeasonStarts=seasons) {#
	    dat %<>% mutate(#
		    Season = lapply(Date,#
				function(x) {#
					findInterval(#
						x, #
						SeasonStarts[which(year(x)==year(SeasonStarts$WS)), ]#
					)#
				}#
			) %>% unlist	#
		)#
	    dat[which(dat$Season==0 | dat$Season==4), ]$Season 	<- "Winter"#
	    dat[which(dat$Season==1), ]$Season 					<- "Spring"#
	    dat[which(dat$Season==2), ]$Season 					<- "Summer"#
	    dat[which(dat$Season==3), ]$Season 					<- "Fall"#
	    return(dat)#
    }
dat = data.frame(#
	    Date = as.POSIXct(strptime(as.Date("2011-12-01", format = "%Y-%m-%d") + #
            (0:10)*30, format="%Y-%m-%d" ))#
    )#
    dat %>% assignSeason
library(dplyr)
dat = data.frame(#
	    Date = as.POSIXct(strptime(as.Date("2011-12-01", format = "%Y-%m-%d") + #
            (0:10)*30, format="%Y-%m-%d" ))#
    )#
    dat %>% assignSeason
library(devtoolks)
library(devtools)
?install_github
devtools::install_github("ksauby/ACSampling", auth_token="2ab30a602e52fae481f4249cc25e892c0a9ccfc7", subdir="/code/Restricted_ACS_Simulations/ACSampling", repos=NULL)
devtools::install_github("ksauby/ACSampling", auth_token="2794c3f10db92f525181a0b1f6c19064fe3a2ef3", subdir="/code/Restricted_ACS_Simulations/ACSampling", repos=NULL)
devtools::install("~/Documents/Projects/ACSampling/code/Restricted_ACS_Simulations/ACSampling_0.0.0.9000.tar.gz")
devtools::install(pkg="~/Documents/Projects/ACSampling/code/Restricted_ACS_Simulations/ACSampling_0.0.0.9000.tar.gz")
devtools::install(pkg="Users/KSauby/Documents/Projects/ACSampling/code/Restricted_ACS_Simulations/ACSampling_0.0.0.9000.tar.gz")
devtools::install(pkg="~/Users/KSauby/Documents/Projects/ACSampling/code/Restricted_ACS_Simulations/ACSampling_0.0.0.9000.tar.gz")
devtools::install(pkg="/Users/KSauby/Documents/Projects/ACSampling/code/Restricted_ACS_Simulations/ACSampling_0.0.0.9000.tar.gz")
devtools::install_local(path="/Users/KSauby/Documents/Projects/ACSampling/code/Restricted_ACS_Simulations/ACSampling_0.0.0.9000.tar.gz")
library(devtools)
devtools::install_local(path="/Users/KSauby/Documents/Projects/ACSampling/code/Restricted_ACS_Simulations/ACSampling_0.0.0.9000.tar.gz")
devtools::install(pkg="/Users/KSauby/Documents/Projects/ACSampling/code/Restricted_ACS_Simulations/ACSampling_0.0.0.9000.tar.gz")
install.packages("~/Documents/Projects/ACSampling/code/Restricted_ACS_Simulations/ACSampling_0.0.0.9000.tar.gz")
??limit
37-13
24/37
37-13
26/37
25/37
23/37
29/37
30/37
22/37
30/37
29/37
28/37
27/37
35/37
30/37
29/37
26/37
26/37 - .6757
28/37
30/37
29/37
37-12
25/37
219*.8
219*.8 - 17
26/3
17/900
42/900
49/900
29/40
1/25
8/25
10/25
(7.5 + 3.75)/15
12*0.75
11 * 0.75
11/15
11*0.25
11/15 * 6
32/41 +0.03.5
32/41 + 0.035
(32/41 + 0.035)*100
100/41
23/40 * 100
(23/40 * 100)+5
(164 + 13.5 + 6)
(164 + 13.5 + 6)/365
(164 + 13.5 + 6 + (50))/365
(164 + 13.5 + 6 + (60))/365
(164 + 13.5 + 6 + (70))/365
(164 + 13.5 + 6 + (75))/365
102/40
102/41
?table
9.49/2
12.75+8.25
(10.5 + 6.5)/(12.75+8.25)
.25^2 * 2
(.25^2 * 2)^0.5
(.25^2 * 2)^0.5 * 2
3/8
5/8
6/8
30*1.5
40*15
40*1.5
13.25 - 4.5
(276.29+8.75)/365
16*3
16*4
84/12
9/12
9/12*14
22+60+78+80+88+98
22+38+18+2+8+10
239/785
(239+53)/785
.492+.139
.412+.166+.002
.412/.58
.166/.58
.412*.58
.71*.58
98-54
22+49+43+33+36+44
60-11
78-26
80-35
88-47
98-52
22+49+52+45+41+46
library(RMark)
?test_ddl
data(dipper)    dipper.processed=process.data(dipper,groups=("sex"))    release.gof(dipper.processed)
4+19+7+12
4+17.83+7+12
40.83/42
40.83/42*14
14
(11.25+5)/(25.5 + 10.25 - 14)
365*0.6666
365*0.6666 - 75.89
5/6 * 2
5/6 * 2 + 75.89
365*0.6666 -77.55667
365*0.6666 -77.55667 - 6 - 13 - 1
145.7523/2
15*3
11*5
8/12*14
4+15.33+5.5+12
(4+15.33+5.5+12)
(4+15.33+5.5+12)/(4+19+7+12)
(4+19+7+12)
(4+15.33+5.5+12)/(4+19+7+12)*14
2.5+17.5+12
32/42
32/42 * 14
4+12+6.5+12
(4+12+6.5+12)/42 * 14
5/6*2
5/6*2 + 0.25
5/6*2 + 0.5
2577.77/12
15/20
15/20*6
300 - 4*50
300 - 4*40
4.5/12*14
9+9+7+9
33.5/34 * 14
32/34 * 14
32/34*14
7+8.5+7+7
(7+8.5+7+7)/34 * 14
(7+5.5+5.5+8.5)/34 * 14
(7+5.5+5.5+8.5)/(9+7+9+9) * 14
9+7+9+9
(14.25+7.25)/(24.75+10.25-9)
(16.5+7.75)/(24.75+10.25)
(16.5+7.75)/(24.75+10.25)*6
(5.25+5.5)/(22.5+10.5)
(5.25+5.5)/(22.5+10.5)*6
(9.75+5.5)/(24.7+10.25-5)*6
(9.75+5.5)/(24.7+10.25-5)
3.98/6
(9.75+5.5)/(24.7+10.25-10)
(9.75+5.5)/(24.7+10.25-10)*6
5/6*2
1.83-5/6*2
1.83-4/6*2
5/6*2 + 0.5
4/6*2 + 0.5
4/6*2
4/6 + 0.5
4/6*2 + 0.5
33/34 * 14
17.5*4
24*4 + 1.75*4
library(dplyr)
library(plyr)
600*.22
library(Mage)
??prepDataTransitionMatrix
??projection.matrix
1/0.167
0.167*3
library(purrr)
?map
setwd('/Users/KSauby/Documents/Projects/Dissertation')
library(ProjectTemplate)#
load.project()#
#
# load GTMNERR#
#
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis')#
load.project()#
#
# load ACSampling#
#
setwd('/Users/KSauby/Documents/Projects/ACSampling_project')#
load.project()#
#
# load marsico project#
#
setwd('/Users/KSauby/Documents/Projects/marsico-time-series')#
load.project()#
Plot.Info <- Plot.Surveys %>% #
	group_by(Tag_Number) %>%#
	summarise(#
		Pusilla_presence = mysum2(Pusilla),#
		Stricta_presence = mysum2(Stricta),#
		Cactus_presence = mysum2(c(Pusilla,Stricta))#
	) %>%#
	merge(Plot.Info, by="Tag_Number")#
#
# --------------------------------------------------------------------------- ##
setwd("/Users/KSauby/Documents/Projects/GTMNERR_analysis")#
cache("Plot.Info")#
cache("Plot.Surveys")
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/Manuscript/Demography/population_modeling_files/2014_2015')
# stages:#
# 	size 1#
# 	size 2#
# 	size 3:6#
#	size 7+#
SizeClass 		= c(0:2,6,140)#
TransitionYear 	= 2014#
#
cut(1:20, SizeClass)#
# ---------------------------------------------------------------------------- ##
# create lists of data#
ldf <- list(#
	Plant.Surveys.TM.largest.parent,#
	Plant.Surveys.TM.random.parent,#
	Plant.Surveys.TM.random.largest.parent#
)#
cldf <- list(#
	clonal_reproduction_info_for_transition_matrix.largest.parent,#
	clonal_reproduction_info_for_transition_matrix.random.parent,#
	clonal_reproduction_info_for_transition_matrix.random.largest.parent#
)#
# ---------------------------------------------------------------------------- ##
# ALL PLANT DATA: add new columns, filter out mothpresence = 1#
ldf %<>%#
	map(#
		~ mutate(#
			., #
			allYears 	= TransitionYear, #
			Year 		= FecundityYear#
		)#
	) %>%#
	map(#
		~ filter(#
			.,#
			MothPlantPres == 1#
		)#
	)#
# CLONE DATA: add plant info, filter out mothpresence = 1#
cldf %<>%#
	map(#
		~ merge(#
			., #
			Plant.Info.Analysis, #
			by.x="Parent.ID",#
			by.y="PlantID"#
		)#
	) %>%#
	map(#
		~ filter(#
			.,#
			MothPlantPres == 1#
		)#
	)#
#
if (length(ldf) != length(cldf)) {#
	stop(paste("ldf and cldf are of different lengths"))#
}#
# ---------------------------------------------------------------------------- ##
A <- list()#
for (i in 1:length(ldf)) {#
	A[[i]] <- prepDataTransitionMatrix(#
		ldf[[i]], #
		cldf[[i]], #
		SizeClass, #
		TransitionYear#
	)#
}#
B <- list()#
for (i in 1:length(ldf)) {#
	B[[i]] <- analyzeMatrixPopModels(#
		trans_data = A[[i]],#
		SizeClass = SizeClass,#
		TransitionYear = TransitionYear,#
		SeedSurvival = SeedSurvival,#
		SeedBankSize = SeedBankSize,#
		SeedsPerFruit = SeedsPerFruit,#
		n.iter = n.iter#
	)#
}
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/Manuscript/Demography/population_modeling_files')
SeedSurvival 	= c(0.001, 0.005, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, #
					0.9, 0.95, 0.99)#
SeedBankSize	= c(10,100,1000,10000,100000,1000000)#
SeedsPerFruit 	= 49.44#
n.iter			= 1000
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/Manuscript/Demography/population_modeling_files/2014_2015')
# stages:#
# 	size 1#
# 	size 2#
# 	size 3:6#
#	size 7+#
SizeClass 		= c(0:2,6,140)#
TransitionYear 	= 2014#
#
cut(1:20, SizeClass)#
# ---------------------------------------------------------------------------- ##
# create lists of data#
ldf <- list(#
	Plant.Surveys.TM.largest.parent,#
	Plant.Surveys.TM.random.parent,#
	Plant.Surveys.TM.random.largest.parent#
)#
cldf <- list(#
	clonal_reproduction_info_for_transition_matrix.largest.parent,#
	clonal_reproduction_info_for_transition_matrix.random.parent,#
	clonal_reproduction_info_for_transition_matrix.random.largest.parent#
)#
# ---------------------------------------------------------------------------- ##
# ALL PLANT DATA: add new columns, filter out mothpresence = 1#
ldf %<>%#
	map(#
		~ mutate(#
			., #
			allYears 	= TransitionYear, #
			Year 		= FecundityYear#
		)#
	) %>%#
	map(#
		~ filter(#
			.,#
			MothPlantPres == 1#
		)#
	)#
# CLONE DATA: add plant info, filter out mothpresence = 1#
cldf %<>%#
	map(#
		~ merge(#
			., #
			Plant.Info.Analysis, #
			by.x="Parent.ID",#
			by.y="PlantID"#
		)#
	) %>%#
	map(#
		~ filter(#
			.,#
			MothPlantPres == 1#
		)#
	)#
#
if (length(ldf) != length(cldf)) {#
	stop(paste("ldf and cldf are of different lengths"))#
}#
# ---------------------------------------------------------------------------- ##
A <- list()#
for (i in 1:length(ldf)) {#
	A[[i]] <- prepDataTransitionMatrix(#
		ldf[[i]], #
		cldf[[i]], #
		SizeClass, #
		TransitionYear#
	)#
}#
B <- list()#
for (i in 1:length(ldf)) {#
	B[[i]] <- analyzeMatrixPopModels(#
		trans_data = A[[i]],#
		SizeClass = SizeClass,#
		TransitionYear = TransitionYear,#
		SeedSurvival = SeedSurvival,#
		SeedBankSize = SeedBankSize,#
		SeedsPerFruit = SeedsPerFruit,#
		n.iter = n.iter#
	)#
}
str(B)
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/Manuscript/Demography/population_modeling_files/2014_2015')
# stages:#
# 	size 1#
# 	size 2#
# 	size 3:6#
#	size 7+#
SizeClass 		= c(0:2,6,140)#
TransitionYear 	= 2014#
#
cut(1:20, SizeClass)#
# ---------------------------------------------------------------------------- ##
# create lists of data#
ldf <- list(#
	Plant.Surveys.TM.largest.parent,#
	Plant.Surveys.TM.random.parent,#
	Plant.Surveys.TM.random.largest.parent#
)#
cldf <- list(#
	clonal_reproduction_info_for_transition_matrix.largest.parent,#
	clonal_reproduction_info_for_transition_matrix.random.parent,#
	clonal_reproduction_info_for_transition_matrix.random.largest.parent#
)#
# ---------------------------------------------------------------------------- ##
# ALL PLANT DATA: add new columns, filter out mothpresence = 1#
ldf %<>%#
	map(#
		~ mutate(#
			., #
			allYears 	= TransitionYear, #
			Year 		= FecundityYear#
		)#
	) %>%#
	map(#
		~ filter(#
			.,#
			MothPlantPres == 1#
		)#
	)#
# CLONE DATA: add plant info, filter out mothpresence = 1#
cldf %<>%#
	map(#
		~ merge(#
			., #
			Plant.Info.Analysis, #
			by.x="Parent.ID",#
			by.y="PlantID"#
		)#
	) %>%#
	map(#
		~ filter(#
			.,#
			MothPlantPres == 1#
		)#
	)#
#
if (length(ldf) != length(cldf)) {#
	stop(paste("ldf and cldf are of different lengths"))#
}#
# ---------------------------------------------------------------------------- ##
# prep data transition matrices, then analyze#
A <- list()#
for (i in 1:length(ldf)) {#
	A[[i]] <- prepDataTransitionMatrix(#
		ldf[[i]], #
		cldf[[i]], #
		SizeClass, #
		TransitionYear#
	)#
}#
B <- list()#
for (i in 1:length(ldf)) {#
	B[[i]] <- analyzeMatrixPopModels(#
		trans_data = A[[i]],#
		SizeClass = SizeClass,#
		TransitionYear = TransitionYear,#
		SeedSurvival = SeedSurvival,#
		SeedBankSize = SeedBankSize,#
		SeedsPerFruit = SeedsPerFruit,#
		n.iter = n.iter#
	)#
}#
# ---------------------------------------------------------------------------- ##
B %<>% map(#
	~ mutate(#
		., #
	 	N.Stages = "4 Size Classes =\n1,2,3-6,7+",#
	 	`Moth Evidence` = "Moth Evidence Present"#
	)#
)#
# ---------------------------------------------------------------------------- ##
mod.4.w.moth.2014.largest.parent.res <- B[[1]] %>% mutate(#
	`Parent Assignment` = "largest plant\nchosen as parent"#
)#
mod.4.w.moth.2014.random.parent.res <- B[[2]] %>% mutate(#
	`Parent Assignment` = "random plant\nchosen as parent"#
)#
mod.4.w.moth.2014.rand.large.parent.res <- B[[3]] %>% mutate(#
	`Parent Assignment` = "random plant (weighted by size)\nchosen as parent"#
)
str(mod.4.w.moth.2014.rand.large.parent.res)
is.list(Plant.Surveys.TM.largest.parent)
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/Manuscript/Demography/population_modeling_files/2014_2015/LTRE')
# stages:#
# 	size 1#
# 	size 2#
# 	size 3:6#
#	size 7+#
SizeClass 		= c(0:2,6,140)#
TransitionYear 	= 2014#
#
cut(1:20, SizeClass)
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/Manuscript/Demography/population_modeling_files/2014_2015')
# create lists of data#
ldf <- list(#
	Plant.Surveys.TM.largest.parent,#
	Plant.Surveys.TM.random.parent,#
	Plant.Surveys.TM.random.largest.parent#
)#
cldf <- list(#
	clonal_reproduction_info_for_transition_matrix.largest.parent,#
	clonal_reproduction_info_for_transition_matrix.random.parent,#
	clonal_reproduction_info_for_transition_matrix.random.largest.parent#
)#
# ---------------------------------------------------------------------------- ##
# ALL PLANT DATA: add new columns#
ldf %<>%#
	map(#
		~ mutate(#
			., #
			allYears 	= TransitionYear, #
			Year 		= FecundityYear#
		)#
	)#
# CLONE DATA: add plant info#
cldf %<>%#
	map(#
		~ merge(#
			., #
			Plant.Info.Analysis, #
			by.x="Parent.ID",#
			by.y="PlantID"#
		)#
	)#
if (length(ldf) != length(cldf)) {#
	stop(paste("ldf and cldf are of different lengths"))#
}
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/Manuscript/Demography/population_modeling_files/2014_2015/LTRE')
# ---------------------------------------------------------------------------- ##
# create lists of data#
ldf <- list(#
	Plant.Surveys.TM.largest.parent,#
	Plant.Surveys.TM.random.parent,#
	Plant.Surveys.TM.random.largest.parent#
)#
cldf <- list(#
	clonal_reproduction_info_for_transition_matrix.largest.parent,#
	clonal_reproduction_info_for_transition_matrix.random.parent,#
	clonal_reproduction_info_for_transition_matrix.random.largest.parent#
)#
# ---------------------------------------------------------------------------- ##
# ALL PLANT DATA: add new columns, filter out mothpresence = 1#
ldf %<>%#
	map(#
		~ mutate(#
			., #
			allYears 	= TransitionYear, #
			Year 		= FecundityYear#
		)#
	) %>%#
	map(#
		~ filter(#
			.,#
			MothPlantPres == 1#
		)#
	)#
# CLONE DATA: add plant info, filter out mothpresence = 1#
cldf %<>%#
	map(#
		~ merge(#
			., #
			Plant.Info.Analysis, #
			by.x="Parent.ID",#
			by.y="PlantID"#
		)#
	) %>%#
	map(#
		~ filter(#
			.,#
			MothPlantPres == 1#
		)#
	)#
#
if (length(ldf) != length(cldf)) {#
	stop(paste("ldf and cldf are of different lengths"))#
}#
# ---------------------------------------------------------------------------- ##
# prep data transition matrices, then analyze#
A <- list()#
for (i in 1:length(ldf)) {#
	A[[i]] <- prepDataTransitionMatrix(#
		ldf[[i]], #
		cldf[[i]], #
		SizeClass, #
		TransitionYear#
	)#
}#
B <- list()#
for (i in 1:length(ldf)) {#
	B[[i]] <- analyzeMatrixPopModels(#
		trans_data = A[[i]],#
		SizeClass = SizeClass,#
		TransitionYear = TransitionYear,#
		SeedSurvival = SeedSurvival,#
		SeedBankSize = SeedBankSize,#
		SeedsPerFruit = SeedsPerFruit,#
		n.iter = n.iter#
	)#
}#
# ---------------------------------------------------------------------------- ##
B %<>% map(#
	~ mutate(#
		., #
	 	N.Stages = "4 Size Classes =\n1,2,3-6,7+",#
	 	`Moth Evidence` = "Moth Evidence Present"#
	)#
)#
# ---------------------------------------------------------------------------- ##
mod.4.w.moth.2014.largest.parent.res <- B[[1]] %>% mutate(#
	`Parent Assignment` = "largest plant\nchosen as parent"#
)#
mod.4.w.moth.2014.random.parent.res <- B[[2]] %>% mutate(#
	`Parent Assignment` = "random plant\nchosen as parent"#
)#
mod.4.w.moth.2014.rand.large.parent.res <- B[[3]] %>% mutate(#
	`Parent Assignment` = "random plant (weighted by size)\nchosen as parent"#
)
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/Manuscript/Demography/population_modeling_files/2014_2015/LTRE')
# ---------------------------------------------------------------------------- ##
# create lists of data#
ldf <- list(#
	Plant.Surveys.TM.largest.parent,#
	Plant.Surveys.TM.random.parent,#
	Plant.Surveys.TM.random.largest.parent#
)#
cldf <- list(#
	clonal_reproduction_info_for_transition_matrix.largest.parent,#
	clonal_reproduction_info_for_transition_matrix.random.parent,#
	clonal_reproduction_info_for_transition_matrix.random.largest.parent#
)#
# ---------------------------------------------------------------------------- ##
# ALL PLANT DATA: add new columns, filter out mothpresence = 0#
ldf %<>%#
	map(#
		~ mutate(#
			., #
			allYears 	= TransitionYear, #
			Year 		= FecundityYear#
		)#
	) %>%#
	map(#
		~ filter(#
			.,#
			MothPlantPres == 0#
		)#
	)#
# CLONE DATA: add plant info, filter out mothpresence = 0#
cldf %<>%#
	map(#
		~ merge(#
			., #
			Plant.Info.Analysis, #
			by.x="Parent.ID",#
			by.y="PlantID"#
		)#
	) %>%#
	map(#
		~ filter(#
			.,#
			MothPlantPres == 0#
		)#
	)#
#
if (length(ldf) != length(cldf)) {#
	stop(paste("ldf and cldf are of different lengths"))#
}#
# ---------------------------------------------------------------------------- ##
# prep data transition matrices, then analyze#
A <- list()#
for (i in 1:length(ldf)) {#
	A[[i]] <- prepDataTransitionMatrix(#
		ldf[[i]], #
		cldf[[i]], #
		SizeClass, #
		TransitionYear#
	)#
}#
B <- list()#
for (i in 1:length(ldf)) {#
	B[[i]] <- analyzeMatrixPopModels(#
		trans_data = A[[i]],#
		SizeClass = SizeClass,#
		TransitionYear = TransitionYear,#
		SeedSurvival = SeedSurvival,#
		SeedBankSize = SeedBankSize,#
		SeedsPerFruit = SeedsPerFruit,#
		n.iter = n.iter#
	)#
}#
# ---------------------------------------------------------------------------- ##
B %<>% map(#
	~ mutate(#
		., #
	 	N.Stages = "4 Size Classes =\n1,2,3-6,7+",#
	 	`Moth Evidence` = "Moth Evidence Absent"#
	)#
)#
# ---------------------------------------------------------------------------- ##
mod.4.wo.moth.2014.largest.parent.res 		<- B[[1]] %>% mutate(#
	`Parent Assignment` = "largest plant\nchosen as parent"#
)#
mod.4.wo.moth.2014.random.parent.res 		<- B[[2]] %>% mutate(#
	`Parent Assignment` = "random plant\nchosen as parent"#
)#
mod.4.wo.moth.2014.rand.large.parent.res 	<- B[[3]] %>% mutate(#
	`Parent Assignment` = "random plant (weighted by size)\nchosen as parent"#
)
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/Manuscript/Demography/population_modeling_files/processing')
MPMresults.moth <- rbind.fill(#
	mod.4.w.moth.2014.largest.parent.res,#
	mod.4.w.moth.2014.random.parent.res,#
	mod.4.w.moth.2014.rand.large.parent.res,#
	mod.4.wo.moth.2014.largest.parent.res,#
	mod.4.wo.moth.2014.random.parent.res,#
	mod.4.wo.moth.2014.rand.large.parent.res#
)#
#
sensitivities.results.moth <- MPMresults.moth %>% dplyr::select(#
	SeedBankSize,#
	SeedsPerFruit,#
	SeedSurvival,#
	`Parent Assignment`,#
	N.Stages,#
	`Moth Evidence`,#
	starts_with("sensitivities")#
) %>% #
	reshape2::melt(id.vars=c(#
		"SeedBankSize",#
		"SeedsPerFruit",#
		"SeedSurvival",#
		"Parent Assignment",	#
		"N.Stages",#
		"Moth Evidence"#
	)) %>%#
	rowwise() %>%#
	mutate(variable = gsub(pattern="sensitivities.?","",variable))
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/Manuscript/Demography/population_modeling_files/processing')
elasticities.results.moth <- MPMresults.moth %>% dplyr::select(#
	SeedBankSize,#
	SeedsPerFruit,#
	SeedSurvival,#
	`Parent Assignment`,#
	N.Stages,#
	`Moth Evidence`,#
	starts_with("elasticities")#
) %>% #
	reshape2::melt(id.vars=c(#
		"SeedBankSize",#
		"SeedsPerFruit",#
		"SeedSurvival",#
		"Parent Assignment",	#
		"N.Stages",#
		"Moth Evidence"#
	)) %>%#
	rowwise() %>%#
	mutate(#
		variable = gsub(pattern="elasticities.?","",variable),#
		variable = gsub(pattern="[.]","->",variable)#
	)#
##### elasticities#
#
elasticities.results.moth$variable %<>% factor(levels=c(#
"Seed->Seed","Seed->Seedling","Seed->1","Seed->2",  #
"Seed->3","Seed->4","Seedling->Seed","Seedling->Seedling",#
"Seedling->1","Seedling->2","Seedling->3","Seedling->4",  #
"1->Seed","1->Seedling","1->1","1->2",  #
"1->4","2->Seed","2->Seedling",  #
"2->1","2->4",  #
"3->Seed","3->Seedling","3->1",#
"3->4","4->Seed","4->Seedling",  #
"4->1","4->2","4->3",#
"2->2",#
"1->3",#
"3->3",#
"2->3",#
"3->2",#
"4->4"#
))#
levels(elasticities.results.moth$variable) <- c(#
rep("Other Transitions", 32),#
"3->3",#
"2->3",#
"3->2",#
"4->4"#
)
setwd('/Users/KSauby/Documents/Projects')
setwd("./GTMNERRproc")#
#setwd("./dataproc")#
#setwd("./modresproc")#
#setwd("./unmarked")#
#setwd("./RPresence")#
#devtools::test()#
devtools::document()#
devtools::install()
