22+60+78+80+88+98
22+38+18+2+8+10
239/785
(239+53)/785
.492+.139
.412+.166+.002
.412/.58
.166/.58
.412*.58
.71*.58
98-54
22+49+43+33+36+44
60-11
78-26
80-35
88-47
98-52
22+49+52+45+41+46
library(RMark)
?test_ddl
data(dipper)    dipper.processed=process.data(dipper,groups=("sex"))    release.gof(dipper.processed)
4+19+7+12
4+17.83+7+12
40.83/42
40.83/42*14
14
(11.25+5)/(25.5 + 10.25 - 14)
365*0.6666
365*0.6666 - 75.89
5/6 * 2
5/6 * 2 + 75.89
365*0.6666 -77.55667
365*0.6666 -77.55667 - 6 - 13 - 1
145.7523/2
15*3
11*5
8/12*14
4+15.33+5.5+12
(4+15.33+5.5+12)
(4+15.33+5.5+12)/(4+19+7+12)
(4+19+7+12)
(4+15.33+5.5+12)/(4+19+7+12)*14
2.5+17.5+12
32/42
32/42 * 14
4+12+6.5+12
(4+12+6.5+12)/42 * 14
5/6*2
5/6*2 + 0.25
5/6*2 + 0.5
2577.77/12
15/20
15/20*6
300 - 4*50
300 - 4*40
4.5/12*14
9+9+7+9
33.5/34 * 14
32/34 * 14
32/34*14
7+8.5+7+7
(7+8.5+7+7)/34 * 14
(7+5.5+5.5+8.5)/34 * 14
(7+5.5+5.5+8.5)/(9+7+9+9) * 14
9+7+9+9
(14.25+7.25)/(24.75+10.25-9)
(16.5+7.75)/(24.75+10.25)
(16.5+7.75)/(24.75+10.25)*6
(5.25+5.5)/(22.5+10.5)
(5.25+5.5)/(22.5+10.5)*6
(9.75+5.5)/(24.7+10.25-5)*6
(9.75+5.5)/(24.7+10.25-5)
3.98/6
(9.75+5.5)/(24.7+10.25-10)
(9.75+5.5)/(24.7+10.25-10)*6
5/6*2
1.83-5/6*2
1.83-4/6*2
5/6*2 + 0.5
4/6*2 + 0.5
4/6*2
4/6 + 0.5
4/6*2 + 0.5
33/34 * 14
17.5*4
24*4 + 1.75*4
library(dplyr)
library(plyr)
600*.22
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis')
library(ProjectTemplate)#
#
# when working on a Windows computer#
# setwd("C:/Users/KSauby/Dropbox/gradschool/Research/Projects/sampling")#
#
# load project#
load.project()
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
D_Plot_Surveys$Date %<>% as.Date("%m/%d/%Y") # Demographic Plot Surveys#
Plant_Surveys %<>% processPlantSurveys(Plant_Info) # Plant Surveys#
Plant_Surveys %<>% fixInconsistentDeadMissingRecords#
#
placeholder <- Plant_Info#
#
Plant_Info %<>% processPlantInfo(Plot_Info)#
# saved here#
# write.csv(Plant_Surveys, "../data/Plant_Surveys_processed_26jun17.csv")#
# write.csv(Plant_Info, "../data/Plant_Info_processed_26jun17.csv")#
Plant_Surveys$Date %<>% as.Date#
#
Plant_Surveys <- Plant_Info %>%#
	group_by(PlantID) %>%#
	dplyr::summarise(#
		N.PlotPlantIDs = length(unique(PlotPlantID))#
	) %>%#
	merge(Plant_Surveys, by="PlantID")#
Plant_Surveys_by_Plant <- Plant_Surveys %>% #
	processSurveysMergedbyPlant#
Plant_Surveys_by_Plant %>% filter(AllSurveyed==F) %>% write.csv("incompletesurveys.csv")#
#
Plant_Surveys %>% filter(N.PlotPlantIDs > 1) %>% filter(Dead==1 | Missing == 1) %>% write.csv("deadmissing.csv")#
#
h <- function(w) if( any( grepl( "no non-missing arguments to max", w) ) ) invokeRestart( "muffleWarning" )#
Plant_Surveys_by_Plant <- withCallingHandlers(#
	createPlantInsectPresence(Plant_Surveys_by_Plant),#
	warning = h#
)#
#
# find and keep only first dead/missing observation#
temp <- Plant_Surveys_by_Plant %>% findFirstDeadMissingObservation#
# create Fecundity and RGR dataset#
Plant_Surveys_by_Year <- createPlantSurveysbyYear(Plant_Surveys_by_Plant)#
Plant_Info_Analysis <- createPlantInfobyPlant(Plant_Info, Plant_Surveys_by_Year)
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
# ---------------------------------------------------------- Shorten names#
Plot_Info <- OccupancySRSWOR.Plot.Surveys.Info#
Plot_Surveys <- OccupancySRSWOR.Plot.Surveys#
Plant_Surveys <- Demographic.Plant.Surveys#
# Plant_Surveys <- Plant.Surveys.processed.26jun17#
Plant_Info <- Demographic.Plant.Info#
# Plant_Info <- Plant.Info.processed.26jun17#
Plant_Surveys_All <- Demographic.Plant.Surveys#
Plant_Info_All <- Demographic.Plant.Info#
D_Plot_Surveys <- Demographic.Plot.Surveys#
Original_Plant_Data <- Original.Demographic.Plant.Data#
Seed_Abundance <- Seed.Abundance#
Seed_Abundance_Surveys <- Seed.Abundance.Surveys#
GIS_data_updated <- GIS.data.updated
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
D_Plot_Surveys$Date %<>% as.Date("%m/%d/%Y") # Demographic Plot Surveys#
Plant_Surveys %<>% processPlantSurveys(Plant_Info) # Plant Surveys#
Plant_Surveys %<>% fixInconsistentDeadMissingRecords#
#
placeholder <- Plant_Info#
#
Plant_Info %<>% processPlantInfo(Plot_Info)#
# saved here#
# write.csv(Plant_Surveys, "../data/Plant_Surveys_processed_26jun17.csv")#
# write.csv(Plant_Info, "../data/Plant_Info_processed_26jun17.csv")#
Plant_Surveys$Date %<>% as.Date#
#
Plant_Surveys <- Plant_Info %>%#
	group_by(PlantID) %>%#
	dplyr::summarise(#
		N.PlotPlantIDs = length(unique(PlotPlantID))#
	) %>%#
	merge(Plant_Surveys, by="PlantID")#
Plant_Surveys_by_Plant <- Plant_Surveys %>% #
	processSurveysMergedbyPlant#
Plant_Surveys_by_Plant %>% filter(AllSurveyed==F) %>% write.csv("incompletesurveys.csv")#
#
Plant_Surveys %>% filter(N.PlotPlantIDs > 1) %>% filter(Dead==1 | Missing == 1) %>% write.csv("deadmissing.csv")#
#
h <- function(w) if( any( grepl( "no non-missing arguments to max", w) ) ) invokeRestart( "muffleWarning" )#
Plant_Surveys_by_Plant <- withCallingHandlers(#
	createPlantInsectPresence(Plant_Surveys_by_Plant),#
	warning = h#
)#
#
# find and keep only first dead/missing observation#
temp <- Plant_Surveys_by_Plant %>% findFirstDeadMissingObservation#
# create Fecundity and RGR dataset#
Plant_Surveys_by_Year <- createPlantSurveysbyYear(Plant_Surveys_by_Plant)#
Plant_Info_Analysis <- createPlantInfobyPlant(Plant_Info, Plant_Surveys_by_Year)
setwd('/Users/KSauby/Documents/Projects/GTMNERRproc/R')
Plant_Info_Analysis <- Plant_Info %>%#
		mutate(#
			Parent = replace(#
				Parent,#
				which(Parent=="Unkn"),#
				NA#
			)#
		) %>%#
		renameSpecies#
	Plant_Info_Analysis %<>%#
		arrange(First.Survey.Date.Alive) %>%#
		group_by(PlantID) %>%#
		dplyr::summarise(#
			Island 				= Island[1],#
			Network 			= Network[1],#
			# make sure they are all the same species#
			Species 			= Species[1],#
			# fix/verify#
			RecruitmentMode 	= paste(Unique(RecruitmentMode), collapse=","),#
			Parent 				= paste(Unique(Parent), collapse=","),#
			First.Survey.Date.Alive 	= First.Survey.Date.Alive[1]#
		) %>%#
		filter(!is.na(Network))#
	# save to figure out if some plants were lost during processing#
	temp1 <- Plant_Info_Analysis$PlantID#
	# Parent#
	Plant_Info_Analysis %<>% mutate(#
		Parent = replace(#
			Parent,#
			which(is.na(Parent)),#
			"Unknown"#
		)#
	)	#
	Plant_Info_Analysis$Parent %<>% NA_Function#
	Plant_Info_Analysis$Parent[which(Plant_Info_Analysis$Parent=="")] <- NA
setwd('/Users/KSauby/Documents/Projects/GTMNERRproc/R')
Plant_Info_Analysis %<>% arrange(desc(Island), desc(Parent))#
	# summarise insect presence on plants and in networks#
	# network_summary <- Plant_Surveys_by_Year %>%#
	#	group_by(Network) %>%#
	#	dplyr::summarise(#
	#		OldMothNetworkPres 	= Maximum(Old_Moth_Evidence_t),#
	#		MENetworkPres 		= Maximum(ME_t),#
	#		CANetworkPres 		= Maximum(CA_t),#
	#		MothNetworkPres 	= Maximum(Moth_Evidence_t)#
	#	)#
	Plant_summary <- Plant_Surveys_by_Year %>%#
		group_by(PlantID) %>%#
		dplyr::summarise(#
			OldMothPlantPres 	= Maximum(Old_Moth_Evidence_t),#
			MEPlantPres 		= Maximum(ME_t),#
			CAPlantPres 		= Maximum(CA_t),#
			MothPlantPres 		= Maximum(Moth_Evidence_t)#
		)#
	Plant_Info_Analysis %<>% #
		# merge(network_summary, by="Network") %>%#
		merge(Plant_summary, by="PlantID")#
	# get size at first survey#
	First_Size <- Plant_Surveys_by_Plant %>%#
		arrange(Date) %>%#
		group_by(PlantID) %>%#
		dplyr::summarise(#
			First.Survey.Date 		= Date[1],#
			minFecundityYear 		= Minimum(FecundityYear),#
			First_Size 				= Size_t[!(is.na(Size_t))][1],#
			First.Measurement.Date 	= Date[!(is.na(Size_t))][1],#
			min.Size 				= Minimum(Size_t),#
			max.Size 				= Maximum(Size_t),#
			LastDateAlive =#
				Maximum(Date[which(Dead==0 & Missing==0)]) %>% as.Date,#
			FirstDeadObservation	= Date[which(Dead==1)][1],#
			FirstMissingObservation	= Date[which(Missing==1)][1],#
			FirstDeadMissingObservation = Minimum(#
				c(#
					FirstDeadObservation,#
					FirstMissingObservation#
				)#
			) %>% as.Date,#
			# assume alive day before first observed: First.Survey.Date - 1#
			# also alive day of last survey: LastDateAlive + 1#
			minDaysAlive	= #
				(LastDateAlive + 1) - (First.Survey.Date - 1),			#
			# assume last day alive was day before death observation: FirstDeadMissingObservation - 1#
			# assume alive day before first observed: First.Survey.Date - 1#
			# the 1s cancel out#
			maxDaysAlive	= #
				(FirstDeadMissingObservation - 1) -	(First.Survey.Date - 1)#
		)
setwd('/Users/KSauby/Documents/Projects/GTMNERRproc/R')
Plant_Info_Analysis %<>% #
		merge(First_Size, by=c("PlantID"))#
	# WARNINGS	#
	temp <- Plant_Info_Analysis %>% #
		filter(grepl(",", RecruitmentMode)==TRUE)#
	if (dim(temp)[1] > 0) {#
		write.csv(temp, "InconsistentRecruitmentModePlantInfo.csv")#
		warning(paste(#
			"Inconsistent recruitment mode recorded for at least one plant spanning multiple plots. These plant info records have been written to csv."#
		))#
	}	#
	temp <- Plant_Info_Analysis %>% #
		filter(grepl(",", Parent)==TRUE)#
	if (dim(temp)[1] > 0) {#
		write.csv(temp, "InconsistentParentPlantInfo.csv")#
		warning(paste(#
			"Inconsistent Parent recorded for at least one plant spanning multiple plots. These plant info records have been written to csv."#
		))#
	}
?as.DAte
?as.Date
setwd('/Users/KSauby/Documents/Projects')
setwd("./GTMNERRproc")#
#setwd("./dataproc")#
#setwd("./modresproc")#
#setwd("./unmarked")#
#setwd("./RPresence")#
#devtools::test()#
devtools::document()#
devtools::install()
library(GTMNERRproc)
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
Plant_Info_Analysis <- createPlantInfobyPlant(Plant_Info, Plant_Surveys_by_Year)
head(Plant_Info_Analysis)
Plant_Info_Analysis$LastDateAlive %>% unique
Plant_Info_Analysis$FirstDeadMissingObservation %>% unique
setwd('/Users/KSauby/Documents/Projects/GTMNERRproc/R')
#' Create Plant Info by Plant#
#'#
#' @description Create variables giving evidence of moths and insects, including moth presence or damage.#
#' @param Plant_Surveys_by_Plant Plant Survey Dataset#
#'#
#' @export#
#' @importFrom dataproc Unique#
#
createPlantInfobyPlant <- function(Plant_Info, Plant_Surveys_by_Year) {#
	# one record per plant#
	# 2849 records#
	Plant_Info_Analysis <- Plant_Info %>%#
		mutate(#
			Parent = replace(#
				Parent,#
				which(Parent=="Unkn"),#
				NA#
			)#
		) %>%#
		renameSpecies#
	Plant_Info_Analysis %<>%#
		arrange(First.Survey.Date.Alive) %>%#
		group_by(PlantID) %>%#
		dplyr::summarise(#
			Island 				= Island[1],#
			Network 			= Network[1],#
			# make sure they are all the same species#
			Species 			= Species[1],#
			# fix/verify#
			RecruitmentMode 	= paste(Unique(RecruitmentMode), collapse=","),#
			Parent 				= paste(Unique(Parent), collapse=","),#
			First.Survey.Date.Alive 	= First.Survey.Date.Alive[1]#
		) %>%#
		filter(!is.na(Network))#
	# save to figure out if some plants were lost during processing#
	temp1 <- Plant_Info_Analysis$PlantID#
	# Parent#
	Plant_Info_Analysis %<>% mutate(#
		Parent = replace(#
			Parent,#
			which(is.na(Parent)),#
			"Unknown"#
		)#
	)	#
	Plant_Info_Analysis$Parent %<>% NA_Function#
	Plant_Info_Analysis$Parent[which(Plant_Info_Analysis$Parent=="")] <- NA#
	# order#
	Plant_Info_Analysis %<>% arrange(desc(Island), desc(Parent))#
	# summarise insect presence on plants and in networks#
	# network_summary <- Plant_Surveys_by_Year %>%#
	#	group_by(Network) %>%#
	#	dplyr::summarise(#
	#		OldMothNetworkPres 	= Maximum(Old_Moth_Evidence_t),#
	#		MENetworkPres 		= Maximum(ME_t),#
	#		CANetworkPres 		= Maximum(CA_t),#
	#		MothNetworkPres 	= Maximum(Moth_Evidence_t)#
	#	)#
	Plant_summary <- Plant_Surveys_by_Year %>%#
		group_by(PlantID) %>%#
		dplyr::summarise(#
			OldMothPlantPres 	= Maximum(Old_Moth_Evidence_t),#
			MEPlantPres 		= Maximum(ME_t),#
			CAPlantPres 		= Maximum(CA_t),#
			MothPlantPres 		= Maximum(Moth_Evidence_t)#
		)#
	Plant_Info_Analysis %<>% #
		# merge(network_summary, by="Network") %>%#
		merge(Plant_summary, by="PlantID")#
	# get size at first survey#
	First_Size <- Plant_Surveys_by_Plant %>%#
		arrange(Date) %>%#
		group_by(PlantID) %>%#
		dplyr::summarise(#
			First.Survey.Date 		= Date[1],#
			minFecundityYear 		= Minimum(FecundityYear),#
			First_Size 				= Size_t[!(is.na(Size_t))][1],#
			First.Measurement.Date 	= Date[!(is.na(Size_t))][1],#
			min.Size 				= Minimum(Size_t),#
			max.Size 				= Maximum(Size_t),#
			LastDateAlive =#
				Maximum(Date[which(Dead==0 & Missing==0)]) %>% as.Date(origin="1970-01-01"),#
			FirstDeadObservation	= Date[which(Dead==1)][1],#
			FirstMissingObservation	= Date[which(Missing==1)][1],#
			FirstDeadMissingObservation = Minimum(#
				c(#
					FirstDeadObservation,#
					FirstMissingObservation#
				)#
			) %>% as.Date(origin="1970-01-01"),#
			# assume alive day before first observed: First.Survey.Date - 1#
			# also alive day of last survey: LastDateAlive + 1#
			minDaysAlive	= #
				(LastDateAlive + 1) - (First.Survey.Date - 1),#
			# assume last day alive was day before death observation: FirstDeadMissingObservation - 1#
			# assume alive day before first observed: First.Survey.Date - 1#
			# the 1s cancel out#
			maxDaysAlive	= #
				(FirstDeadMissingObservation - 1) -	(First.Survey.Date - 1)#
		)#
		First_Size$minDaysAlive %<>% as.numeric %>%#
			Replace_NA_w_Period_Function#
		First_Size$maxDaysAlive %<>% as.numeric %>%#
			Replace_NA_w_Period_Function#
#
	Plant_Info_Analysis %<>% #
		merge(First_Size, by=c("PlantID"))#
	# WARNINGS	#
	temp <- Plant_Info_Analysis %>% #
		filter(grepl(",", RecruitmentMode)==TRUE)#
	if (dim(temp)[1] > 0) {#
		write.csv(temp, "InconsistentRecruitmentModePlantInfo.csv")#
		warning(paste(#
			"Inconsistent recruitment mode recorded for at least one plant spanning multiple plots. These plant info records have been written to csv."#
		))#
	}	#
	temp <- Plant_Info_Analysis %>% #
		filter(grepl(",", Parent)==TRUE)#
	if (dim(temp)[1] > 0) {#
		write.csv(temp, "InconsistentParentPlantInfo.csv")#
		warning(paste(#
			"Inconsistent Parent recorded for at least one plant spanning multiple plots. These plant info records have been written to csv."#
		))#
	}	#
	return(Plant_Info_Analysis)#
}
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
Plant_Info_Analysis <- createPlantInfobyPlant(Plant_Info, Plant_Surveys_by_Year)
head(Plant_Info_Analysis, n=20)
setwd('/Users/KSauby/Documents/Projects/GTMNERRproc/R')
#' Create Plant Info by Plant#
#'#
#' @description Create variables giving evidence of moths and insects, including moth presence or damage.#
#' @param Plant_Surveys_by_Plant Plant Survey Dataset#
#'#
#' @export#
#' @importFrom dataproc Unique#
#
createPlantInfobyPlant <- function(Plant_Info, Plant_Surveys_by_Year) {#
	# one record per plant#
	# 2849 records#
	Plant_Info_Analysis <- Plant_Info %>%#
		mutate(#
			Parent = replace(#
				Parent,#
				which(Parent=="Unkn"),#
				NA#
			)#
		) %>%#
		renameSpecies#
	Plant_Info_Analysis %<>%#
		arrange(First.Survey.Date.Alive) %>%#
		group_by(PlantID) %>%#
		dplyr::summarise(#
			Island 				= Island[1],#
			Network 			= Network[1],#
			# make sure they are all the same species#
			Species 			= Species[1],#
			# fix/verify#
			RecruitmentMode 	= paste(Unique(RecruitmentMode), collapse=","),#
			Parent 				= paste(Unique(Parent), collapse=","),#
			First.Survey.Date.Alive 	= First.Survey.Date.Alive[1]#
		) %>%#
		filter(!is.na(Network))#
	# save to figure out if some plants were lost during processing#
	temp1 <- Plant_Info_Analysis$PlantID#
	# Parent#
	Plant_Info_Analysis %<>% mutate(#
		Parent = replace(#
			Parent,#
			which(is.na(Parent)),#
			"Unknown"#
		)#
	)	#
	Plant_Info_Analysis$Parent %<>% NA_Function#
	Plant_Info_Analysis$Parent[which(Plant_Info_Analysis$Parent=="")] <- NA#
	# order#
	Plant_Info_Analysis %<>% arrange(desc(Island), desc(Parent))#
	# summarise insect presence on plants and in networks#
	# network_summary <- Plant_Surveys_by_Year %>%#
	#	group_by(Network) %>%#
	#	dplyr::summarise(#
	#		OldMothNetworkPres 	= Maximum(Old_Moth_Evidence_t),#
	#		MENetworkPres 		= Maximum(ME_t),#
	#		CANetworkPres 		= Maximum(CA_t),#
	#		MothNetworkPres 	= Maximum(Moth_Evidence_t)#
	#	)#
	Plant_summary <- Plant_Surveys_by_Year %>%#
		group_by(PlantID) %>%#
		dplyr::summarise(#
			OldMothPlantPres 	= Maximum(Old_Moth_Evidence_t),#
			MEPlantPres 		= Maximum(ME_t),#
			CAPlantPres 		= Maximum(CA_t),#
			MothPlantPres 		= Maximum(Moth_Evidence_t)#
		)#
	Plant_Info_Analysis %<>% #
		# merge(network_summary, by="Network") %>%#
		merge(Plant_summary, by="PlantID")#
	# get size at first survey#
	First_Size <- Plant_Surveys_by_Plant %>%#
		arrange(Date) %>%#
		group_by(PlantID) %>%#
		dplyr::summarise(#
			First.Survey.Date 		= Date[1],#
			minFecundityYear 		= Minimum(FecundityYear),#
			First_Size 				= Size_t[!(is.na(Size_t))][1],#
			First.Measurement.Date 	= Date[!(is.na(Size_t))][1],#
			min.Size 				= Minimum(Size_t),#
			max.Size 				= Maximum(Size_t),#
			LastDateAlive =#
				Maximum(Date[which(Dead==0 & Missing==0)]) %>% as.Date(origin="1970-01-01"),#
			FirstDeadObservation	= Date[which(Dead==1)][1],#
			FirstMissingObservation	= Date[which(Missing==1)][1],#
			FirstDeadMissingObservation = Minimum(#
				c(#
					FirstDeadObservation,#
					FirstMissingObservation#
				)#
			) %>% as.Date(origin="1970-01-01"),#
			# assume alive day before first observed: First.Survey.Date - 1#
			# also alive day of last survey: LastDateAlive + 1#
			minDaysAlive	= #
				(LastDateAlive + 1) - (First.Survey.Date - 1),#
			# assume last day alive was day before death observation: FirstDeadMissingObservation - 1#
			# assume alive day before first observed: First.Survey.Date - 1#
			# the 1s cancel out#
			maxDaysAlive	= #
				(FirstDeadMissingObservation - 1) -	(First.Survey.Date - 1)#
		)#
		First_Size$minDaysAlive %<>% as.numeric %<>%#
			Replace_NA_w_Period_Function#
		First_Size$maxDaysAlive %<>% as.numeric %<>%#
			Replace_NA_w_Period_Function#
#
	Plant_Info_Analysis %<>% #
		merge(First_Size, by=c("PlantID"))#
	# WARNINGS	#
	temp <- Plant_Info_Analysis %>% #
		filter(grepl(",", RecruitmentMode)==TRUE)#
	if (dim(temp)[1] > 0) {#
		write.csv(temp, "InconsistentRecruitmentModePlantInfo.csv")#
		warning(paste(#
			"Inconsistent recruitment mode recorded for at least one plant spanning multiple plots. These plant info records have been written to csv."#
		))#
	}	#
	temp <- Plant_Info_Analysis %>% #
		filter(grepl(",", Parent)==TRUE)#
	if (dim(temp)[1] > 0) {#
		write.csv(temp, "InconsistentParentPlantInfo.csv")#
		warning(paste(#
			"Inconsistent Parent recorded for at least one plant spanning multiple plots. These plant info records have been written to csv."#
		))#
	}	#
	return(Plant_Info_Analysis)#
}
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
Plant_Info_Analysis <- createPlantInfobyPlant(Plant_Info, Plant_Surveys_by_Year)
head(Plant_Info_Analysis, n=20)
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
#' Replace 0 with "No".#
#'#
#' @param x Vector of data.#
#'#
#' @export#
#
Replace_0_w_No_Function <- function(x){	#
	x[which(x == 0)] <- "No"#
	return(x)#
}#
#
#' Replace 1 with "Yes".#
#'#
#' @param x Vector of data.#
#'#
#' @export#
#
Replace_1_w_Yes_Function <- function(x){	#
	x[which(x == 1)] <- "Yes"#
	return(x)#
}#
#
#' Replace NA with a ".".#
#'#
#' @param x Vector of data.#
#' @description Replace NAs with no text so they are not printed on datasheets.#
#'#
#' @export#
#
Replace_NA_w_Period_Function <- function(x){#
	x[is.na(x) == "TRUE"] <- "."#
	return(x)#
}#
#
#' Replace NA with "".#
#'#
#' @param x Vector of data.#
#' @description Replace NAs with no text so they are not printed on datasheets.#
#'#
#' @export#
#
Replace_NA_w_Period_Function <- function(x){#
	x[is.na(x) == "TRUE"] <- ""#
	return(x)#
}#
#
#' Replace 0 with NA.#
#'#
#' @param x Vector of data.#
#'#
#' @export#
#
Zero_is_NA_Function <- function(x){	#
	x[which(x == 0)] <- NA#
	return(x)#
}#
#
#' Standardize "Yes" values.#
#'#
#' @param x Vector of data.#
#'#
#' @export#
#
Yes_Function <- function(x){	#
	x[which(#
		x == "Yes" | #
		x == "yes" |#
		x == "y" |#
		x == "Egg" | #
		x == "Larva" | #
		x == "Nymph"#
	)] <- "1"#
	return(x)#
}#
#
#' Replace values with NA.#
#'#
#' @param x Vector of data.#
#' @examples#
#' x = c(1,2,3,4," ", "Not Recorded")#
#' NA_Function(x)#
#'#
#' @export#
#
NA_Function <- function(x){	#
	x[which(#
		x == "Not Recorded" | #
		x == "not recorded" | #
		x == "Not recorded" | #
		x == "unknown" | #
		x == "Unknown" | #
		x == Inf |#
		x == -Inf | #
		x == "NaN" | #
		x == NaN | #
		x == 999 | #
		x == 9999 |#
		x == -9999 |#
		x == "-999.9" |#
		x == "9999" |#
		x == " "#
	)] <- NA#
	return(x)#
}#
#
#' Change NA values to 0.#
#'#
#' @param x Vector of data.#
#'#
#' @export#
#
NA_is_Zero_Function <- function(x){	#
	x[which(is.na(x))] <- 0#
	return(x)#
}#
#
#' Change "No" values to 0.#
#'#
#' @param x Vector of data.#
#'#
#' @export#
#
No_Function <- function(x){	#
	x[which(#
		x == "None" | #
		x == "No" | #
		x == "no" | #
		x == "none" | #
		x == "Feeding evidence, but no insects"#
	)] <- "0"#
	return(x)#
}
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
Plant_Info_Analysis <- createPlantInfobyPlant(Plant_Info, Plant_Surveys_by_Year)
head(Plant_Info_Analysis, n=20)
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
#' Replace 0 with "No".#
#'#
#' @param x Vector of data.#
#'#
#' @export#
#
Replace_0_w_No_Function <- function(x){	#
	x[which(x == 0)] <- "No"#
	return(x)#
}#
#
#' Replace 1 with "Yes".#
#'#
#' @param x Vector of data.#
#'#
#' @export#
#
Replace_1_w_Yes_Function <- function(x){	#
	x[which(x == 1)] <- "Yes"#
	return(x)#
}#
#
#' Replace NA with a ".".#
#'#
#' @param x Vector of data.#
#' @description Replace NAs with no text so they are not printed on datasheets.#
#'#
#' @export#
#
Replace_NA_w_Period_Function <- function(x){#
	x[is.na(x) == "TRUE"] <- "."#
	return(x)#
}#
#
#' Replace NA with "".#
#'#
#' @param x Vector of data.#
#' @description Replace NAs with no text so they are not printed on datasheets.#
#'#
#' @export#
#
Replace_NA_w_Blank_Function <- function(x){#
	x[is.na(x) == "TRUE"] <- ""#
	return(x)#
}#
#
#' Replace 0 with NA.#
#'#
#' @param x Vector of data.#
#'#
#' @export#
#
Zero_is_NA_Function <- function(x){	#
	x[which(x == 0)] <- NA#
	return(x)#
}#
#
#' Standardize "Yes" values.#
#'#
#' @param x Vector of data.#
#'#
#' @export#
#
Yes_Function <- function(x){	#
	x[which(#
		x == "Yes" | #
		x == "yes" |#
		x == "y" |#
		x == "Egg" | #
		x == "Larva" | #
		x == "Nymph"#
	)] <- "1"#
	return(x)#
}#
#
#' Replace values with NA.#
#'#
#' @param x Vector of data.#
#' @examples#
#' x = c(1,2,3,4," ", "Not Recorded")#
#' NA_Function(x)#
#'#
#' @export#
#
NA_Function <- function(x){	#
	x[which(#
		x == "Not Recorded" | #
		x == "not recorded" | #
		x == "Not recorded" | #
		x == "unknown" | #
		x == "Unknown" | #
		x == Inf |#
		x == -Inf | #
		x == "NaN" | #
		x == NaN | #
		x == 999 | #
		x == 9999 |#
		x == -9999 |#
		x == "-999.9" |#
		x == "9999" |#
		x == " "#
	)] <- NA#
	return(x)#
}#
#
#' Change NA values to 0.#
#'#
#' @param x Vector of data.#
#'#
#' @export#
#
NA_is_Zero_Function <- function(x){	#
	x[which(is.na(x))] <- 0#
	return(x)#
}#
#
#' Change "No" values to 0.#
#'#
#' @param x Vector of data.#
#'#
#' @export#
#
No_Function <- function(x){	#
	x[which(#
		x == "None" | #
		x == "No" | #
		x == "no" | #
		x == "none" | #
		x == "Feeding evidence, but no insects"#
	)] <- "0"#
	return(x)#
}
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
Plant_Info_Analysis <- createPlantInfobyPlant(Plant_Info, Plant_Surveys_by_Year)
head(Plant_Info_Analysis, n=20)
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
# FIXED UP UNTIL HERE#
Plant_Surveys_by_Year <- Plant_Info_Analysis %>%#
	renamePatches %>%#
	merge(Plant_Surveys_by_Year, by="PlantID")#
#
# create PrevYear#
Plant_Surveys_by_Year %<>% createInsectPresDuringStudy	#
# Second Plant ID#
Plant_Surveys_by_Year %<>% mutate(#
	PlantIDb = paste(#
		Island,#
		PlantID,#
		sep=", "#
	),#
	PlantIDc = paste(#
		Island,#
		PlantID,#
		sep="\n"#
	)#
)
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
temp <- Plant_Info_Analysis %>% filter(minDaysAlive < 2)#
if (dim(temp)[1] > 0) {#
	write.csv(temp,"PlantsAliveLessThan2Days.csv")#
	warning(paste(#
		"Some plants are recorded as alive for less than 2 days. Records written to csv."#
	))#
}
dim(temp)
head(temp)
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
temp <- Plant_Info_Analysis %>% filter(minDaysAlive < 2)
head(temp)
str(temp)
setwd('/Users/KSauby/Documents/Projects/GTMNERRproc/R')
#' Create Plant Info by Plant#
#'#
#' @description Create variables giving evidence of moths and insects, including moth presence or damage.#
#' @param Plant_Surveys_by_Plant Plant Survey Dataset#
#'#
#' @export#
#' @importFrom dataproc Unique#
#
createPlantInfobyPlant <- function(Plant_Info, Plant_Surveys_by_Year) {#
	# one record per plant#
	# 2849 records#
	Plant_Info_Analysis <- Plant_Info %>%#
		mutate(#
			Parent = replace(#
				Parent,#
				which(Parent=="Unkn"),#
				NA#
			)#
		) %>%#
		renameSpecies#
	Plant_Info_Analysis %<>%#
		arrange(First.Survey.Date.Alive) %>%#
		group_by(PlantID) %>%#
		dplyr::summarise(#
			Island 				= Island[1],#
			Network 			= Network[1],#
			# make sure they are all the same species#
			Species 			= Species[1],#
			# fix/verify#
			RecruitmentMode 	= paste(Unique(RecruitmentMode), collapse=","),#
			Parent 				= paste(Unique(Parent), collapse=","),#
			First.Survey.Date.Alive 	= First.Survey.Date.Alive[1]#
		) %>%#
		filter(!is.na(Network))#
	# save to figure out if some plants were lost during processing#
	temp1 <- Plant_Info_Analysis$PlantID#
	# Parent#
	Plant_Info_Analysis %<>% mutate(#
		Parent = replace(#
			Parent,#
			which(is.na(Parent)),#
			"Unknown"#
		)#
	)	#
	Plant_Info_Analysis$Parent %<>% NA_Function#
	Plant_Info_Analysis$Parent[which(Plant_Info_Analysis$Parent=="")] <- NA#
	# order#
	Plant_Info_Analysis %<>% arrange(desc(Island), desc(Parent))#
	# summarise insect presence on plants and in networks#
	# network_summary <- Plant_Surveys_by_Year %>%#
	#	group_by(Network) %>%#
	#	dplyr::summarise(#
	#		OldMothNetworkPres 	= Maximum(Old_Moth_Evidence_t),#
	#		MENetworkPres 		= Maximum(ME_t),#
	#		CANetworkPres 		= Maximum(CA_t),#
	#		MothNetworkPres 	= Maximum(Moth_Evidence_t)#
	#	)#
	Plant_summary <- Plant_Surveys_by_Year %>%#
		group_by(PlantID) %>%#
		dplyr::summarise(#
			OldMothPlantPres 	= Maximum(Old_Moth_Evidence_t),#
			MEPlantPres 		= Maximum(ME_t),#
			CAPlantPres 		= Maximum(CA_t),#
			MothPlantPres 		= Maximum(Moth_Evidence_t)#
		)#
	Plant_Info_Analysis %<>% #
		# merge(network_summary, by="Network") %>%#
		merge(Plant_summary, by="PlantID")#
	# get size at first survey#
	First_Size <- Plant_Surveys_by_Plant %>%#
		arrange(Date) %>%#
		group_by(PlantID) %>%#
		dplyr::summarise(#
			First.Survey.Date 		= Date[1],#
			minFecundityYear 		= Minimum(FecundityYear),#
			First_Size 				= Size_t[!(is.na(Size_t))][1],#
			First.Measurement.Date 	= Date[!(is.na(Size_t))][1],#
			min.Size 				= Minimum(Size_t),#
			max.Size 				= Maximum(Size_t),#
			LastDateAlive =#
				Maximum(Date[which(Dead==0 & Missing==0)]) %>% as.Date(origin="1970-01-01"),#
			FirstDeadObservation	= Date[which(Dead==1)][1],#
			FirstMissingObservation	= Date[which(Missing==1)][1],#
			FirstDeadMissingObservation = Minimum(#
				c(#
					FirstDeadObservation,#
					FirstMissingObservation#
				)#
			) %>% as.Date(origin="1970-01-01"),#
			# assume alive day before first observed: First.Survey.Date - 1#
			# also alive day of last survey: LastDateAlive + 1#
			minDaysAlive	= #
				(LastDateAlive + 1) - (First.Survey.Date - 1),#
			# assume last day alive was day before death observation: FirstDeadMissingObservation - 1#
			# assume alive day before first observed: First.Survey.Date - 1#
			# the 1s cancel out#
			maxDaysAlive	= #
				(FirstDeadMissingObservation - 1) -	(First.Survey.Date - 1)#
		)#
		First_Size$minDaysAlive %<>% as.numeric#
		First_Size$maxDaysAlive %<>% as.numeric %<>%#
			Replace_NA_w_Period_Function#
#
	Plant_Info_Analysis %<>% #
		merge(First_Size, by=c("PlantID"))#
	# WARNINGS	#
	temp <- Plant_Info_Analysis %>% #
		filter(grepl(",", RecruitmentMode)==TRUE)#
	if (dim(temp)[1] > 0) {#
		write.csv(temp, "InconsistentRecruitmentModePlantInfo.csv")#
		warning(paste(#
			"Inconsistent recruitment mode recorded for at least one plant spanning multiple plots. These plant info records have been written to csv."#
		))#
	}	#
	temp <- Plant_Info_Analysis %>% #
		filter(grepl(",", Parent)==TRUE)#
	if (dim(temp)[1] > 0) {#
		write.csv(temp, "InconsistentParentPlantInfo.csv")#
		warning(paste(#
			"Inconsistent Parent recorded for at least one plant spanning multiple plots. These plant info records have been written to csv."#
		))#
	}	#
	return(Plant_Info_Analysis)#
}
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
Plant_Info_Analysis <- createPlantInfobyPlant(Plant_Info, Plant_Surveys_by_Year)#
	# FIXED UP UNTIL HERE#
Plant_Surveys_by_Year <- Plant_Info_Analysis %>%#
	renamePatches %>%#
	merge(Plant_Surveys_by_Year, by="PlantID")#
#
# create PrevYear#
Plant_Surveys_by_Year %<>% createInsectPresDuringStudy	#
# Second Plant ID#
Plant_Surveys_by_Year %<>% mutate(#
	PlantIDb = paste(#
		Island,#
		PlantID,#
		sep=", "#
	),#
	PlantIDc = paste(#
		Island,#
		PlantID,#
		sep="\n"#
	)#
)
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
temp <- Plant_Info_Analysis %>% filter(minDaysAlive < 2)
dim(temp)
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
if (dim(temp)[1] > 0) {#
	write.csv(temp,"PlantsAliveLessThan2Days.csv")#
	warning(paste(#
		"Some plants are recorded as alive for less than 2 days. Records written to csv."#
	))#
}
str(Plant_Info_Analysis)
setwd('/Users/KSauby/Documents/Projects/GTMNERRproc/R')
#' Create Plant Info by Plant#
#'#
#' @description Create variables giving evidence of moths and insects, including moth presence or damage.#
#' @param Plant_Surveys_by_Plant Plant Survey Dataset#
#'#
#' @export#
#' @importFrom dataproc Unique#
#
createPlantInfobyPlant <- function(Plant_Info, Plant_Surveys_by_Year) {#
	# one record per plant#
	# 2849 records#
	Plant_Info_Analysis <- Plant_Info %>%#
		mutate(#
			Parent = replace(#
				Parent,#
				which(Parent=="Unkn"),#
				NA#
			)#
		) %>%#
		renameSpecies#
	Plant_Info_Analysis %<>%#
		arrange(First.Survey.Date.Alive) %>%#
		group_by(PlantID) %>%#
		dplyr::summarise(#
			Island 				= Island[1],#
			Network 			= Network[1],#
			# make sure they are all the same species#
			Species 			= Species[1],#
			# fix/verify#
			RecruitmentMode 	= paste(Unique(RecruitmentMode), collapse=","),#
			Parent 				= paste(Unique(Parent), collapse=","),#
			First.Survey.Date.Alive 	= First.Survey.Date.Alive[1]#
		) %>%#
		filter(!is.na(Network)) %>%#
		mutate(#
			RecruitmentMode = replace(#
				RecruitmentMode,#
				which(RecruitmentMode==""),#
				"Unknown"#
			)#
		)#
	# save to figure out if some plants were lost during processing#
	temp1 <- Plant_Info_Analysis$PlantID#
	# Parent#
	Plant_Info_Analysis %<>% mutate(#
		Parent = replace(#
			Parent,#
			which(is.na(Parent)),#
			"Unknown"#
		)#
	)	#
	Plant_Info_Analysis$Parent %<>% NA_Function#
	Plant_Info_Analysis$Parent[which(Plant_Info_Analysis$Parent=="")] <- NA#
	# order#
	Plant_Info_Analysis %<>% arrange(desc(Island), desc(Parent))#
	# summarise insect presence on plants and in networks#
	# network_summary <- Plant_Surveys_by_Year %>%#
	#	group_by(Network) %>%#
	#	dplyr::summarise(#
	#		OldMothNetworkPres 	= Maximum(Old_Moth_Evidence_t),#
	#		MENetworkPres 		= Maximum(ME_t),#
	#		CANetworkPres 		= Maximum(CA_t),#
	#		MothNetworkPres 	= Maximum(Moth_Evidence_t)#
	#	)#
	Plant_summary <- Plant_Surveys_by_Year %>%#
		group_by(PlantID) %>%#
		dplyr::summarise(#
			OldMothPlantPres 	= Maximum(Old_Moth_Evidence_t),#
			MEPlantPres 		= Maximum(ME_t),#
			CAPlantPres 		= Maximum(CA_t),#
			MothPlantPres 		= Maximum(Moth_Evidence_t)#
		)#
	Plant_Info_Analysis %<>% #
		# merge(network_summary, by="Network") %>%#
		merge(Plant_summary, by="PlantID")#
	# get size at first survey#
	First_Size <- Plant_Surveys_by_Plant %>%#
		arrange(Date) %>%#
		group_by(PlantID) %>%#
		dplyr::summarise(#
			First.Survey.Date 		= Date[1],#
			minFecundityYear 		= Minimum(FecundityYear),#
			First_Size 				= Size_t[!(is.na(Size_t))][1],#
			First.Measurement.Date 	= Date[!(is.na(Size_t))][1],#
			min.Size 				= Minimum(Size_t),#
			max.Size 				= Maximum(Size_t),#
			LastDateAlive =#
				Maximum(Date[which(Dead==0 & Missing==0)]) %>% as.Date(origin="1970-01-01"),#
			FirstDeadObservation	= Date[which(Dead==1)][1],#
			FirstMissingObservation	= Date[which(Missing==1)][1],#
			FirstDeadMissingObservation = Minimum(#
				c(#
					FirstDeadObservation,#
					FirstMissingObservation#
				)#
			) %>% as.Date(origin="1970-01-01"),#
			# assume alive day before first observed: First.Survey.Date - 1#
			# also alive day of last survey: LastDateAlive + 1#
			minDaysAlive	= #
				(LastDateAlive + 1) - (First.Survey.Date - 1),#
			# assume last day alive was day before death observation: FirstDeadMissingObservation - 1#
			# assume alive day before first observed: First.Survey.Date - 1#
			# the 1s cancel out#
			maxDaysAlive	= #
				(FirstDeadMissingObservation - 1) -	(First.Survey.Date - 1)#
		)#
		First_Size$minDaysAlive %<>% as.numeric#
		First_Size$maxDaysAlive %<>% as.numeric %<>%#
			Replace_NA_w_Period_Function#
#
	Plant_Info_Analysis %<>% #
		merge(First_Size, by=c("PlantID"))#
	# WARNINGS	#
	temp <- Plant_Info_Analysis %>% #
		filter(grepl(",", RecruitmentMode)==TRUE)#
	if (dim(temp)[1] > 0) {#
		write.csv(temp, "InconsistentRecruitmentModePlantInfo.csv")#
		warning(paste(#
			"Inconsistent recruitment mode recorded for at least one plant spanning multiple plots. These plant info records have been written to csv."#
		))#
	}	#
	temp <- Plant_Info_Analysis %>% #
		filter(grepl(",", Parent)==TRUE)#
	if (dim(temp)[1] > 0) {#
		write.csv(temp, "InconsistentParentPlantInfo.csv")#
		warning(paste(#
			"Inconsistent Parent recorded for at least one plant spanning multiple plots. These plant info records have been written to csv."#
		))#
	}	#
	return(Plant_Info_Analysis)#
}
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
Plant_Info_Analysis <- createPlantInfobyPlant(Plant_Info, Plant_Surveys_by_Year)
str(Plant_Info_Analysis)
setwd('/Users/KSauby/Documents/Projects/GTMNERRproc/R')
#' Create Plant Info by Plant#
#'#
#' @description Create variables giving evidence of moths and insects, including moth presence or damage.#
#' @param Plant_Surveys_by_Plant Plant Survey Dataset#
#'#
#' @export#
#' @importFrom dataproc Unique#
#
createPlantInfobyPlant <- function(Plant_Info, Plant_Surveys_by_Year) {#
	# one record per plant#
	# 2849 records#
	Plant_Info_Analysis <- Plant_Info %>%#
		mutate(#
			Parent = replace(#
				Parent,#
				which(Parent=="Unkn"),#
				NA#
			)#
		) %>%#
		renameSpecies#
	Plant_Info_Analysis %<>%#
		arrange(First.Survey.Date.Alive) %>%#
		group_by(PlantID) %>%#
		dplyr::summarise(#
			Island 				= Island[1],#
			Network 			= Network[1],#
			# make sure they are all the same species#
			Species 			= Species[1],#
			# fix/verify#
			RecruitmentMode 	= paste(Unique(RecruitmentMode), collapse=","),#
			Parent 				= paste(Unique(Parent), collapse=","),#
			First.Survey.Date.Alive 	= First.Survey.Date.Alive[1]#
		) %>%#
		filter(!is.na(Network)) %>%#
		mutate(#
			RecruitmentMode = replace(#
				RecruitmentMode,#
				which(RecruitmentMode==""),#
				"Unknown"#
			),#
			Parent = replace(#
				Parent,#
				which(is.na(Parent)),#
				"Unknown"#
			)#
		)#
	# save to figure out if some plants were lost during processing#
	temp1 <- Plant_Info_Analysis$PlantID#
	# Parent#
	Plant_Info_Analysis %<>% mutate(#
		Parent = replace(#
			Parent,#
			which(is.na(Parent)),#
			"Unknown"#
		)#
	)	#
	Plant_Info_Analysis$Parent %<>% NA_Function#
	Plant_Info_Analysis$Parent[which(Plant_Info_Analysis$Parent=="")] <- NA#
	# order#
	Plant_Info_Analysis %<>% arrange(desc(Island), desc(Parent))#
	# summarise insect presence on plants and in networks#
	# network_summary <- Plant_Surveys_by_Year %>%#
	#	group_by(Network) %>%#
	#	dplyr::summarise(#
	#		OldMothNetworkPres 	= Maximum(Old_Moth_Evidence_t),#
	#		MENetworkPres 		= Maximum(ME_t),#
	#		CANetworkPres 		= Maximum(CA_t),#
	#		MothNetworkPres 	= Maximum(Moth_Evidence_t)#
	#	)#
	Plant_summary <- Plant_Surveys_by_Year %>%#
		group_by(PlantID) %>%#
		dplyr::summarise(#
			OldMothPlantPres 	= Maximum(Old_Moth_Evidence_t),#
			MEPlantPres 		= Maximum(ME_t),#
			CAPlantPres 		= Maximum(CA_t),#
			MothPlantPres 		= Maximum(Moth_Evidence_t)#
		)#
	Plant_Info_Analysis %<>% #
		# merge(network_summary, by="Network") %>%#
		merge(Plant_summary, by="PlantID")#
	# get size at first survey#
	First_Size <- Plant_Surveys_by_Plant %>%#
		arrange(Date) %>%#
		group_by(PlantID) %>%#
		dplyr::summarise(#
			First.Survey.Date 		= Date[1],#
			minFecundityYear 		= Minimum(FecundityYear),#
			First_Size 				= Size_t[!(is.na(Size_t))][1],#
			First.Measurement.Date 	= Date[!(is.na(Size_t))][1],#
			min.Size 				= Minimum(Size_t),#
			max.Size 				= Maximum(Size_t),#
			LastDateAlive =#
				Maximum(Date[which(Dead==0 & Missing==0)]) %>% as.Date(origin="1970-01-01"),#
			FirstDeadObservation	= Date[which(Dead==1)][1],#
			FirstMissingObservation	= Date[which(Missing==1)][1],#
			FirstDeadMissingObservation = Minimum(#
				c(#
					FirstDeadObservation,#
					FirstMissingObservation#
				)#
			) %>% as.Date(origin="1970-01-01"),#
			# assume alive day before first observed: First.Survey.Date - 1#
			# also alive day of last survey: LastDateAlive + 1#
			minDaysAlive	= #
				(LastDateAlive + 1) - (First.Survey.Date - 1),#
			# assume last day alive was day before death observation: FirstDeadMissingObservation - 1#
			# assume alive day before first observed: First.Survey.Date - 1#
			# the 1s cancel out#
			maxDaysAlive	= #
				(FirstDeadMissingObservation - 1) -	(First.Survey.Date - 1)#
		)#
		First_Size$minDaysAlive %<>% as.numeric#
		First_Size$maxDaysAlive %<>% as.numeric %<>%#
			Replace_NA_w_Period_Function#
#
	Plant_Info_Analysis %<>% #
		merge(First_Size, by=c("PlantID"))#
	# WARNINGS	#
	temp <- Plant_Info_Analysis %>% #
		filter(grepl(",", RecruitmentMode)==TRUE)#
	if (dim(temp)[1] > 0) {#
		write.csv(temp, "InconsistentRecruitmentModePlantInfo.csv")#
		warning(paste(#
			"Inconsistent recruitment mode recorded for at least one plant spanning multiple plots. These plant info records have been written to csv."#
		))#
	}	#
	temp <- Plant_Info_Analysis %>% #
		filter(grepl(",", Parent)==TRUE)#
	if (dim(temp)[1] > 0) {#
		write.csv(temp, "InconsistentParentPlantInfo.csv")#
		warning(paste(#
			"Inconsistent Parent recorded for at least one plant spanning multiple plots. These plant info records have been written to csv."#
		))#
	}	#
	return(Plant_Info_Analysis)#
}
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
Plant_Info_Analysis <- createPlantInfobyPlant(Plant_Info, Plant_Surveys_by_Year)
str(Plant_Info_Analysis)
setwd('/Users/KSauby/Documents/Projects/GTMNERRproc/R')
#' Create Plant Info by Plant#
#'#
#' @description Create variables giving evidence of moths and insects, including moth presence or damage.#
#' @param Plant_Surveys_by_Plant Plant Survey Dataset#
#'#
#' @export#
#' @importFrom dataproc Unique#
#
createPlantInfobyPlant <- function(Plant_Info, Plant_Surveys_by_Year) {#
	# one record per plant#
	# 2849 records#
	Plant_Info_Analysis <- Plant_Info %>%#
		mutate(#
			Parent = replace(#
				Parent,#
				which(Parent=="Unkn"),#
				NA#
			)#
		) %>%#
		renameSpecies#
	Plant_Info_Analysis %<>%#
		arrange(First.Survey.Date.Alive) %>%#
		group_by(PlantID) %>%#
		dplyr::summarise(#
			Island 				= Island[1],#
			Network 			= Network[1],#
			# make sure they are all the same species#
			Species 			= Species[1],#
			# fix/verify#
			RecruitmentMode 	= paste(Unique(RecruitmentMode), collapse=","),#
			Parent 				= paste(Unique(Parent), collapse=","),#
			First.Survey.Date.Alive 	= First.Survey.Date.Alive[1]#
		) %>%#
		filter(!is.na(Network)) %>%#
		mutate(#
			RecruitmentMode = replace(#
				RecruitmentMode,#
				which(RecruitmentMode==""),#
				"Unknown"#
			),#
			Parent = replace(#
				Parent,#
				which(Parent==NA),#
				"Unknown"#
			)#
		)#
	# save to figure out if some plants were lost during processing#
	temp1 <- Plant_Info_Analysis$PlantID#
	# Parent#
	Plant_Info_Analysis %<>% mutate(#
		Parent = replace(#
			Parent,#
			which(is.na(Parent)),#
			"Unknown"#
		)#
	)	#
	Plant_Info_Analysis$Parent %<>% NA_Function#
	Plant_Info_Analysis$Parent[which(Plant_Info_Analysis$Parent=="")] <- NA#
	# order#
	Plant_Info_Analysis %<>% arrange(desc(Island), desc(Parent))#
	# summarise insect presence on plants and in networks#
	# network_summary <- Plant_Surveys_by_Year %>%#
	#	group_by(Network) %>%#
	#	dplyr::summarise(#
	#		OldMothNetworkPres 	= Maximum(Old_Moth_Evidence_t),#
	#		MENetworkPres 		= Maximum(ME_t),#
	#		CANetworkPres 		= Maximum(CA_t),#
	#		MothNetworkPres 	= Maximum(Moth_Evidence_t)#
	#	)#
	Plant_summary <- Plant_Surveys_by_Year %>%#
		group_by(PlantID) %>%#
		dplyr::summarise(#
			OldMothPlantPres 	= Maximum(Old_Moth_Evidence_t),#
			MEPlantPres 		= Maximum(ME_t),#
			CAPlantPres 		= Maximum(CA_t),#
			MothPlantPres 		= Maximum(Moth_Evidence_t)#
		)#
	Plant_Info_Analysis %<>% #
		# merge(network_summary, by="Network") %>%#
		merge(Plant_summary, by="PlantID")#
	# get size at first survey#
	First_Size <- Plant_Surveys_by_Plant %>%#
		arrange(Date) %>%#
		group_by(PlantID) %>%#
		dplyr::summarise(#
			First.Survey.Date 		= Date[1],#
			minFecundityYear 		= Minimum(FecundityYear),#
			First_Size 				= Size_t[!(is.na(Size_t))][1],#
			First.Measurement.Date 	= Date[!(is.na(Size_t))][1],#
			min.Size 				= Minimum(Size_t),#
			max.Size 				= Maximum(Size_t),#
			LastDateAlive =#
				Maximum(Date[which(Dead==0 & Missing==0)]) %>% as.Date(origin="1970-01-01"),#
			FirstDeadObservation	= Date[which(Dead==1)][1],#
			FirstMissingObservation	= Date[which(Missing==1)][1],#
			FirstDeadMissingObservation = Minimum(#
				c(#
					FirstDeadObservation,#
					FirstMissingObservation#
				)#
			) %>% as.Date(origin="1970-01-01"),#
			# assume alive day before first observed: First.Survey.Date - 1#
			# also alive day of last survey: LastDateAlive + 1#
			minDaysAlive	= #
				(LastDateAlive + 1) - (First.Survey.Date - 1),#
			# assume last day alive was day before death observation: FirstDeadMissingObservation - 1#
			# assume alive day before first observed: First.Survey.Date - 1#
			# the 1s cancel out#
			maxDaysAlive	= #
				(FirstDeadMissingObservation - 1) -	(First.Survey.Date - 1)#
		)#
		First_Size$minDaysAlive %<>% as.numeric#
		First_Size$maxDaysAlive %<>% as.numeric %<>%#
			Replace_NA_w_Period_Function#
#
	Plant_Info_Analysis %<>% #
		merge(First_Size, by=c("PlantID"))#
	# WARNINGS	#
	temp <- Plant_Info_Analysis %>% #
		filter(grepl(",", RecruitmentMode)==TRUE)#
	if (dim(temp)[1] > 0) {#
		write.csv(temp, "InconsistentRecruitmentModePlantInfo.csv")#
		warning(paste(#
			"Inconsistent recruitment mode recorded for at least one plant spanning multiple plots. These plant info records have been written to csv."#
		))#
	}	#
	temp <- Plant_Info_Analysis %>% #
		filter(grepl(",", Parent)==TRUE)#
	if (dim(temp)[1] > 0) {#
		write.csv(temp, "InconsistentParentPlantInfo.csv")#
		warning(paste(#
			"Inconsistent Parent recorded for at least one plant spanning multiple plots. These plant info records have been written to csv."#
		))#
	}	#
	return(Plant_Info_Analysis)#
}
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
Plant_Info_Analysis <- createPlantInfobyPlant(Plant_Info, Plant_Surveys_by_Year)
str(Plant_Info_Analysis)
setwd('/Users/KSauby/Documents/Projects/GTMNERRproc/R')
#' Create Plant Info by Plant#
#'#
#' @description Create variables giving evidence of moths and insects, including moth presence or damage.#
#' @param Plant_Surveys_by_Plant Plant Survey Dataset#
#'#
#' @export#
#' @importFrom dataproc Unique#
#
createPlantInfobyPlant <- function(Plant_Info, Plant_Surveys_by_Year) {#
	# one record per plant#
	# 2849 records#
	Plant_Info_Analysis <- Plant_Info %>%#
		mutate(#
			Parent = replace(#
				Parent,#
				which(Parent=="Unkn"),#
				NA#
			)#
		) %>%#
		renameSpecies#
	Plant_Info_Analysis %<>%#
		arrange(First.Survey.Date.Alive) %>%#
		group_by(PlantID) %>%#
		dplyr::summarise(#
			Island 				= Island[1],#
			Network 			= Network[1],#
			# make sure they are all the same species#
			Species 			= Species[1],#
			# fix/verify#
			RecruitmentMode 	= paste(Unique(RecruitmentMode), collapse=","),#
			Parent 				= paste(Unique(Parent), collapse=","),#
			First.Survey.Date.Alive 	= First.Survey.Date.Alive[1]#
		) %>%#
		filter(!is.na(Network)) %>%#
		mutate(#
			RecruitmentMode = replace(#
				RecruitmentMode,#
				which(RecruitmentMode==""),#
				"Unknown"#
			),#
			Parent = replace(#
				Parent,#
				which(Parent==NA | is.na(Parent)==TRUE),#
				"Unknown"#
			)#
		)#
	# save to figure out if some plants were lost during processing#
	temp1 <- Plant_Info_Analysis$PlantID#
	# Parent#
	Plant_Info_Analysis %<>% mutate(#
		Parent = replace(#
			Parent,#
			which(is.na(Parent)),#
			"Unknown"#
		)#
	)	#
	Plant_Info_Analysis$Parent %<>% NA_Function#
	Plant_Info_Analysis$Parent[which(Plant_Info_Analysis$Parent=="")] <- NA#
	# order#
	Plant_Info_Analysis %<>% arrange(desc(Island), desc(Parent))#
	# summarise insect presence on plants and in networks#
	# network_summary <- Plant_Surveys_by_Year %>%#
	#	group_by(Network) %>%#
	#	dplyr::summarise(#
	#		OldMothNetworkPres 	= Maximum(Old_Moth_Evidence_t),#
	#		MENetworkPres 		= Maximum(ME_t),#
	#		CANetworkPres 		= Maximum(CA_t),#
	#		MothNetworkPres 	= Maximum(Moth_Evidence_t)#
	#	)#
	Plant_summary <- Plant_Surveys_by_Year %>%#
		group_by(PlantID) %>%#
		dplyr::summarise(#
			OldMothPlantPres 	= Maximum(Old_Moth_Evidence_t),#
			MEPlantPres 		= Maximum(ME_t),#
			CAPlantPres 		= Maximum(CA_t),#
			MothPlantPres 		= Maximum(Moth_Evidence_t)#
		)#
	Plant_Info_Analysis %<>% #
		# merge(network_summary, by="Network") %>%#
		merge(Plant_summary, by="PlantID")#
	# get size at first survey#
	First_Size <- Plant_Surveys_by_Plant %>%#
		arrange(Date) %>%#
		group_by(PlantID) %>%#
		dplyr::summarise(#
			First.Survey.Date 		= Date[1],#
			minFecundityYear 		= Minimum(FecundityYear),#
			First_Size 				= Size_t[!(is.na(Size_t))][1],#
			First.Measurement.Date 	= Date[!(is.na(Size_t))][1],#
			min.Size 				= Minimum(Size_t),#
			max.Size 				= Maximum(Size_t),#
			LastDateAlive =#
				Maximum(Date[which(Dead==0 & Missing==0)]) %>% as.Date(origin="1970-01-01"),#
			FirstDeadObservation	= Date[which(Dead==1)][1],#
			FirstMissingObservation	= Date[which(Missing==1)][1],#
			FirstDeadMissingObservation = Minimum(#
				c(#
					FirstDeadObservation,#
					FirstMissingObservation#
				)#
			) %>% as.Date(origin="1970-01-01"),#
			# assume alive day before first observed: First.Survey.Date - 1#
			# also alive day of last survey: LastDateAlive + 1#
			minDaysAlive	= #
				(LastDateAlive + 1) - (First.Survey.Date - 1),#
			# assume last day alive was day before death observation: FirstDeadMissingObservation - 1#
			# assume alive day before first observed: First.Survey.Date - 1#
			# the 1s cancel out#
			maxDaysAlive	= #
				(FirstDeadMissingObservation - 1) -	(First.Survey.Date - 1)#
		)#
		First_Size$minDaysAlive %<>% as.numeric#
		First_Size$maxDaysAlive %<>% as.numeric %<>%#
			Replace_NA_w_Period_Function#
#
	Plant_Info_Analysis %<>% #
		merge(First_Size, by=c("PlantID"))#
	# WARNINGS	#
	temp <- Plant_Info_Analysis %>% #
		filter(grepl(",", RecruitmentMode)==TRUE)#
	if (dim(temp)[1] > 0) {#
		write.csv(temp, "InconsistentRecruitmentModePlantInfo.csv")#
		warning(paste(#
			"Inconsistent recruitment mode recorded for at least one plant spanning multiple plots. These plant info records have been written to csv."#
		))#
	}	#
	temp <- Plant_Info_Analysis %>% #
		filter(grepl(",", Parent)==TRUE)#
	if (dim(temp)[1] > 0) {#
		write.csv(temp, "InconsistentParentPlantInfo.csv")#
		warning(paste(#
			"Inconsistent Parent recorded for at least one plant spanning multiple plots. These plant info records have been written to csv."#
		))#
	}	#
	return(Plant_Info_Analysis)#
}
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
Plant_Info_Analysis <- createPlantInfobyPlant(Plant_Info, Plant_Surveys_by_Year)
str(Plant_Info_Analysis)
setwd('/Users/KSauby/Documents/Projects/GTMNERRproc/R')
#' Create Plant Info by Plant#
#'#
#' @description Create variables giving evidence of moths and insects, including moth presence or damage.#
#' @param Plant_Surveys_by_Plant Plant Survey Dataset#
#'#
#' @export#
#' @importFrom dataproc Unique#
#
createPlantInfobyPlant <- function(Plant_Info, Plant_Surveys_by_Year) {#
	# one record per plant#
	# 2849 records#
	Plant_Info_Analysis <- Plant_Info %>%#
		mutate(#
			Parent = replace(#
				Parent,#
				which(Parent=="Unkn"),#
				NA#
			)#
		) %>%#
		renameSpecies#
	Plant_Info_Analysis %<>%#
		arrange(First.Survey.Date.Alive) %>%#
		group_by(PlantID) %>%#
		dplyr::summarise(#
			Island 				= Island[1],#
			Network 			= Network[1],#
			# make sure they are all the same species#
			Species 			= Species[1],#
			# fix/verify#
			RecruitmentMode 	= paste(Unique(RecruitmentMode), collapse=","),#
			Parent 				= paste(Unique(Parent), collapse=","),#
			First.Survey.Date.Alive 	= First.Survey.Date.Alive[1]#
		) %>%#
		filter(!is.na(Network)) %>%#
		mutate(#
			RecruitmentMode = replace(#
				RecruitmentMode,#
				which(RecruitmentMode==""),#
				"Unknown"#
			),#
			Parent = replace(#
				Parent,#
				which(Parent=="NA"),#
				"Unknown"#
			)#
		)#
	# save to figure out if some plants were lost during processing#
	temp1 <- Plant_Info_Analysis$PlantID#
	# Parent#
	Plant_Info_Analysis %<>% mutate(#
		Parent = replace(#
			Parent,#
			which(is.na(Parent)),#
			"Unknown"#
		)#
	)	#
	Plant_Info_Analysis$Parent %<>% NA_Function#
	Plant_Info_Analysis$Parent[which(Plant_Info_Analysis$Parent=="")] <- NA#
	# order#
	Plant_Info_Analysis %<>% arrange(desc(Island), desc(Parent))#
	# summarise insect presence on plants and in networks#
	# network_summary <- Plant_Surveys_by_Year %>%#
	#	group_by(Network) %>%#
	#	dplyr::summarise(#
	#		OldMothNetworkPres 	= Maximum(Old_Moth_Evidence_t),#
	#		MENetworkPres 		= Maximum(ME_t),#
	#		CANetworkPres 		= Maximum(CA_t),#
	#		MothNetworkPres 	= Maximum(Moth_Evidence_t)#
	#	)#
	Plant_summary <- Plant_Surveys_by_Year %>%#
		group_by(PlantID) %>%#
		dplyr::summarise(#
			OldMothPlantPres 	= Maximum(Old_Moth_Evidence_t),#
			MEPlantPres 		= Maximum(ME_t),#
			CAPlantPres 		= Maximum(CA_t),#
			MothPlantPres 		= Maximum(Moth_Evidence_t)#
		)#
	Plant_Info_Analysis %<>% #
		# merge(network_summary, by="Network") %>%#
		merge(Plant_summary, by="PlantID")#
	# get size at first survey#
	First_Size <- Plant_Surveys_by_Plant %>%#
		arrange(Date) %>%#
		group_by(PlantID) %>%#
		dplyr::summarise(#
			First.Survey.Date 		= Date[1],#
			minFecundityYear 		= Minimum(FecundityYear),#
			First_Size 				= Size_t[!(is.na(Size_t))][1],#
			First.Measurement.Date 	= Date[!(is.na(Size_t))][1],#
			min.Size 				= Minimum(Size_t),#
			max.Size 				= Maximum(Size_t),#
			LastDateAlive =#
				Maximum(Date[which(Dead==0 & Missing==0)]) %>% as.Date(origin="1970-01-01"),#
			FirstDeadObservation	= Date[which(Dead==1)][1],#
			FirstMissingObservation	= Date[which(Missing==1)][1],#
			FirstDeadMissingObservation = Minimum(#
				c(#
					FirstDeadObservation,#
					FirstMissingObservation#
				)#
			) %>% as.Date(origin="1970-01-01"),#
			# assume alive day before first observed: First.Survey.Date - 1#
			# also alive day of last survey: LastDateAlive + 1#
			minDaysAlive	= #
				(LastDateAlive + 1) - (First.Survey.Date - 1),#
			# assume last day alive was day before death observation: FirstDeadMissingObservation - 1#
			# assume alive day before first observed: First.Survey.Date - 1#
			# the 1s cancel out#
			maxDaysAlive	= #
				(FirstDeadMissingObservation - 1) -	(First.Survey.Date - 1)#
		)#
		First_Size$minDaysAlive %<>% as.numeric#
		First_Size$maxDaysAlive %<>% as.numeric %<>%#
			Replace_NA_w_Period_Function#
#
	Plant_Info_Analysis %<>% #
		merge(First_Size, by=c("PlantID"))#
	# WARNINGS	#
	temp <- Plant_Info_Analysis %>% #
		filter(grepl(",", RecruitmentMode)==TRUE)#
	if (dim(temp)[1] > 0) {#
		write.csv(temp, "InconsistentRecruitmentModePlantInfo.csv")#
		warning(paste(#
			"Inconsistent recruitment mode recorded for at least one plant spanning multiple plots. These plant info records have been written to csv."#
		))#
	}	#
	temp <- Plant_Info_Analysis %>% #
		filter(grepl(",", Parent)==TRUE)#
	if (dim(temp)[1] > 0) {#
		write.csv(temp, "InconsistentParentPlantInfo.csv")#
		warning(paste(#
			"Inconsistent Parent recorded for at least one plant spanning multiple plots. These plant info records have been written to csv."#
		))#
	}	#
	return(Plant_Info_Analysis)#
}
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
Plant_Info_Analysis <- createPlantInfobyPlant(Plant_Info, Plant_Surveys_by_Year)
str(Plant_Info_Analysis)
head(Plant_Info_Analysis)
setwd('/Users/KSauby/Documents/Projects/GTMNERRproc/R')
#' Create Plant Info by Plant#
#'#
#' @description Create variables giving evidence of moths and insects, including moth presence or damage.#
#' @param Plant_Surveys_by_Plant Plant Survey Dataset#
#'#
#' @export#
#' @importFrom dataproc Unique#
#
createPlantInfobyPlant <- function(Plant_Info, Plant_Surveys_by_Year) {#
	# one record per plant#
	# 2849 records#
	Plant_Info_Analysis <- Plant_Info %>%#
		mutate(#
			Parent = replace(#
				Parent,#
				which(Parent=="Unkn"),#
				NA#
			)#
		) %>%#
		renameSpecies#
	Plant_Info_Analysis %<>%#
		arrange(First.Survey.Date.Alive) %>%#
		group_by(PlantID) %>%#
		dplyr::summarise(#
			Island 				= Island[1],#
			Network 			= Network[1],#
			# make sure they are all the same species#
			Species 			= Species[1],#
			# fix/verify#
			RecruitmentMode 	= paste(Unique(RecruitmentMode), collapse=","),#
			Parent 				= paste(Unique(Parent), collapse=","),#
			First.Survey.Date.Alive 	= First.Survey.Date.Alive[1]#
		) %>%#
		filter(!is.na(Network)) %>%#
		mutate(#
			RecruitmentMode = replace(#
				RecruitmentMode,#
				which(RecruitmentMode==""),#
				"Unknown"#
			),#
			Parent = replace(#
				Parent,#
				which(Parent=="NA" | Parent==""),#
				"Unknown"#
			)#
		)#
	# save to figure out if some plants were lost during processing#
	temp1 <- Plant_Info_Analysis$PlantID#
	# Parent#
	Plant_Info_Analysis %<>% mutate(#
		Parent = replace(#
			Parent,#
			which(is.na(Parent)),#
			"Unknown"#
		)#
	)	#
	Plant_Info_Analysis$Parent %<>% NA_Function#
	Plant_Info_Analysis$Parent[which(Plant_Info_Analysis$Parent=="")] <- NA#
	# order#
	Plant_Info_Analysis %<>% arrange(desc(Island), desc(Parent))#
	# summarise insect presence on plants and in networks#
	# network_summary <- Plant_Surveys_by_Year %>%#
	#	group_by(Network) %>%#
	#	dplyr::summarise(#
	#		OldMothNetworkPres 	= Maximum(Old_Moth_Evidence_t),#
	#		MENetworkPres 		= Maximum(ME_t),#
	#		CANetworkPres 		= Maximum(CA_t),#
	#		MothNetworkPres 	= Maximum(Moth_Evidence_t)#
	#	)#
	Plant_summary <- Plant_Surveys_by_Year %>%#
		group_by(PlantID) %>%#
		dplyr::summarise(#
			OldMothPlantPres 	= Maximum(Old_Moth_Evidence_t),#
			MEPlantPres 		= Maximum(ME_t),#
			CAPlantPres 		= Maximum(CA_t),#
			MothPlantPres 		= Maximum(Moth_Evidence_t)#
		)#
	Plant_Info_Analysis %<>% #
		# merge(network_summary, by="Network") %>%#
		merge(Plant_summary, by="PlantID")#
	# get size at first survey#
	First_Size <- Plant_Surveys_by_Plant %>%#
		arrange(Date) %>%#
		group_by(PlantID) %>%#
		dplyr::summarise(#
			First.Survey.Date 		= Date[1],#
			minFecundityYear 		= Minimum(FecundityYear),#
			First_Size 				= Size_t[!(is.na(Size_t))][1],#
			First.Measurement.Date 	= Date[!(is.na(Size_t))][1],#
			min.Size 				= Minimum(Size_t),#
			max.Size 				= Maximum(Size_t),#
			LastDateAlive =#
				Maximum(Date[which(Dead==0 & Missing==0)]) %>% as.Date(origin="1970-01-01"),#
			FirstDeadObservation	= Date[which(Dead==1)][1],#
			FirstMissingObservation	= Date[which(Missing==1)][1],#
			FirstDeadMissingObservation = Minimum(#
				c(#
					FirstDeadObservation,#
					FirstMissingObservation#
				)#
			) %>% as.Date(origin="1970-01-01"),#
			# assume alive day before first observed: First.Survey.Date - 1#
			# also alive day of last survey: LastDateAlive + 1#
			minDaysAlive	= #
				(LastDateAlive + 1) - (First.Survey.Date - 1),#
			# assume last day alive was day before death observation: FirstDeadMissingObservation - 1#
			# assume alive day before first observed: First.Survey.Date - 1#
			# the 1s cancel out#
			maxDaysAlive	= #
				(FirstDeadMissingObservation - 1) -	(First.Survey.Date - 1)#
		)#
		First_Size$minDaysAlive %<>% as.numeric#
		First_Size$maxDaysAlive %<>% as.numeric %<>%#
			Replace_NA_w_Period_Function#
#
	Plant_Info_Analysis %<>% #
		merge(First_Size, by=c("PlantID"))#
	# WARNINGS	#
	temp <- Plant_Info_Analysis %>% #
		filter(grepl(",", RecruitmentMode)==TRUE)#
	if (dim(temp)[1] > 0) {#
		write.csv(temp, "InconsistentRecruitmentModePlantInfo.csv")#
		warning(paste(#
			"Inconsistent recruitment mode recorded for at least one plant spanning multiple plots. These plant info records have been written to csv."#
		))#
	}	#
	temp <- Plant_Info_Analysis %>% #
		filter(grepl(",", Parent)==TRUE)#
	if (dim(temp)[1] > 0) {#
		write.csv(temp, "InconsistentParentPlantInfo.csv")#
		warning(paste(#
			"Inconsistent Parent recorded for at least one plant spanning multiple plots. These plant info records have been written to csv."#
		))#
	}	#
	return(Plant_Info_Analysis)#
}
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
Plant_Info_Analysis <- createPlantInfobyPlant(Plant_Info, Plant_Surveys_by_Year)
head(Plant_Info_Analysis)
Plant_Info_Analysis$Parent %>% head
setwd('/Users/KSauby/Documents/Projects/GTMNERRproc/R')
# 2849 records#
	Plant_Info_Analysis <- Plant_Info %>%#
		mutate(#
			Parent = replace(#
				Parent,#
				which(Parent=="Unkn"),#
				NA#
			)#
		) %>%#
		renameSpecies#
	Plant_Info_Analysis %<>%#
		arrange(First.Survey.Date.Alive) %>%#
		group_by(PlantID) %>%#
		dplyr::summarise(#
			Island 				= Island[1],#
			Network 			= Network[1],#
			# make sure they are all the same species#
			Species 			= Species[1],#
			# fix/verify#
			RecruitmentMode 	= paste(Unique(RecruitmentMode), collapse=","),#
			Parent 				= paste(Unique(Parent), collapse=","),#
			First.Survey.Date.Alive 	= First.Survey.Date.Alive[1]#
		) %>%#
		filter(!is.na(Network)) %>%#
		mutate(#
			RecruitmentMode = replace(#
				RecruitmentMode,#
				which(RecruitmentMode==""),#
				"Unknown"#
			),#
			Parent = replace(#
				Parent,#
				which(Parent=="NA" | Parent==""),#
				"Unknown"#
			)#
		)
head(Plant_Info_Analysis)
setwd('/Users/KSauby/Documents/Projects/GTMNERRproc/R')
#' Create Plant Info by Plant#
#'#
#' @description Create variables giving evidence of moths and insects, including moth presence or damage.#
#' @param Plant_Surveys_by_Plant Plant Survey Dataset#
#'#
#' @export#
#' @importFrom dataproc Unique#
#
createPlantInfobyPlant <- function(Plant_Info, Plant_Surveys_by_Year) {#
	# one record per plant#
	# 2849 records#
	Plant_Info_Analysis <- Plant_Info %>%#
		mutate(#
			Parent = replace(#
				Parent,#
				which(Parent=="Unkn"),#
				NA#
			)#
		) %>%#
		renameSpecies#
	Plant_Info_Analysis %<>%#
		arrange(First.Survey.Date.Alive) %>%#
		group_by(PlantID) %>%#
		dplyr::summarise(#
			Island 				= Island[1],#
			Network 			= Network[1],#
			# make sure they are all the same species#
			Species 			= Species[1],#
			# fix/verify#
			RecruitmentMode 	= paste(Unique(RecruitmentMode), collapse=","),#
			Parent 				= paste(Unique(Parent), collapse=","),#
			First.Survey.Date.Alive 	= First.Survey.Date.Alive[1]#
		) %>%#
		filter(!is.na(Network)) %>%#
		mutate(#
			RecruitmentMode = replace(#
				RecruitmentMode,#
				which(RecruitmentMode==""),#
				"Unknown"#
			),#
			Parent = replace(#
				Parent,#
				which(Parent=="NA" | Parent==""),#
				"Unknown"#
			)#
		)#
	# save to figure out if some plants were lost during processing#
	temp1 <- Plant_Info_Analysis$PlantID#
	# order#
	Plant_Info_Analysis %<>% arrange(desc(Island), desc(Parent))#
	# summarise insect presence on plants and in networks#
	# network_summary <- Plant_Surveys_by_Year %>%#
	#	group_by(Network) %>%#
	#	dplyr::summarise(#
	#		OldMothNetworkPres 	= Maximum(Old_Moth_Evidence_t),#
	#		MENetworkPres 		= Maximum(ME_t),#
	#		CANetworkPres 		= Maximum(CA_t),#
	#		MothNetworkPres 	= Maximum(Moth_Evidence_t)#
	#	)#
	Plant_summary <- Plant_Surveys_by_Year %>%#
		group_by(PlantID) %>%#
		dplyr::summarise(#
			OldMothPlantPres 	= Maximum(Old_Moth_Evidence_t),#
			MEPlantPres 		= Maximum(ME_t),#
			CAPlantPres 		= Maximum(CA_t),#
			MothPlantPres 		= Maximum(Moth_Evidence_t)#
		)#
	Plant_Info_Analysis %<>% #
		# merge(network_summary, by="Network") %>%#
		merge(Plant_summary, by="PlantID")#
	# get size at first survey#
	First_Size <- Plant_Surveys_by_Plant %>%#
		arrange(Date) %>%#
		group_by(PlantID) %>%#
		dplyr::summarise(#
			First.Survey.Date 		= Date[1],#
			minFecundityYear 		= Minimum(FecundityYear),#
			First_Size 				= Size_t[!(is.na(Size_t))][1],#
			First.Measurement.Date 	= Date[!(is.na(Size_t))][1],#
			min.Size 				= Minimum(Size_t),#
			max.Size 				= Maximum(Size_t),#
			LastDateAlive =#
				Maximum(Date[which(Dead==0 & Missing==0)]) %>% as.Date(origin="1970-01-01"),#
			FirstDeadObservation	= Date[which(Dead==1)][1],#
			FirstMissingObservation	= Date[which(Missing==1)][1],#
			FirstDeadMissingObservation = Minimum(#
				c(#
					FirstDeadObservation,#
					FirstMissingObservation#
				)#
			) %>% as.Date(origin="1970-01-01"),#
			# assume alive day before first observed: First.Survey.Date - 1#
			# also alive day of last survey: LastDateAlive + 1#
			minDaysAlive	= #
				(LastDateAlive + 1) - (First.Survey.Date - 1),#
			# assume last day alive was day before death observation: FirstDeadMissingObservation - 1#
			# assume alive day before first observed: First.Survey.Date - 1#
			# the 1s cancel out#
			maxDaysAlive	= #
				(FirstDeadMissingObservation - 1) -	(First.Survey.Date - 1)#
		)#
		First_Size$minDaysAlive %<>% as.numeric#
		First_Size$maxDaysAlive %<>% as.numeric %<>%#
			Replace_NA_w_Period_Function#
#
	Plant_Info_Analysis %<>% #
		merge(First_Size, by=c("PlantID"))#
	# WARNINGS	#
	temp <- Plant_Info_Analysis %>% #
		filter(grepl(",", RecruitmentMode)==TRUE)#
	if (dim(temp)[1] > 0) {#
		write.csv(temp, "InconsistentRecruitmentModePlantInfo.csv")#
		warning(paste(#
			"Inconsistent recruitment mode recorded for at least one plant spanning multiple plots. These plant info records have been written to csv."#
		))#
	}	#
	temp <- Plant_Info_Analysis %>% #
		filter(grepl(",", Parent)==TRUE)#
	if (dim(temp)[1] > 0) {#
		write.csv(temp, "InconsistentParentPlantInfo.csv")#
		warning(paste(#
			"Inconsistent Parent recorded for at least one plant spanning multiple plots. These plant info records have been written to csv."#
		))#
	}	#
	return(Plant_Info_Analysis)#
}
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
Plant_Info_Analysis <- createPlantInfobyPlant(Plant_Info, Plant_Surveys_by_Year)
head(Plant_Info_Analysis)
str(Plant_Info_Analysis)
unique(Plant_Info_Analysis$Parent)
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
Plant_Info_Survival <- Plant_Info_Analysis %>% #
	dplyr::select(-c(#
		FirstDeadObservation, #
		FirstMissingObservation, #
		FirstDeadMissingObservation#
	)) %>% #
	.[complete.cases(.),]
dim(Plant_Info_Analysis)
dim(Plant_Info_Survival)
Plant_Info_Analysis[which(!(Plant_Info_Survival$PlantID %in% Plant_Info_Analysis$PlantID)),]
Plant_Info_Analysis[which(!(Plant_Info_Analysis$PlantID  %in% Plant_Info_Survival$PlantID)),]
Plant_Info_Analysis[which(!(Plant_Info_Analysis$PlantID  %in% Plant_Info_Survival$PlantID)),] %>% filter(minDaysAlive > 2)
setwd('/Users/KSauby/Documents/Projects/GTMNERRproc/R')
temp <- Plant_Info_Analysis %>% #
		dplyr::select(-c(#
			FirstDeadObservation, #
			FirstMissingObservation, #
			FirstDeadMissingObservation#
		)) %>% #
		.[complete.cases(.),]#
	Plant_Info_Analysis[which(!(Plant_Info_Analysis$PlantID  %in% temp$PlantID)),] %>% filter(minDaysAlive > 2)
Plant_Surveys_by_Plant %>% filter(PlantID==7228)
Plant_Info %>% filter(PlantID==7228)
Plant_Surveys_by_Plant %>% filter(PlantID==7435)
Plant_Info %>% filter(PlantID==7435)
Plant_Surveys_by_Plant %>% filter(PlantID==7548)
Plant_Info %>% filter(PlantID==7458)
Plant_Surveys_by_Plant %>% filter(PlantID==7548)
Plant_Info %>% filter(PlantID==7548)
Plant_Surveys_by_Plant %>% filter(PlantID== 8653)
Plant_Info %>% filter(PlantID== 8653)
setwd('/Users/KSauby/Documents/Projects/GTMNERRproc/R')
temp <- Plant_Info_Analysis %>% #
		dplyr::select(-c(#
			FirstDeadObservation, #
			FirstMissingObservation, #
			FirstDeadMissingObservation#
		)) %>% #
		.[complete.cases(.),] %>%#
		filter(#
			PlantID != 7228 &#
			PlantID != 7435 &#
			PlantID != 7548 &#
			PlantID != 8653#
		)#
	Plant_Info_Analysis[which(!(Plant_Info_Analysis$PlantID %in% temp$PlantID)),] %>% filter(minDaysAlive > 2)
setwd('/Users/KSauby/Documents/Projects/GTMNERRproc/R')
Plant_Info_Analysis %>% #
		dplyr::select(-c(#
			FirstDeadObservation, #
			FirstMissingObservation, #
			FirstDeadMissingObservation#
		)) %>% #
		.[complete.cases(.),] %>%#
		filter(#
			PlantID != 7228 &#
			PlantID != 7435 &#
			PlantID != 7548 &#
			PlantID != 8653#
		)
setwd('/Users/KSauby/Documents/Projects/GTMNERRproc/R')
temp <- Plant_Info_Analysis %>% #
		dplyr::select(-c(#
			FirstDeadObservation, #
			FirstMissingObservation, #
			FirstDeadMissingObservation#
		)) %>% #
		.[complete.cases(.),] %>%#
		filter(#
			PlantID != 7228 &#
			PlantID != 7435 &#
			PlantID != 7548 &#
			PlantID != 8653#
		)#
	Plant_Info_Analysis[which(!(Plant_Info_Analysis$PlantID %in% temp$PlantID)),] %>% filter(minDaysAlive > 2)
setwd('/Users/KSauby/Documents/Projects/GTMNERRproc/R')
temp <- Plant_Info_Analysis %>% #
		dplyr::select(-c(#
			FirstDeadObservation, #
			FirstMissingObservation, #
			FirstDeadMissingObservation#
		)) %>% #
		.[complete.cases(.),]#
	Plant_Info_Analysis[which(!(Plant_Info_Analysis$PlantID %in% temp$PlantID)),] %>% filter(minDaysAlive > 2) %>%#
		filter(#
			PlantID != 7228 &#
			PlantID != 7435 &#
			PlantID != 7548 &#
			PlantID != 8653#
		)
setwd('/Users/KSauby/Documents/Projects/GTMNERRproc/R')
temp <- Plant_Info_Analysis %>% #
		dplyr::select(-c(#
			FirstDeadObservation, #
			FirstMissingObservation, #
			FirstDeadMissingObservation#
		)) %>% #
		.[complete.cases(.),]#
	temp2 <- Plant_Info_Analysis[which(!(Plant_Info_Analysis$PlantID %in% temp$PlantID)),] %>% #
		filter(minDaysAlive > 2,#
		PlantID != 7228 &#
		PlantID != 7435 &#
		PlantID != 7548 &#
		PlantID != 8653#
	)
setwd('/Users/KSauby/Documents/Projects/GTMNERRproc/R')
if (dim(temp2)[1] > 0) {#
		write.csv(temp, "PlantInfoMissingInfo.csv")#
		warning(paste(#
			"Some information missing from plant info for some plants. Data written to csv."#
		))#
	}
setwd('/Users/KSauby/Documents/Projects/GTMNERRproc/R')
#' Create Plant Info by Plant#
#'#
#' @description Create variables giving evidence of moths and insects, including moth presence or damage.#
#' @param Plant_Surveys_by_Plant Plant Survey Dataset#
#'#
#' @export#
#' @importFrom dataproc Unique#
#
createPlantInfobyPlant <- function(Plant_Info, Plant_Surveys_by_Year) {#
	# one record per plant#
	# 2849 records#
	Plant_Info_Analysis <- Plant_Info %>%#
		mutate(#
			Parent = replace(#
				Parent,#
				which(Parent=="Unkn"),#
				NA#
			)#
		) %>%#
		renameSpecies#
	Plant_Info_Analysis %<>%#
		arrange(First.Survey.Date.Alive) %>%#
		group_by(PlantID) %>%#
		dplyr::summarise(#
			Island 				= Island[1],#
			Network 			= Network[1],#
			# make sure they are all the same species#
			Species 			= Species[1],#
			# fix/verify#
			RecruitmentMode 	= paste(Unique(RecruitmentMode), collapse=","),#
			Parent 				= paste(Unique(Parent), collapse=","),#
			First.Survey.Date.Alive 	= First.Survey.Date.Alive[1]#
		) %>%#
		filter(!is.na(Network)) %>%#
		mutate(#
			RecruitmentMode = replace(#
				RecruitmentMode,#
				which(RecruitmentMode==""),#
				"Unknown"#
			),#
			Parent = replace(#
				Parent,#
				which(Parent=="NA" | Parent==""),#
				"Unknown"#
			)#
		)#
	# save to figure out if some plants were lost during processing#
	temp1 <- Plant_Info_Analysis$PlantID#
	# order#
	Plant_Info_Analysis %<>% arrange(desc(Island), desc(Parent))#
	# summarise insect presence on plants and in networks#
	# network_summary <- Plant_Surveys_by_Year %>%#
	#	group_by(Network) %>%#
	#	dplyr::summarise(#
	#		OldMothNetworkPres 	= Maximum(Old_Moth_Evidence_t),#
	#		MENetworkPres 		= Maximum(ME_t),#
	#		CANetworkPres 		= Maximum(CA_t),#
	#		MothNetworkPres 	= Maximum(Moth_Evidence_t)#
	#	)#
	Plant_summary <- Plant_Surveys_by_Year %>%#
		group_by(PlantID) %>%#
		dplyr::summarise(#
			OldMothPlantPres 	= Maximum(Old_Moth_Evidence_t),#
			MEPlantPres 		= Maximum(ME_t),#
			CAPlantPres 		= Maximum(CA_t),#
			MothPlantPres 		= Maximum(Moth_Evidence_t)#
		)#
	Plant_Info_Analysis %<>% #
		# merge(network_summary, by="Network") %>%#
		merge(Plant_summary, by="PlantID")#
	# get size at first survey#
	First_Size <- Plant_Surveys_by_Plant %>%#
		arrange(Date) %>%#
		group_by(PlantID) %>%#
		dplyr::summarise(#
			First.Survey.Date 		= Date[1],#
			minFecundityYear 		= Minimum(FecundityYear),#
			First_Size 				= Size_t[!(is.na(Size_t))][1],#
			First.Measurement.Date 	= Date[!(is.na(Size_t))][1],#
			min.Size 				= Minimum(Size_t),#
			max.Size 				= Maximum(Size_t),#
			LastDateAlive =#
				Maximum(Date[which(Dead==0 & Missing==0)]) %>% as.Date(origin="1970-01-01"),#
			FirstDeadObservation	= Date[which(Dead==1)][1],#
			FirstMissingObservation	= Date[which(Missing==1)][1],#
			FirstDeadMissingObservation = Minimum(#
				c(#
					FirstDeadObservation,#
					FirstMissingObservation#
				)#
			) %>% as.Date(origin="1970-01-01"),#
			# assume alive day before first observed: First.Survey.Date - 1#
			# also alive day of last survey: LastDateAlive + 1#
			minDaysAlive	= #
				(LastDateAlive + 1) - (First.Survey.Date - 1),#
			# assume last day alive was day before death observation: FirstDeadMissingObservation - 1#
			# assume alive day before first observed: First.Survey.Date - 1#
			# the 1s cancel out#
			maxDaysAlive	= #
				(FirstDeadMissingObservation - 1) -	(First.Survey.Date - 1)#
		)#
		First_Size$minDaysAlive %<>% as.numeric#
		First_Size$maxDaysAlive %<>% as.numeric %<>%#
			Replace_NA_w_Period_Function#
#
	Plant_Info_Analysis %<>% #
		merge(First_Size, by=c("PlantID"))#
	# ------------------------------------------------------ WARNING MESSAGES ##
	temp <- Plant_Info_Analysis %>% #
		filter(grepl(",", RecruitmentMode)==TRUE)#
	if (dim(temp)[1] > 0) {#
		write.csv(temp, "InconsistentRecruitmentModePlantInfo.csv")#
		warning(paste(#
			"Inconsistent recruitment mode recorded for at least one plant spanning multiple plots. These plant info records have been written to csv."#
		))#
	}	#
	temp <- Plant_Info_Analysis %>% #
		filter(grepl(",", Parent)==TRUE)#
	if (dim(temp)[1] > 0) {#
		write.csv(temp, "InconsistentParentPlantInfo.csv")#
		warning(paste(#
			"Inconsistent Parent recorded for at least one plant spanning multiple plots. These plant info records have been written to csv."#
		))#
	}	#
	temp <- Plant_Info_Analysis %>% #
		dplyr::select(-c(#
			FirstDeadObservation, #
			FirstMissingObservation, #
			FirstDeadMissingObservation#
		)) %>% #
		.[complete.cases(.),]#
	temp2 <- Plant_Info_Analysis[which(!(Plant_Info_Analysis$PlantID %in% temp$PlantID)),] %>% #
		filter(minDaysAlive > 2,#
		PlantID != 7228 &#
		PlantID != 7435 &#
		PlantID != 7548 &#
		PlantID != 8653#
	)#
	if (dim(temp2)[1] > 0) {#
		write.csv(temp, "PlantInfoMissingInfo.csv")#
		warning(paste(#
			"Some information missing from plant info for some plants. Data written to csv."#
		))#
	}#
	# ------------------------------------------------------------------------ ##
	return(Plant_Info_Analysis)#
}
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
Plant_Info_Survival <- Plant_Info_Analysis %>% #
	dplyr::select(-c(#
		FirstDeadObservation, #
		FirstMissingObservation, #
		FirstDeadMissingObservation#
	)) %>% #
	.[complete.cases(.),] %>%#
	renameSpecies
setwd('/Users/KSauby/Documents/Projects/GTMNERRproc/R')
#' Create Plant Info by Plant#
#'#
#' @description Create variables giving evidence of moths and insects, including moth presence or damage.#
#' @param Plant_Surveys_by_Plant Plant Survey Dataset#
#'#
#' @export#
#' @importFrom dataproc Unique#
#
createPlantInfobyPlant <- function(Plant_Info, Plant_Surveys_by_Year) {#
	# one record per plant#
	# 2849 records#
	Plant_Info_Analysis <- Plant_Info %>%#
		mutate(#
			Parent = replace(#
				Parent,#
				which(Parent=="Unkn"),#
				NA#
			)#
		) %>%#
		renameSpecies#
	Plant_Info_Analysis %<>%#
		arrange(First.Survey.Date.Alive) %>%#
		group_by(PlantID) %>%#
		dplyr::summarise(#
			Island 				= Island[1],#
			Network 			= Network[1],#
			# make sure they are all the same species#
			Species 			= Species[1],#
			# fix/verify#
			RecruitmentMode 	= paste(Unique(RecruitmentMode), collapse=","),#
			Parent 				= paste(Unique(Parent), collapse=","),#
			First.Survey.Date.Alive 	= First.Survey.Date.Alive[1]#
		) %>%#
		filter(!is.na(Network)) %>%#
		mutate(#
			RecruitmentMode = replace(#
				RecruitmentMode,#
				which(RecruitmentMode==""),#
				"Unknown"#
			),#
			Parent = replace(#
				Parent,#
				which(Parent=="NA" | Parent==""),#
				"Unknown"#
			)#
		)#
	# save to figure out if some plants were lost during processing#
	temp1 <- Plant_Info_Analysis$PlantID#
	# order#
	Plant_Info_Analysis %<>% arrange(desc(Island), desc(Parent))#
	# summarise insect presence on plants and in networks#
	# network_summary <- Plant_Surveys_by_Year %>%#
	#	group_by(Network) %>%#
	#	dplyr::summarise(#
	#		OldMothNetworkPres 	= Maximum(Old_Moth_Evidence_t),#
	#		MENetworkPres 		= Maximum(ME_t),#
	#		CANetworkPres 		= Maximum(CA_t),#
	#		MothNetworkPres 	= Maximum(Moth_Evidence_t)#
	#	)#
	Plant_summary <- Plant_Surveys_by_Year %>%#
		group_by(PlantID) %>%#
		dplyr::summarise(#
			OldMothPlantPres 	= Maximum(Old_Moth_Evidence_t),#
			MEPlantPres 		= Maximum(ME_t),#
			CAPlantPres 		= Maximum(CA_t),#
			MothPlantPres 		= Maximum(Moth_Evidence_t)#
		)#
	Plant_Info_Analysis %<>% #
		# merge(network_summary, by="Network") %>%#
		merge(Plant_summary, by="PlantID")#
	# get size at first survey#
	First_Size <- Plant_Surveys_by_Plant %>%#
		arrange(Date) %>%#
		group_by(PlantID) %>%#
		dplyr::summarise(#
			First.Survey.Date 		= Date[1],#
			minFecundityYear 		= Minimum(FecundityYear),#
			First_Size 				= Size_t[!(is.na(Size_t))][1],#
			First.Measurement.Date 	= Date[!(is.na(Size_t))][1],#
			min.Size 				= Minimum(Size_t),#
			max.Size 				= Maximum(Size_t),#
			LastDateAlive =#
				Maximum(Date[which(Dead==0 & Missing==0)]) %>% as.Date(origin="1970-01-01"),#
			FirstDeadObservation	= Date[which(Dead==1)][1],#
			FirstMissingObservation	= Date[which(Missing==1)][1],#
			FirstDeadMissingObservation = Minimum(#
				c(#
					FirstDeadObservation,#
					FirstMissingObservation#
				)#
			) %>% as.Date(origin="1970-01-01"),#
			# assume alive day before first observed: First.Survey.Date - 1#
			# also alive day of last survey: LastDateAlive + 1#
			minDaysAlive	= #
				(LastDateAlive + 1) - (First.Survey.Date - 1),#
			# assume last day alive was day before death observation: FirstDeadMissingObservation - 1#
			# assume alive day before first observed: First.Survey.Date - 1#
			# the 1s cancel out#
			maxDaysAlive	= #
				(FirstDeadMissingObservation - 1) -	(First.Survey.Date - 1)#
		)#
		First_Size$minDaysAlive %<>% as.numeric#
		First_Size$maxDaysAlive %<>% as.numeric %<>%#
			Replace_NA_w_Period_Function#
#
	Plant_Info_Analysis %<>% #
		merge(First_Size, by=c("PlantID")) %>%#
	   	renameSpecies#
	# ------------------------------------------------------ WARNING MESSAGES ##
	temp <- Plant_Info_Analysis %>% #
		filter(grepl(",", RecruitmentMode)==TRUE)#
	if (dim(temp)[1] > 0) {#
		write.csv(temp, "InconsistentRecruitmentModePlantInfo.csv")#
		warning(paste(#
			"Inconsistent recruitment mode recorded for at least one plant spanning multiple plots. These plant info records have been written to csv."#
		))#
	}	#
	temp <- Plant_Info_Analysis %>% #
		filter(grepl(",", Parent)==TRUE)#
	if (dim(temp)[1] > 0) {#
		write.csv(temp, "InconsistentParentPlantInfo.csv")#
		warning(paste(#
			"Inconsistent Parent recorded for at least one plant spanning multiple plots. These plant info records have been written to csv."#
		))#
	}	#
	temp <- Plant_Info_Analysis %>% #
		dplyr::select(-c(#
			FirstDeadObservation, #
			FirstMissingObservation, #
			FirstDeadMissingObservation#
		)) %>% #
		.[complete.cases(.),]#
	temp2 <- Plant_Info_Analysis[which(!(Plant_Info_Analysis$PlantID %in% temp$PlantID)),] %>% #
		filter(minDaysAlive > 2,#
		PlantID != 7228 &#
		PlantID != 7435 &#
		PlantID != 7548 &#
		PlantID != 8653#
	)#
	if (dim(temp2)[1] > 0) {#
		write.csv(temp, "PlantInfoMissingInfo.csv")#
		warning(paste(#
			"Some information missing from plant info for some plants. Data written to csv."#
		))#
	}#
	# ------------------------------------------------------------------------ ##
	return(Plant_Info_Analysis)#
}
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
Plant_Info_Survival <- Plant_Info_Analysis %>% #
	dplyr::select(-c(#
		FirstDeadObservation, #
		FirstMissingObservation, #
		FirstDeadMissingObservation#
	)) %>% #
	.[complete.cases(.),]
dim(Plant_Info_Survival)
setwd('/Users/KSauby/Documents/Projects/GTMNERRproc/R')
#' Create Plant Info by Plant#
#'#
#' @description Create variables giving evidence of moths and insects, including moth presence or damage.#
#' @param Plant_Surveys_by_Plant Plant Survey Dataset#
#'#
#' @export#
#' @importFrom dataproc Unique#
#
createPlantInfobyPlant <- function(Plant_Info, Plant_Surveys_by_Year) {#
	# one record per plant#
	# 2849 records#
	Plant_Info_Analysis <- Plant_Info %>%#
		mutate(#
			Parent = replace(#
				Parent,#
				which(Parent=="Unkn"),#
				NA#
			)#
		) %>%#
		renameSpecies#
	Plant_Info_Analysis %<>%#
		arrange(First.Survey.Date.Alive) %>%#
		group_by(PlantID) %>%#
		dplyr::summarise(#
			Island 				= Island[1],#
			Network 			= Network[1],#
			# make sure they are all the same species#
			Species 			= Species[1],#
			# fix/verify#
			RecruitmentMode 	= paste(Unique(RecruitmentMode), collapse=","),#
			Parent 				= paste(Unique(Parent), collapse=","),#
			First.Survey.Date.Alive 	= First.Survey.Date.Alive[1]#
		) %>%#
		filter(!is.na(Network)) %>%#
		mutate(#
			RecruitmentMode = replace(#
				RecruitmentMode,#
				which(RecruitmentMode==""),#
				"Unknown"#
			),#
			Parent = replace(#
				Parent,#
				which(Parent=="NA" | Parent==""),#
				"Unknown"#
			)#
		)#
	# save to figure out if some plants were lost during processing#
	temp1 <- Plant_Info_Analysis$PlantID#
	# order#
	Plant_Info_Analysis %<>% arrange(desc(Island), desc(Parent))#
	# summarise insect presence on plants and in networks#
	# network_summary <- Plant_Surveys_by_Year %>%#
	#	group_by(Network) %>%#
	#	dplyr::summarise(#
	#		OldMothNetworkPres 	= Maximum(Old_Moth_Evidence_t),#
	#		MENetworkPres 		= Maximum(ME_t),#
	#		CANetworkPres 		= Maximum(CA_t),#
	#		MothNetworkPres 	= Maximum(Moth_Evidence_t)#
	#	)#
	Plant_summary <- Plant_Surveys_by_Year %>%#
		group_by(PlantID) %>%#
		dplyr::summarise(#
			OldMothPlantPres 	= Maximum(Old_Moth_Evidence_t),#
			MEPlantPres 		= Maximum(ME_t),#
			CAPlantPres 		= Maximum(CA_t),#
			MothPlantPres 		= Maximum(Moth_Evidence_t)#
		)#
	Plant_Info_Analysis %<>% #
		# merge(network_summary, by="Network") %>%#
		merge(Plant_summary, by="PlantID")#
	# get size at first survey#
	First_Size <- Plant_Surveys_by_Plant %>%#
		arrange(Date) %>%#
		group_by(PlantID) %>%#
		dplyr::summarise(#
			First.Survey.Date 		= Date[1],#
			minFecundityYear 		= Minimum(FecundityYear),#
			First_Size 				= Size_t[!(is.na(Size_t))][1],#
			First.Measurement.Date 	= Date[!(is.na(Size_t))][1],#
			min.Size 				= Minimum(Size_t),#
			max.Size 				= Maximum(Size_t),#
			LastDateAlive =#
				Maximum(Date[which(Dead==0 & Missing==0)]) %>% as.Date(origin="1970-01-01"),#
			FirstDeadObservation	= Date[which(Dead==1)][1],#
			FirstMissingObservation	= Date[which(Missing==1)][1],#
			FirstDeadMissingObservation = Minimum(#
				c(#
					FirstDeadObservation,#
					FirstMissingObservation#
				)#
			) %>% as.Date(origin="1970-01-01"),#
			# assume alive day before first observed: First.Survey.Date - 1#
			# also alive day of last survey: LastDateAlive + 1#
			minDaysAlive	= #
				(LastDateAlive + 1) - (First.Survey.Date - 1),#
			# assume last day alive was day before death observation: FirstDeadMissingObservation - 1#
			# assume alive day before first observed: First.Survey.Date - 1#
			# the 1s cancel out#
			maxDaysAlive	= #
				(FirstDeadMissingObservation - 1) -	(First.Survey.Date - 1)#
		)#
		First_Size$minDaysAlive %<>% as.numeric#
		First_Size$maxDaysAlive %<>% as.numeric %<>%#
			Replace_NA_w_Period_Function#
#
	Plant_Info_Analysis %<>% #
		merge(First_Size, by=c("PlantID")) %>%#
	   	renameSpecies %>%#
		mutate(#
			HabitatType = NA,#
			HabitatType = replace(#
				HabitatType,#
				which(#
					Island=="Roadway1" |#
					Island=="Roadway2"#
				),#
				"Barrier Island Habitat"#
			),#
			HabitatType = replace(#
				HabitatType,#
				which(#
					Island!="Roadway1" &#
					Island!="Roadway2"#
				),#
				"Intracoastal Waterway Island"#
			)#
		)#
	# ------------------------------------------------------ WARNING MESSAGES ##
	temp <- Plant_Info_Analysis %>% #
		filter(grepl(",", RecruitmentMode)==TRUE)#
	if (dim(temp)[1] > 0) {#
		write.csv(temp, "InconsistentRecruitmentModePlantInfo.csv")#
		warning(paste(#
			"Inconsistent recruitment mode recorded for at least one plant spanning multiple plots. These plant info records have been written to csv."#
		))#
	}	#
	temp <- Plant_Info_Analysis %>% #
		filter(grepl(",", Parent)==TRUE)#
	if (dim(temp)[1] > 0) {#
		write.csv(temp, "InconsistentParentPlantInfo.csv")#
		warning(paste(#
			"Inconsistent Parent recorded for at least one plant spanning multiple plots. These plant info records have been written to csv."#
		))#
	}	#
	temp <- Plant_Info_Analysis %>% #
		dplyr::select(-c(#
			FirstDeadObservation, #
			FirstMissingObservation, #
			FirstDeadMissingObservation#
		)) %>% #
		.[complete.cases(.),]#
	temp2 <- Plant_Info_Analysis[which(!(Plant_Info_Analysis$PlantID %in% temp$PlantID)),] %>% #
		filter(minDaysAlive > 2,#
		PlantID != 7228 &#
		PlantID != 7435 &#
		PlantID != 7548 &#
		PlantID != 8653#
	)#
	if (dim(temp2)[1] > 0) {#
		write.csv(temp, "PlantInfoMissingInfo.csv")#
		warning(paste(#
			"Some information missing from plant info for some plants. Data written to csv."#
		))#
	}#
	# ------------------------------------------------------------------------ ##
	return(Plant_Info_Analysis)#
}
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
Plant_Info_Analysis <- createPlantInfobyPlant(Plant_Info, Plant_Surveys_by_Year)
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
# createMothOccupancyVariable#
Plant_Info_stricta <- Plant_Info_Analysis %>% filter(Species=="stricta")#
Plant_Info_pusilla <- Plant_Info_Analysis %>% filter(Species=="pusilla")#
write.csv(Plant_Info_Analysis, "../data/Plant_Info_Analysis.csv")#
write.csv(Plant_Info_stricta, "../data/Plant_Info_Analysis_stricta.csv")#
write.csv(Plant_Info_pusilla, "../data/Plant_Info_Analysis_pusilla.csv")#
# --------------------------------------------------------------------------- ##
# Survival#
# --------------------------------------------------------------------------- ##
# No plant should be recorded as alive less than 2 days#
temp <- Plant_Info_Analysis %>% filter(minDaysAlive < 2)#
if (dim(temp)[1] > 0) {#
	write.csv(temp,"PlantsAliveLessThan2Days.csv")#
	warning(paste(#
		"Some plants are recorded as alive for less than 2 days. Records written to csv."#
	))#
}	#
#
Plant_Info_Survival <- Plant_Info_Analysis %>% #
	dplyr::select(-c(#
		FirstDeadObservation, #
		FirstMissingObservation, #
		FirstDeadMissingObservation#
	)) %>% #
	.[complete.cases(.),]#
# Plant_Info_Survival %<>% #
	#renamePatches %>%#
	#createDeadFactorVariable#
Plant_Info_Survival_stricta <- Plant_Info_Survival %>% #
	filter(Species=="Opuntia stricta") # %>% 	dplyr::select(-c(MothOccupancy, IslandFullNames, DeadFactor))#
Plant_Info_Survival_pusilla <- Plant_Info_Survival %>% #
	filter(Species=="Opuntia pusilla") # %>% 	dplyr::select(-c(MothOccupancy, IslandFullNames, DeadFactor))#
write.csv(Plant_Info_Survival_stricta, "../data/Plant_Info_Survival_stricta.csv")#
write.csv(Plant_Info_Survival_pusilla, "../data/Plant_Info_Survival_pusilla.csv")
head(Plant_Info_Survival_stricta)
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
Plant_Info_Survival <- Plant_Info_Analysis %>% #
	dplyr::select(-c(#
		FirstDeadObservation, #
		FirstMissingObservation, #
		FirstDeadMissingObservation,#
		First.Survey.Date,#
		First.Survey.Date.Alive,#
		First.Measurement.Date,#
		LastDateAlive#
	)) %>% #
	.[complete.cases(.),]
head(Plant_Info_Survival_stricta)
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
#renamePatches %>%#
	#createDeadFactorVariable#
Plant_Info_Survival_stricta <- Plant_Info_Survival %>% #
	filter(Species=="Opuntia stricta") # %>% 	dplyr::select(-c(MothOccupancy, IslandFullNames, DeadFactor))#
Plant_Info_Survival_pusilla <- Plant_Info_Survival %>% #
	filter(Species=="Opuntia pusilla") # %>% 	dplyr::select(-c(MothOccupancy, IslandFullNames, DeadFactor))#
write.csv(Plant_Info_Survival_stricta, "../data/Plant_Info_Survival_stricta.csv")#
write.csv(Plant_Info_Survival_pusilla, "../data/Plant_Info_Survival_pusilla.csv")
head(Plant_Info_Survival_stricta)
setwd('/Users/KSauby/Documents/Projects')
setwd("./GTMNERRproc")#
#setwd("./dataproc")#
#setwd("./modresproc")#
#setwd("./unmarked")#
#setwd("./RPresence")#
#devtools::test()#
devtools::document()#
devtools::install()
