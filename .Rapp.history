26/37 - .6757
28/37
30/37
29/37
37-12
25/37
219*.8
219*.8 - 17
26/3
17/900
42/900
49/900
29/40
1/25
8/25
10/25
(7.5 + 3.75)/15
12*0.75
11 * 0.75
11/15
11*0.25
11/15 * 6
32/41 +0.03.5
32/41 + 0.035
(32/41 + 0.035)*100
100/41
23/40 * 100
(23/40 * 100)+5
(164 + 13.5 + 6)
(164 + 13.5 + 6)/365
(164 + 13.5 + 6 + (50))/365
(164 + 13.5 + 6 + (60))/365
(164 + 13.5 + 6 + (70))/365
(164 + 13.5 + 6 + (75))/365
102/40
102/41
?table
9.49/2
12.75+8.25
(10.5 + 6.5)/(12.75+8.25)
.25^2 * 2
(.25^2 * 2)^0.5
(.25^2 * 2)^0.5 * 2
3/8
5/8
6/8
30*1.5
40*15
40*1.5
13.25 - 4.5
(276.29+8.75)/365
16*3
16*4
84/12
9/12
9/12*14
22+60+78+80+88+98
22+38+18+2+8+10
239/785
(239+53)/785
.492+.139
.412+.166+.002
.412/.58
.166/.58
.412*.58
.71*.58
98-54
22+49+43+33+36+44
60-11
78-26
80-35
88-47
98-52
22+49+52+45+41+46
library(RMark)
?test_ddl
data(dipper)    dipper.processed=process.data(dipper,groups=("sex"))    release.gof(dipper.processed)
4+19+7+12
4+17.83+7+12
40.83/42
40.83/42*14
14
(11.25+5)/(25.5 + 10.25 - 14)
365*0.6666
365*0.6666 - 75.89
5/6 * 2
5/6 * 2 + 75.89
365*0.6666 -77.55667
365*0.6666 -77.55667 - 6 - 13 - 1
145.7523/2
15*3
11*5
8/12*14
4+15.33+5.5+12
(4+15.33+5.5+12)
(4+15.33+5.5+12)/(4+19+7+12)
(4+19+7+12)
(4+15.33+5.5+12)/(4+19+7+12)*14
2.5+17.5+12
32/42
32/42 * 14
4+12+6.5+12
(4+12+6.5+12)/42 * 14
5/6*2
5/6*2 + 0.25
5/6*2 + 0.5
2577.77/12
15/20
15/20*6
300 - 4*50
300 - 4*40
4.5/12*14
9+9+7+9
33.5/34 * 14
32/34 * 14
32/34*14
7+8.5+7+7
(7+8.5+7+7)/34 * 14
(7+5.5+5.5+8.5)/34 * 14
(7+5.5+5.5+8.5)/(9+7+9+9) * 14
9+7+9+9
(14.25+7.25)/(24.75+10.25-9)
(16.5+7.75)/(24.75+10.25)
(16.5+7.75)/(24.75+10.25)*6
(5.25+5.5)/(22.5+10.5)
(5.25+5.5)/(22.5+10.5)*6
(9.75+5.5)/(24.7+10.25-5)*6
(9.75+5.5)/(24.7+10.25-5)
3.98/6
(9.75+5.5)/(24.7+10.25-10)
(9.75+5.5)/(24.7+10.25-10)*6
5/6*2
1.83-5/6*2
1.83-4/6*2
5/6*2 + 0.5
4/6*2 + 0.5
4/6*2
4/6 + 0.5
4/6*2 + 0.5
33/34 * 14
17.5*4
24*4 + 1.75*4
library(dplyr)
library(plyr)
600*.22
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis')
library(ProjectTemplate)#
#
# when working on a Windows computer#
# setwd("C:/Users/KSauby/Dropbox/gradschool/Research/Projects/sampling")#
#
# load project#
load.project()
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis')
reload.project()
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/Manuscript/Demography/Vital_Rate_ Appendix/Survival')
rmarkdown::render('Appendix4_Survival_model_selection.Rmd')
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/Manuscript/Demography/Vital_Rate_ Appendix/Survival')
fit.statistics <- Survival.stricta.icphreg.fit.statistics #
#
fit.statistics %<>% #
	dcast(modelVars ~ Criterion, value.var = "Value")#
fit.statistics %<>%#
	dplyr::select(#
		modelVars,    #
		`BIC (Smaller is Better)`#
	)#
type.3.tests <- Survival.stricta.icphreg.type.3.tests #
#
type.3.tests %<>% #
	dcast(modelVars ~ Effect, value.var = "ProbChiSq")#
#
type.3.tests %>% #
	merge(fit.statistics, by="modelVars") %>%#
	setnames("modelVars", "Cubic Splines DF") %>%#
	setnames("BIC (Smaller is Better)","BIC") %>%#
	setnames("CAPlantPres","Invasive Moth") %>%#
	setnames("MEPlantPres","Native Moth") %>%#
	setnames("OldMothPlantPres","Moth Damage Evidence") %>%#
	setnames("RecruitmentMode","Recruitment Mode") %>%#
	dplyr::select(#
		`Cubic Splines DF`,#
		`Invasive Moth`,#
		`Native Moth`,#
		`Moth Damage Evidence`,#
		`Recruitment Mode`,#
		Network,#
		BIC#
	) %>%#
	BIC_function %>%#
	pandoc.table(#
		split.tables=700,#
		split.cells=30,#
		keep.line.breaks = T#
)
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/Manuscript/Demography/Vital_Rate_ Appendix/Survival')
Survival.stricta.icphreg.type.3.tests
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis')
reload.project()
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/Manuscript/Demography/Vital_Rate_ Appendix/Survival')
rmarkdown::render('Appendix4_Survival_model_selection.Rmd')
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/Manuscript/Demography/Vital_Rate_ Appendix/Survival')
Survival.stricta.icphreg.type.3.tests
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/Manuscript/Demography/Vital_Rate_ Appendix/Survival')
rmarkdown::render('Appendix4_Survival_model_selection.Rmd')
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/Manuscript/Demography/Vital_Rate_ Appendix/Survival')
Survival.stricta.icphreg.type.3.tests
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis')
reload.project()
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/Manuscript/Demography/Vital_Rate_ Appendix/Survival')
rmarkdown::render('Appendix4_Survival_model_selection.Rmd')
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/Manuscript/Demography/Vital_Rate_ Appendix/Survival')
fit.statistics <- Survival.stricta.icphreg.fit.statistics #
#
fit.statistics %<>% #
	dcast(modelVars ~ Criterion, value.var = "Value")#
fit.statistics %<>%#
	dplyr::select(#
		modelVars,    #
		`BIC (Smaller is Better)`#
	)#
type.3.tests <- Survival.stricta.icphreg.type.3.tests #
#
type.3.tests %<>% #
	dcast(modelVars ~ Effect, value.var = "ProbChiSq")#
#
type.3.tests %>% #
	merge(fit.statistics, by="modelVars") %>%#
	setnames("modelVars", "Cubic Splines DF") %>%#
	setnames("BIC (Smaller is Better)","BIC") %>%#
	setnames("CAPlantPres","Invasive Moth") %>%#
	setnames("MEPlantPres","Native Moth") %>%#
	setnames("OldMothPlantPres","Moth Damage Evidence") %>%#
	#setnames("RecruitmentMode","Recruitment Mode") %>%#
	dplyr::select(#
		`Cubic Splines DF`,#
		`Invasive Moth`,#
		`Native Moth`,#
		`Moth Damage Evidence`,#
		Clonal,#
		Seedling,#
		Network,#
		BIC#
	) %>%#
	BIC_function %>%#
	pandoc.table(#
		split.tables=700,#
		split.cells=30,#
		keep.line.breaks = T#
)
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/Manuscript/Demography/Vital_Rate_ Appendix/Survival')
rmarkdown::render('Appendix4_Survival_model_selection.Rmd')
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/Manuscript/Demography/Vital_Rate_ Appendix/Survival')
fit.statistics <- Survival.stricta.icphreg.fit.statistics #
#
fit.statistics %<>% #
	dcast(modelVars ~ Criterion, value.var = "Value")#
fit.statistics %<>%#
	dplyr::select(#
		modelVars,    #
		`BIC (Smaller is Better)`#
	)#
type.3.tests <- Survival.stricta.icphreg.type.3.tests #
#
type.3.tests %<>% #
	dcast(modelVars ~ Effect, value.var = "ProbChiSq")#
#
type.3.tests %>% #
	merge(fit.statistics, by="modelVars") %>%#
	setnames("modelVars", "Cubic Splines DF") %>%#
	setnames("BIC (Smaller is Better)","BIC") %>%#
	setnames("CAPlantPres","Invasive Moth") %>%#
	setnames("MEPlantPres","Native Moth") %>%#
	setnames("OldMothPlantPres","Moth Damage Evidence") %>%#
	#setnames("RecruitmentMode","Recruitment Mode") %>%#
	dplyr::select(#
		`Cubic Splines DF`,#
		`Invasive Moth`,#
		`Native Moth`,#
		`Moth Damage Evidence`,#
		Clonal,#
		BIC#
	) %>%#
	BIC_function %>%#
	pandoc.table(#
		split.tables=700,#
		split.cells=30,#
		keep.line.breaks = T#
)
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/Manuscript/Demography/Vital_Rate_ Appendix/Survival')
rmarkdown::render('Appendix4_Survival_model_selection.Rmd')
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/Manuscript/Demography/Vital_Rate_ Appendix/Survival')
Survival.stricta.icphreg.fit.statistics
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/Manuscript/Demography/Vital_Rate_ Appendix/Survival')
Survival.stricta.icphreg.type.3.tests
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis')
reload.project()
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/Manuscript/Demography/Vital_Rate_ Appendix/Survival')
rmarkdown::render('Appendix4_Survival_model_selection.Rmd')
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/Manuscript/Demography/Vital_Rate_ Appendix/Survival')
rmarkdown::render('Appendix4_Survival_model_selection.Rmd')
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/Manuscript/Demography/Vital_Rate_ Appendix')
rmarkdown::render('Manuscript.Rmd')
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/Manuscript/Demography/Vital_Rate_ Appendix/Recruitment')
rmarkdown::render('Appendix4_Recruitment.Rmd')
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/Manuscript/Demography/Vital_Rate_ Appendix/Fruit_Production')
rmarkdown::render('Appendix_fruit_production_model_selection.Rmd')
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/Manuscript/Demography/Vital_Rate_ Appendix/Clone_Production')
rmarkdown::render('Appendix_clone_production_model_selection.Rmd')
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/Manuscript/Demography/Vital_Rate_ Appendix')
rmarkdown::render('Manuscript.Rmd')
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
Plant.Info.Analysis %<>% #
	rowwise() %>%#
	mutate(#
		DaysBetweenFirstLastSurvey = (as.Date(LastDateAlive) + 1) - (as.Date(First.Survey.Date.Alive) - 1)#
	)
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis')
cache("Plant.Info.Analysis")
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/Manuscript/Demography/Vital_Rate_ Appendix')
rmarkdown::render('Manuscript.Rmd')
str(Plant.Info)
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
# ---------------------------------------------------------- Shorten names#
Plot.Info <- OccupancySRSWOR.Plot.Surveys.Info#
Plot.Surveys <- OccupancySRSWOR.Plot.Surveys#
Plant.Surveys <- Demographic.Plant.Surveys#
# Plant.Surveys <- Plant.Surveys.processed.26jun17#
Plant.Info <- Demographic.Plant.Info#
# Plant.Info <- Plant.Info.processed.26jun17#
Plant.Surveys.All <- Demographic.Plant.Surveys#
Plant.Info.All <- Demographic.Plant.Info#
D.Plot.Surveys <- Demographic.Plot.Surveys#
Original.Plant.Data <- Original.Demographic.Plant.Data#
Seed.Abund <- Seed.Abundance#
Seed.Abund.Surveys <- Seed.Abundance.Surveys#
GIS.data.upd <- GIS.data.updated
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
D.Plot.Surveys$Date %<>% as.Date("%m/%d/%Y") # Demographic Plot Surveys#
Plant.Surveys %<>% processPlantSurveys(Plant.Info) # Plant Surveys#
Plant.Surveys %<>% fixInconsistentDeadMissingRecords#
#
placeholder <- Plant.Info#
#
Plant.Info %<>% processPlantInfo(Plot.Info, Plant.Surveys)
str(Plant.Info)
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
# ---------------------------------------------------------- Shorten names#
Plot.Info <- OccupancySRSWOR.Plot.Surveys.Info#
Plot.Surveys <- OccupancySRSWOR.Plot.Surveys#
Plant.Surveys <- Demographic.Plant.Surveys#
# Plant.Surveys <- Plant.Surveys.processed.26jun17#
Plant.Info <- Demographic.Plant.Info#
# Plant.Info <- Plant.Info.processed.26jun17#
Plant.Surveys.All <- Demographic.Plant.Surveys#
Plant.Info.All <- Demographic.Plant.Info#
D.Plot.Surveys <- Demographic.Plot.Surveys#
Original.Plant.Data <- Original.Demographic.Plant.Data#
Seed.Abund <- Seed.Abundance#
Seed.Abund.Surveys <- Seed.Abundance.Surveys#
GIS.data.upd <- GIS.data.updated
str(Plant.Info)
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
D.Plot.Surveys$Date %<>% as.Date("%m/%d/%Y") # Demographic Plot Surveys#
Plant.Surveys %<>% processPlantSurveys(Plant.Info) # Plant Surveys#
Plant.Surveys %<>% fixInconsistentDeadMissingRecords#
#
placeholder <- Plant.Info#
#
Plant.Info %<>% processPlantInfo(Plot.Info, Plant.Surveys)
str(Plant.Surveys)
Plant.Surveys %>% filter(DeadDuetoMothDamage=="Yes") %>% dim
Plant.Surveys %>% filter(DeadDuetoMothDamage=="Yes") %>% head
Plant.Surveys %>% filter(DeadDuetoMothDamage=="Yes") %$% unique(PlantID)
Plant.Surveys %>% filter(DeadDuetoMothDamage=="Yes") %$% length(unique(PlantID))
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/Manuscript/Demography/Vital_Rate_ Appendix')
DeadDuetoMothDamage <- Plant.Surveys %>% #
filter(DeadDuetoMothDamage=="Yes") %$% #
length(unique(PlantID))
setwd('/Users/KSauby/Documents/Projects')
setwd("./GTMNERRproc")#
#setwd("./dataproc")#
#setwd("./modresproc")#
#setwd("./unmarked")#
#setwd("./RPresence")#
#devtools::test()#
devtools::document()#
devtools::install()
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
# ---------------------------------------------------------- Shorten names#
Plot.Info <- OccupancySRSWOR.Plot.Surveys.Info#
Plot.Surveys <- OccupancySRSWOR.Plot.Surveys#
Plant.Surveys <- Demographic.Plant.Surveys#
# Plant.Surveys <- Plant.Surveys.processed.26jun17#
Plant.Info <- Demographic.Plant.Info#
# Plant.Info <- Plant.Info.processed.26jun17#
Plant.Surveys.All <- Demographic.Plant.Surveys#
Plant.Info.All <- Demographic.Plant.Info#
D.Plot.Surveys <- Demographic.Plot.Surveys#
Original.Plant.Data <- Original.Demographic.Plant.Data#
Seed.Abund <- Seed.Abundance#
Seed.Abund.Surveys <- Seed.Abundance.Surveys#
GIS.data.upd <- GIS.data.updated
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
D.Plot.Surveys$Date %<>% as.Date("%m/%d/%Y") # Demographic Plot Surveys#
Plant.Surveys %<>% processPlantSurveys(Plant.Info) # Plant Surveys#
Plant.Surveys %<>% fixInconsistentDeadMissingRecords#
#
placeholder <- Plant.Info#
#
Plant.Info %<>% processPlantInfo(Plot.Info, Plant.Surveys)#
#
# edit 9164 - recorded missing three consecutive records#
Plant.Surveys %<>%#
mutate(#
	Missing = replace(#
		Missing,#
		which(PlantID==9164 & Date=="2013-07-18"),#
		NA#
	),#
	Missing = replace(#
		Missing,#
		which(PlantID==9164 & Date=="2014-01-10"),#
		NA#
	),#
	Dead = replace(#
		Dead,#
		which(PlantID==9164 & Date=="2014-01-10"),#
		NA#
	),#
	Missing = replace(#
		Missing,#
		which(PlantID==9164 & Date=="2014-06-09"),#
		NA#
	)#
)#
# measured two days in a row; remove second measurement#
Plant.Surveys %<>% filter(!(PlantID==9282 & Date=="2014-06-15"))#
Plant.Surveys %<>% filter(!(PlotPlantID=="9352" & Date=="2015-05-26"))#
#
# saved here#
# write.csv(Plant.Surveys, "../data/Plant_Surveys_processed_26jun17.csv")#
# write.csv(Plant.Info, "../data/Plant_Info_processed_26jun17.csv")#
Plant.Surveys$Date %<>% as.Date#
#
Plant.Surveys <- Plant.Info %>%#
	group_by(PlantID) %>%#
	dplyr::summarise(#
		N.PlotPlantIDs = length(unique(PlotPlantID))#
	) %>%#
	merge(Plant.Surveys, by="PlantID")#
Plant.Surveys.by.Plant <- Plant.Surveys %>% #
	processSurveysMergedbyPlant(Plant.Info)
setwd('/Users/KSauby/Documents/Projects/GTMNERRproc/R')
temp.A <- filter(Plant.Surveys, N.PlotPlantIDs > 1) %>% arrange(Date)#
	Z = list()#
	for (i in 1:length(unique(temp.A$PlantID))) {#
		# pull all records for this PlantID from the plant surveys#
		L = filter(temp.A, PlantID==unique(temp.A$PlantID)[i])#
		# group by window of dates#
		if (max(L$Date) - min(L$Date) > #
			SequenceofDates[2] - SequenceofDates[1]) {#
			L.list <- L %>%#
				split(#
				.,#
				cut(#
					L$Date,#
					SequenceofDates#
				)#
			)#
			L.list %<>% .[sapply(., function(x) dim(x)[1]) > 0]#
			L.list %<>% lapply(., function(x) split(x, x$DemographicSurvey))#
			L.list %<>% unlist(recursive=F)#
			list.names <- gsub("\\..*","", names(L.list))#
			demography.surveys <- gsub("^.*\\.","", names(L.list))#
			Z[[i]] 	<- data.frame(#
				Date = list.names,#
				DemographicSurvey = demography.surveys#
			)#
		} else {#
			L.list <- list(L)#
			names(L.list) <- max(L.list[[1]]$Date)#
			Z[[i]] <- data.frame(Date = max(L.list[[1]]$Date))#
		}#
		Z[[i]][, "PlantID"] 			<- L$PlantID[1]#
		# for each window of dates#
		for (j in 1:length(names(L.list))) {#
			K <- eval(parse(text=paste(#
				"L.list$", #
				'"', #
				names(L.list)[j], #
				'"', #
				sep=""#
			)))#
			# save range of dates used to create whole plant survey#
			if (length(unique(K$Date)) > 1) {#
				Z[[i]][j, "RangeofDates"] <- paste(#
					K$Date[1], #
					" - ", #
					tail(K$Date, n=1),#
					sep=""#
				)#
				Z[[i]][j, "SizeofDateRange"] <- max(K$Date) - min(K$Date)#
				Z[[i]][j, "maxDate"] <- as.character(max(K$Date))#
			} else {#
				Z[[i]][j, "RangeofDates"] <- as.character(K$Date[1])#
				Z[[i]][j, "SizeofDateRange"] <- 0#
				Z[[i]][j, "maxDate"] <- as.character(max(K$Date))#
			}#
			# pull all plant survey records for this date from plant surveys within the window of dates, excluding dead/missing#
			M <- K %>% filter(Dead != 1, Missing != 1)#
			# --------------------------------------------------------- WARNINGS#
			# throw error if a plotplantID is surveyed multiple times within this window and multiple records have size measurements#
			temp <- M %>% filter(SegmentsMeasured > 0) %>%#
				dplyr::add_count(PlotPlantID) %>%				#
				filter(n > 1)#
			if (dim(temp)[1] > 0) {#
				warning(paste(#
					"Multiple records of segment counts for PlotPlantID", #
					M$PlotPlantID[1], #
					"around date", #
					paste(M$Date, collapse=",")#
				))#
			}#
			temp <- M %>% filter(FruitMeasured > 0) %>%#
				dplyr::add_count(PlotPlantID) %>%				#
				filter(n > 1)#
			if (dim(temp)[1] > 0) {#
				warning(paste(#
					"Multiple size records of fruit counts for PlotPlantID", #
					M$PlotPlantID[1], #
					"around date", #
					paste(M$Date, collapse=",")#
				))#
			}#
			temp <- M %>% filter(SizeMeasured > 0) %>%#
				dplyr::add_count(PlotPlantID) %>%				#
				filter(n > 1)#
			if (dim(temp)[1] > 0) {#
				warning(paste(#
					"Multiple records of size measurements for PlotPlantID", #
					M$PlotPlantID[1], #
					"around date", #
					paste(M$Date, collapse=",")#
				))#
			}#
			# ---------------------------------------------------------------- ##
			# get list of PlotPlantIDs alive at this time#
			# plant would be dead if no PlantID records showed up in N#
			N = Plant.Info %>%#
				filter( #
					PlantID==L$PlantID[1], #
					# only include plants that are listed as having been added to Plant.Info on or after Date#
					First.Survey.Date.Alive <= #
						as.Date(Z[[i]]$Date[j]) + date.window,#
					# exclude dead plants (including date plant was first recorded as dead)#
					FirstDeadMissingObservation > #
						as.Date(Z[[i]]$Date[j]) + date.window | #
						is.na(FirstDeadMissingObservation)==T#
				)	#
			# pull all surveys where plant was marked dead#
			O <- K %>% filter(Dead == 1 | Missing == 1)#
			# the plant can only be marked dead if no live part was surveyed and no parts remained unsurveyed#
			if (dim(M)[1] == 0 & dim(N)[1] == 0 & dim(O)[1] > 0) {#
				Z[[i]][j, "Dead"]	 <- Maximum(O$Dead)#
				Z[[i]][j, "Missing"] <- Maximum(O$Missing)#
				Z[[i]][j, "AllSurveyed"] 			<- "TRUE"#
				Z[[i]][j, "PlantsSurveyed"] <- paste(#
					O$PlotPlantID, collapse=","#
				)#
				Z[[i]][j, "DeadDuetoMothDamage"] <- paste(#
					O$DeadDuetoMothDamage,#
					collapse=","#
				)#
			} else#
			# if all PlotPlantIDs were surveyed for a given date:#
			if (dim(M)[1] > 0 & all(M$PlotPlantID %in% N$PlotPlantID)) {#
				Z[[i]][j, "CA_t"] 					<- mysum2(M$CA_t)#
				Z[[i]][j, "ME_t"] 					<- mysum2(M$ME_t)#
				Z[[i]][j, "CH_t"] 					<- mysum2(M$CH_t)#
				Z[[i]][j, "DA_t"] 					<- mysum2(M$DA_t)#
				Z[[i]][j, "Unknown_Moth_t"] 		<- mysum2(M$Unknown_Moth_t)#
				Z[[i]][j, "Gerstaeckeria_t"] 		<- mysum2(M$Gerstaeckeria_t)#
				Z[[i]][j, "Old_Moth_Evidence_t"]<- mysum2(M$Old_Moth_Evidence_t)#
				Z[[i]][j, "AllSurveyed"] 			<- "TRUE"#
				Z[[i]][j, "Dead"] <- 0#
				Z[[i]][j, "Missing"] <- 0#
				Z[[i]][j, "PlantsSurveyed"] <- paste(#
					M$PlotPlantID, collapse=","#
				)#
			} else {#
				# if all PlotPlantIDs were NOT surveyed on this date consider the insect to be detected if the sum is greater than zero#
				Z[[i]][j, "CA_t"] 					<- mysum1(M$CA_t)#
				Z[[i]][j, "ME_t"] 					<- mysum1(M$ME_t)#
				Z[[i]][j, "CH_t"] 					<- mysum1(M$CH_t)#
				Z[[i]][j, "DA_t"] 					<- mysum1(M$DA_t)#
				Z[[i]][j, "Unknown_Moth_t"] 		<- mysum1(M$Unknown_Moth_t)#
				Z[[i]][j, "Gerstaeckeria_t"] 		<- mysum1(M$Gerstaeckeria_t)#
				Z[[i]][j, "Old_Moth_Evidence_t"]<- mysum1(M$Old_Moth_Evidence_t)#
				Z[[i]][j, "AllSurveyed"] 			<- "FALSE"#
				Z[[i]][j, "Dead"] <- 0#
				Z[[i]][j, "Missing"] <- 0#
				Z[[i]][j, "PlantsSurveyed"] <- paste(#
					M$PlotPlantID, collapse=","#
				)#
			}#
			# Number of segments#
			Z[[i]][j, "Size_t"] 					<- mysum(M$Size_t)#
			Z[[i]][j, "SizeInPlots_t"] <- #
				mysum(M$Size_t[which(M$OutsideOfPlot!="Yes")])#
			Z[[i]][j, "Plant_Segments_w_leaves"] <- #
				mysum(M$Plant_Segments_w_leaves)#
			Z[[i]][j, "Plant_Segments_wo_leaves"] <-#
			 	mysum(M$Plant_Segments_wo_leaves)#
			Z[[i]][j, "Plant_Segments_woody"] <- mysum(M$Plant_Segments_woody)#
			# Size#
			Z[[i]][j, "Height_t"] 			<- Maximum(M$Height_t)#
			Z[[i]][j, "Width_t"] 			<- Maximum(M$Width_t)#
			Z[[i]][j, "Perpen_Width"] 		<- Maximum(M$Perpen_Width)#
			# Fruit	and Flowers#
			Z[[i]][j, "Num_FlowerBuds"] 			<- mysum(M$Num_FlowerBuds)#
			Z[[i]][j, "Num_Fruit_red"] 				<- mysum(M$Num_Fruit_red)#
			Z[[i]][j, "Num_Fruit_green"] 			<- mysum(M$Num_Fruit_green)#
			Z[[i]][j, "Num_Flowers"] 				<- mysum(M$Num_Flowers)#
			Z[[i]][j, "Fruit_t"] 					<- mysum(M$Fruit_t)#
			Z[[i]][j, "Fruit_Flowers_t"] 			<- mysum(M$Fruit_Flowers_t)#
			Z[[i]][j, "DemographicSurvey"] 			<- K$DemographicSurvey[1]#
			Z[[i]][j, "FecundityYear"] 				<- K$FecundityYear[1]#
			Z[[i]][j, "OutsideOfPlot"] 				<- ""#
			# Paste PlotPlantIDs together to know which plants were surveyed on this date#
		}#
		Z[[i]] %<>%#
			select(-(Date)) %>%#
			setnames("maxDate", "Date")#
		cat(i)#
	}
temp.A <- filter(Plant.Surveys, N.PlotPlantIDs > 1) %>% arrange(Date)#
	Z = list()#
	for (i in 1:length(unique(temp.A$PlantID))) {#
		# pull all records for this PlantID from the plant surveys#
		L = filter(temp.A, PlantID==unique(temp.A$PlantID)[i])#
		# group by window of dates#
		if (max(L$Date) - min(L$Date) > #
			SequenceofDates[2] - SequenceofDates[1]) {#
			L.list <- L %>%#
				split(#
				.,#
				cut(#
					L$Date,#
					SequenceofDates#
				)#
			)#
			L.list %<>% .[sapply(., function(x) dim(x)[1]) > 0]#
			L.list %<>% lapply(., function(x) split(x, x$DemographicSurvey))#
			L.list %<>% unlist(recursive=F)#
			list.names <- gsub("\\..*","", names(L.list))#
			demography.surveys <- gsub("^.*\\.","", names(L.list))#
			Z[[i]] 	<- data.frame(#
				Date = list.names,#
				DemographicSurvey = demography.surveys#
			)#
		} else {#
			L.list <- list(L)#
			names(L.list) <- max(L.list[[1]]$Date)#
			Z[[i]] <- data.frame(Date = max(L.list[[1]]$Date))#
		}#
		Z[[i]][, "PlantID"] 			<- L$PlantID[1]#
		# for each window of dates#
		for (j in 1:length(names(L.list))) {#
			K <- eval(parse(text=paste(#
				"L.list$", #
				'"', #
				names(L.list)[j], #
				'"', #
				sep=""#
			)))#
			# save range of dates used to create whole plant survey#
			if (length(unique(K$Date)) > 1) {#
				Z[[i]][j, "RangeofDates"] <- paste(#
					K$Date[1], #
					" - ", #
					tail(K$Date, n=1),#
					sep=""#
				)#
				Z[[i]][j, "SizeofDateRange"] <- max(K$Date) - min(K$Date)#
				Z[[i]][j, "maxDate"] <- as.character(max(K$Date))#
			} else {#
				Z[[i]][j, "RangeofDates"] <- as.character(K$Date[1])#
				Z[[i]][j, "SizeofDateRange"] <- 0#
				Z[[i]][j, "maxDate"] <- as.character(max(K$Date))#
			}#
			# pull all plant survey records for this date from plant surveys within the window of dates, excluding dead/missing#
			M <- K %>% filter(Dead != 1, Missing != 1)#
			# --------------------------------------------------------- WARNINGS#
			# throw error if a plotplantID is surveyed multiple times within this window and multiple records have size measurements#
			temp <- M %>% filter(SegmentsMeasured > 0) %>%#
				dplyr::add_count(PlotPlantID) %>%				#
				filter(n > 1)#
			if (dim(temp)[1] > 0) {#
				warning(paste(#
					"Multiple records of segment counts for PlotPlantID", #
					M$PlotPlantID[1], #
					"around date", #
					paste(M$Date, collapse=",")#
				))#
			}#
			temp <- M %>% filter(FruitMeasured > 0) %>%#
				dplyr::add_count(PlotPlantID) %>%				#
				filter(n > 1)#
			if (dim(temp)[1] > 0) {#
				warning(paste(#
					"Multiple size records of fruit counts for PlotPlantID", #
					M$PlotPlantID[1], #
					"around date", #
					paste(M$Date, collapse=",")#
				))#
			}#
			temp <- M %>% filter(SizeMeasured > 0) %>%#
				dplyr::add_count(PlotPlantID) %>%				#
				filter(n > 1)#
			if (dim(temp)[1] > 0) {#
				warning(paste(#
					"Multiple records of size measurements for PlotPlantID", #
					M$PlotPlantID[1], #
					"around date", #
					paste(M$Date, collapse=",")#
				))#
			}#
			# ---------------------------------------------------------------- ##
			# get list of PlotPlantIDs alive at this time#
			# plant would be dead if no PlantID records showed up in N#
			N = Plant.Info %>%#
				filter( #
					PlantID==L$PlantID[1], #
					# only include plants that are listed as having been added to Plant.Info on or after Date#
					First.Survey.Date.Alive <= #
						as.Date(Z[[i]]$Date[j]) + date.window,#
					# exclude dead plants (including date plant was first recorded as dead)#
					FirstDeadMissingObservation > #
						as.Date(Z[[i]]$Date[j]) + date.window | #
						is.na(FirstDeadMissingObservation)==T#
				)	#
			# pull all surveys where plant was marked dead#
			O <- K %>% filter(Dead == 1 | Missing == 1)#
			# the plant can only be marked dead if no live part was surveyed and no parts remained unsurveyed#
			if (dim(M)[1] == 0 & dim(N)[1] == 0 & dim(O)[1] > 0) {#
				Z[[i]][j, "Dead"]	 <- Maximum(O$Dead)#
				Z[[i]][j, "Missing"] <- Maximum(O$Missing)#
				Z[[i]][j, "AllSurveyed"] 			<- "TRUE"#
				Z[[i]][j, "PlantsSurveyed"] <- paste(#
					O$PlotPlantID, collapse=","#
				)#
				Z[[i]][j, "DeadDuetoMothDamage"] <- paste(#
					O$DeadDuetoMothDamage,#
					collapse=","#
				)#
			} else#
			# if all PlotPlantIDs were surveyed for a given date:#
			if (dim(M)[1] > 0 & all(M$PlotPlantID %in% N$PlotPlantID)) {#
				Z[[i]][j, "CA_t"] 					<- mysum2(M$CA_t)#
				Z[[i]][j, "ME_t"] 					<- mysum2(M$ME_t)#
				Z[[i]][j, "CH_t"] 					<- mysum2(M$CH_t)#
				Z[[i]][j, "DA_t"] 					<- mysum2(M$DA_t)#
				Z[[i]][j, "Unknown_Moth_t"] 		<- mysum2(M$Unknown_Moth_t)#
				Z[[i]][j, "Gerstaeckeria_t"] 		<- mysum2(M$Gerstaeckeria_t)#
				Z[[i]][j, "Old_Moth_Evidence_t"]<- mysum2(M$Old_Moth_Evidence_t)#
				Z[[i]][j, "AllSurveyed"] 			<- "TRUE"#
				Z[[i]][j, "Dead"] <- 0#
				Z[[i]][j, "Missing"] <- 0#
				Z[[i]][j, "PlantsSurveyed"] <- paste(#
					M$PlotPlantID, collapse=","#
				)#
			} else {#
				# if all PlotPlantIDs were NOT surveyed on this date consider the insect to be detected if the sum is greater than zero#
				Z[[i]][j, "CA_t"] 					<- mysum1(M$CA_t)#
				Z[[i]][j, "ME_t"] 					<- mysum1(M$ME_t)#
				Z[[i]][j, "CH_t"] 					<- mysum1(M$CH_t)#
				Z[[i]][j, "DA_t"] 					<- mysum1(M$DA_t)#
				Z[[i]][j, "Unknown_Moth_t"] 		<- mysum1(M$Unknown_Moth_t)#
				Z[[i]][j, "Gerstaeckeria_t"] 		<- mysum1(M$Gerstaeckeria_t)#
				Z[[i]][j, "Old_Moth_Evidence_t"]<- mysum1(M$Old_Moth_Evidence_t)#
				Z[[i]][j, "AllSurveyed"] 			<- "FALSE"#
				Z[[i]][j, "Dead"] <- 0#
				Z[[i]][j, "Missing"] <- 0#
				Z[[i]][j, "PlantsSurveyed"] <- paste(#
					M$PlotPlantID, collapse=","#
				)#
			}#
			# Number of segments#
			Z[[i]][j, "Size_t"] 					<- mysum(M$Size_t)#
			Z[[i]][j, "SizeInPlots_t"] <- #
				mysum(M$Size_t[which(M$OutsideOfPlot!="Yes")])#
			Z[[i]][j, "Plant_Segments_w_leaves"] <- #
				mysum(M$Plant_Segments_w_leaves)#
			Z[[i]][j, "Plant_Segments_wo_leaves"] <-#
			 	mysum(M$Plant_Segments_wo_leaves)#
			Z[[i]][j, "Plant_Segments_woody"] <- mysum(M$Plant_Segments_woody)#
			# Size#
			Z[[i]][j, "Height_t"] 			<- Maximum(M$Height_t)#
			Z[[i]][j, "Width_t"] 			<- Maximum(M$Width_t)#
			Z[[i]][j, "Perpen_Width"] 		<- Maximum(M$Perpen_Width)#
			# Fruit	and Flowers#
			Z[[i]][j, "Num_FlowerBuds"] 			<- mysum(M$Num_FlowerBuds)#
			Z[[i]][j, "Num_Fruit_red"] 				<- mysum(M$Num_Fruit_red)#
			Z[[i]][j, "Num_Fruit_green"] 			<- mysum(M$Num_Fruit_green)#
			Z[[i]][j, "Num_Flowers"] 				<- mysum(M$Num_Flowers)#
			Z[[i]][j, "Fruit_t"] 					<- mysum(M$Fruit_t)#
			Z[[i]][j, "Fruit_Flowers_t"] 			<- mysum(M$Fruit_Flowers_t)#
			Z[[i]][j, "DemographicSurvey"] 			<- K$DemographicSurvey[1]#
			Z[[i]][j, "FecundityYear"] 				<- K$FecundityYear[1]#
			Z[[i]][j, "OutsideOfPlot"] 				<- ""#
			# Paste PlotPlantIDs together to know which plants were surveyed on this date#
		}#
		Z[[i]] %<>%#
			dplyr::select(-(Date)) %>%#
			setnames("maxDate", "Date")#
		cat(i)#
	}
setwd('/Users/KSauby/Documents/Projects/GTMNERRproc/R')
date.window=48
temp.A <- filter(Plant.Surveys, N.PlotPlantIDs > 1) %>% arrange(Date)#
	Z = list()#
	for (i in 1:length(unique(temp.A$PlantID))) {#
		# pull all records for this PlantID from the plant surveys#
		L = filter(temp.A, PlantID==unique(temp.A$PlantID)[i])#
		# group by window of dates#
		if (max(L$Date) - min(L$Date) > #
			SequenceofDates[2] - SequenceofDates[1]) {#
			L.list <- L %>%#
				split(#
				.,#
				cut(#
					L$Date,#
					SequenceofDates#
				)#
			)#
			L.list %<>% .[sapply(., function(x) dim(x)[1]) > 0]#
			L.list %<>% lapply(., function(x) split(x, x$DemographicSurvey))#
			L.list %<>% unlist(recursive=F)#
			list.names <- gsub("\\..*","", names(L.list))#
			demography.surveys <- gsub("^.*\\.","", names(L.list))#
			Z[[i]] 	<- data.frame(#
				Date = list.names,#
				DemographicSurvey = demography.surveys#
			)#
		} else {#
			L.list <- list(L)#
			names(L.list) <- max(L.list[[1]]$Date)#
			Z[[i]] <- data.frame(Date = max(L.list[[1]]$Date))#
		}#
		Z[[i]][, "PlantID"] 			<- L$PlantID[1]#
		# for each window of dates#
		for (j in 1:length(names(L.list))) {#
			K <- eval(parse(text=paste(#
				"L.list$", #
				'"', #
				names(L.list)[j], #
				'"', #
				sep=""#
			)))#
			# save range of dates used to create whole plant survey#
			if (length(unique(K$Date)) > 1) {#
				Z[[i]][j, "RangeofDates"] <- paste(#
					K$Date[1], #
					" - ", #
					tail(K$Date, n=1),#
					sep=""#
				)#
				Z[[i]][j, "SizeofDateRange"] <- max(K$Date) - min(K$Date)#
				Z[[i]][j, "maxDate"] <- as.character(max(K$Date))#
			} else {#
				Z[[i]][j, "RangeofDates"] <- as.character(K$Date[1])#
				Z[[i]][j, "SizeofDateRange"] <- 0#
				Z[[i]][j, "maxDate"] <- as.character(max(K$Date))#
			}#
			# pull all plant survey records for this date from plant surveys within the window of dates, excluding dead/missing#
			M <- K %>% filter(Dead != 1, Missing != 1)#
			# --------------------------------------------------------- WARNINGS#
			# throw error if a plotplantID is surveyed multiple times within this window and multiple records have size measurements#
			temp <- M %>% filter(SegmentsMeasured > 0) %>%#
				dplyr::add_count(PlotPlantID) %>%				#
				filter(n > 1)#
			if (dim(temp)[1] > 0) {#
				warning(paste(#
					"Multiple records of segment counts for PlotPlantID", #
					M$PlotPlantID[1], #
					"around date", #
					paste(M$Date, collapse=",")#
				))#
			}#
			temp <- M %>% filter(FruitMeasured > 0) %>%#
				dplyr::add_count(PlotPlantID) %>%				#
				filter(n > 1)#
			if (dim(temp)[1] > 0) {#
				warning(paste(#
					"Multiple size records of fruit counts for PlotPlantID", #
					M$PlotPlantID[1], #
					"around date", #
					paste(M$Date, collapse=",")#
				))#
			}#
			temp <- M %>% filter(SizeMeasured > 0) %>%#
				dplyr::add_count(PlotPlantID) %>%				#
				filter(n > 1)#
			if (dim(temp)[1] > 0) {#
				warning(paste(#
					"Multiple records of size measurements for PlotPlantID", #
					M$PlotPlantID[1], #
					"around date", #
					paste(M$Date, collapse=",")#
				))#
			}#
			# ---------------------------------------------------------------- ##
			# get list of PlotPlantIDs alive at this time#
			# plant would be dead if no PlantID records showed up in N#
			N = Plant.Info %>%#
				filter( #
					PlantID==L$PlantID[1], #
					# only include plants that are listed as having been added to Plant.Info on or after Date#
					First.Survey.Date.Alive <= #
						as.Date(Z[[i]]$Date[j]) + date.window,#
					# exclude dead plants (including date plant was first recorded as dead)#
					FirstDeadMissingObservation > #
						as.Date(Z[[i]]$Date[j]) + date.window | #
						is.na(FirstDeadMissingObservation)==T#
				)	#
			# pull all surveys where plant was marked dead#
			O <- K %>% filter(Dead == 1 | Missing == 1)#
			# the plant can only be marked dead if no live part was surveyed and no parts remained unsurveyed#
			if (dim(M)[1] == 0 & dim(N)[1] == 0 & dim(O)[1] > 0) {#
				Z[[i]][j, "Dead"]	 <- Maximum(O$Dead)#
				Z[[i]][j, "Missing"] <- Maximum(O$Missing)#
				Z[[i]][j, "AllSurveyed"] 			<- "TRUE"#
				Z[[i]][j, "PlantsSurveyed"] <- paste(#
					O$PlotPlantID, collapse=","#
				)#
				Z[[i]][j, "DeadDuetoMothDamage"] <- paste(#
					O$DeadDuetoMothDamage,#
					collapse=","#
				)#
			} else#
			# if all PlotPlantIDs were surveyed for a given date:#
			if (dim(M)[1] > 0 & all(M$PlotPlantID %in% N$PlotPlantID)) {#
				Z[[i]][j, "CA_t"] 					<- mysum2(M$CA_t)#
				Z[[i]][j, "ME_t"] 					<- mysum2(M$ME_t)#
				Z[[i]][j, "CH_t"] 					<- mysum2(M$CH_t)#
				Z[[i]][j, "DA_t"] 					<- mysum2(M$DA_t)#
				Z[[i]][j, "Unknown_Moth_t"] 		<- mysum2(M$Unknown_Moth_t)#
				Z[[i]][j, "Gerstaeckeria_t"] 		<- mysum2(M$Gerstaeckeria_t)#
				Z[[i]][j, "Old_Moth_Evidence_t"]<- mysum2(M$Old_Moth_Evidence_t)#
				Z[[i]][j, "AllSurveyed"] 			<- "TRUE"#
				Z[[i]][j, "Dead"] <- 0#
				Z[[i]][j, "Missing"] <- 0#
				Z[[i]][j, "PlantsSurveyed"] <- paste(#
					M$PlotPlantID, collapse=","#
				)#
			} else {#
				# if all PlotPlantIDs were NOT surveyed on this date consider the insect to be detected if the sum is greater than zero#
				Z[[i]][j, "CA_t"] 					<- mysum1(M$CA_t)#
				Z[[i]][j, "ME_t"] 					<- mysum1(M$ME_t)#
				Z[[i]][j, "CH_t"] 					<- mysum1(M$CH_t)#
				Z[[i]][j, "DA_t"] 					<- mysum1(M$DA_t)#
				Z[[i]][j, "Unknown_Moth_t"] 		<- mysum1(M$Unknown_Moth_t)#
				Z[[i]][j, "Gerstaeckeria_t"] 		<- mysum1(M$Gerstaeckeria_t)#
				Z[[i]][j, "Old_Moth_Evidence_t"]<- mysum1(M$Old_Moth_Evidence_t)#
				Z[[i]][j, "AllSurveyed"] 			<- "FALSE"#
				Z[[i]][j, "Dead"] <- 0#
				Z[[i]][j, "Missing"] <- 0#
				Z[[i]][j, "PlantsSurveyed"] <- paste(#
					M$PlotPlantID, collapse=","#
				)#
			}#
			# Number of segments#
			Z[[i]][j, "Size_t"] 					<- mysum(M$Size_t)#
			Z[[i]][j, "SizeInPlots_t"] <- #
				mysum(M$Size_t[which(M$OutsideOfPlot!="Yes")])#
			Z[[i]][j, "Plant_Segments_w_leaves"] <- #
				mysum(M$Plant_Segments_w_leaves)#
			Z[[i]][j, "Plant_Segments_wo_leaves"] <-#
			 	mysum(M$Plant_Segments_wo_leaves)#
			Z[[i]][j, "Plant_Segments_woody"] <- mysum(M$Plant_Segments_woody)#
			# Size#
			Z[[i]][j, "Height_t"] 			<- Maximum(M$Height_t)#
			Z[[i]][j, "Width_t"] 			<- Maximum(M$Width_t)#
			Z[[i]][j, "Perpen_Width"] 		<- Maximum(M$Perpen_Width)#
			# Fruit	and Flowers#
			Z[[i]][j, "Num_FlowerBuds"] 			<- mysum(M$Num_FlowerBuds)#
			Z[[i]][j, "Num_Fruit_red"] 				<- mysum(M$Num_Fruit_red)#
			Z[[i]][j, "Num_Fruit_green"] 			<- mysum(M$Num_Fruit_green)#
			Z[[i]][j, "Num_Flowers"] 				<- mysum(M$Num_Flowers)#
			Z[[i]][j, "Fruit_t"] 					<- mysum(M$Fruit_t)#
			Z[[i]][j, "Fruit_Flowers_t"] 			<- mysum(M$Fruit_Flowers_t)#
			Z[[i]][j, "DemographicSurvey"] 			<- K$DemographicSurvey[1]#
			Z[[i]][j, "FecundityYear"] 				<- K$FecundityYear[1]#
			Z[[i]][j, "OutsideOfPlot"] 				<- ""#
			# Paste PlotPlantIDs together to know which plants were surveyed on this date#
		}#
		Z[[i]] %<>%#
			dplyr::select(-(Date)) %>%#
			setnames("maxDate", "Date")#
		cat(i)#
	}
setwd('/Users/KSauby/Documents/Projects/GTMNERRproc/R')
temp.B <- do.call(rbind.data.frame, Z)#
	temp.B[,c(#
		"Perpen_Width",#
		"Width_t",#
		"Height_t")] %<>% #
		apply(., 2, NA_Function#
	)
str(Z)
setwd('/Users/KSauby/Documents/Projects/GTMNERRproc/R')
temp.A <- filter(Plant.Surveys, N.PlotPlantIDs > 1) %>% arrange(Date)#
	Z = list()#
	for (i in 1:length(unique(temp.A$PlantID))) {#
		# pull all records for this PlantID from the plant surveys#
		L = filter(temp.A, PlantID==unique(temp.A$PlantID)[i])#
		# group by window of dates#
		if (max(L$Date) - min(L$Date) > #
			SequenceofDates[2] - SequenceofDates[1]) {#
			L.list <- L %>%#
				split(#
				.,#
				cut(#
					L$Date,#
					SequenceofDates#
				)#
			)#
			L.list %<>% .[sapply(., function(x) dim(x)[1]) > 0]#
			L.list %<>% lapply(., function(x) split(x, x$DemographicSurvey))#
			L.list %<>% unlist(recursive=F)#
			list.names <- gsub("\\..*","", names(L.list))#
			demography.surveys <- gsub("^.*\\.","", names(L.list))#
			Z[[i]] 	<- data.frame(#
				Date = list.names,#
				DemographicSurvey = demography.surveys#
			)#
		} else {#
			L.list <- list(L)#
			names(L.list) <- max(L.list[[1]]$Date)#
			Z[[i]] <- data.frame(Date = max(L.list[[1]]$Date))#
		}#
		Z[[i]][, "PlantID"] 			<- L$PlantID[1]#
		# for each window of dates#
		for (j in 1:length(names(L.list))) {#
			K <- eval(parse(text=paste(#
				"L.list$", #
				'"', #
				names(L.list)[j], #
				'"', #
				sep=""#
			)))#
			# save range of dates used to create whole plant survey#
			if (length(unique(K$Date)) > 1) {#
				Z[[i]][j, "RangeofDates"] <- paste(#
					K$Date[1], #
					" - ", #
					tail(K$Date, n=1),#
					sep=""#
				)#
				Z[[i]][j, "SizeofDateRange"] <- max(K$Date) - min(K$Date)#
				Z[[i]][j, "maxDate"] <- as.character(max(K$Date))#
			} else {#
				Z[[i]][j, "RangeofDates"] <- as.character(K$Date[1])#
				Z[[i]][j, "SizeofDateRange"] <- 0#
				Z[[i]][j, "maxDate"] <- as.character(max(K$Date))#
			}#
			# pull all plant survey records for this date from plant surveys within the window of dates, excluding dead/missing#
			M <- K %>% filter(Dead != 1, Missing != 1)#
			# --------------------------------------------------------- WARNINGS#
			# throw error if a plotplantID is surveyed multiple times within this window and multiple records have size measurements#
			temp <- M %>% filter(SegmentsMeasured > 0) %>%#
				dplyr::add_count(PlotPlantID) %>%				#
				filter(n > 1)#
			if (dim(temp)[1] > 0) {#
				warning(paste(#
					"Multiple records of segment counts for PlotPlantID", #
					M$PlotPlantID[1], #
					"around date", #
					paste(M$Date, collapse=",")#
				))#
			}#
			temp <- M %>% filter(FruitMeasured > 0) %>%#
				dplyr::add_count(PlotPlantID) %>%				#
				filter(n > 1)#
			if (dim(temp)[1] > 0) {#
				warning(paste(#
					"Multiple size records of fruit counts for PlotPlantID", #
					M$PlotPlantID[1], #
					"around date", #
					paste(M$Date, collapse=",")#
				))#
			}#
			temp <- M %>% filter(SizeMeasured > 0) %>%#
				dplyr::add_count(PlotPlantID) %>%				#
				filter(n > 1)#
			if (dim(temp)[1] > 0) {#
				warning(paste(#
					"Multiple records of size measurements for PlotPlantID", #
					M$PlotPlantID[1], #
					"around date", #
					paste(M$Date, collapse=",")#
				))#
			}#
			# ---------------------------------------------------------------- ##
			# get list of PlotPlantIDs alive at this time#
			# plant would be dead if no PlantID records showed up in N#
			N = Plant.Info %>%#
				filter( #
					PlantID==L$PlantID[1], #
					# only include plants that are listed as having been added to Plant.Info on or after Date#
					First.Survey.Date.Alive <= #
						as.Date(Z[[i]]$Date[j]) + date.window,#
					# exclude dead plants (including date plant was first recorded as dead)#
					FirstDeadMissingObservation > #
						as.Date(Z[[i]]$Date[j]) + date.window | #
						is.na(FirstDeadMissingObservation)==T#
				)	#
			# pull all surveys where plant was marked dead#
			O <- K %>% filter(Dead == 1 | Missing == 1)#
			# the plant can only be marked dead if no live part was surveyed and no parts remained unsurveyed#
			if (dim(M)[1] == 0 & dim(N)[1] == 0 & dim(O)[1] > 0) {#
				Z[[i]][j, "Dead"]	 <- Maximum(O$Dead)#
				Z[[i]][j, "Missing"] <- Maximum(O$Missing)#
				Z[[i]][j, "AllSurveyed"] 			<- "TRUE"#
				Z[[i]][j, "PlantsSurveyed"] <- paste(#
					O$PlotPlantID, collapse=","#
				)#
				Z[[i]][j, "DeadDuetoMothDamage"] <- paste(#
					O$DeadDuetoMothDamage,#
					collapse=","#
				)#
			} else#
			# if all PlotPlantIDs were surveyed for a given date:#
			if (dim(M)[1] > 0 & all(M$PlotPlantID %in% N$PlotPlantID)) {#
				Z[[i]][j, "CA_t"] 					<- mysum2(M$CA_t)#
				Z[[i]][j, "ME_t"] 					<- mysum2(M$ME_t)#
				Z[[i]][j, "CH_t"] 					<- mysum2(M$CH_t)#
				Z[[i]][j, "DA_t"] 					<- mysum2(M$DA_t)#
				Z[[i]][j, "Unknown_Moth_t"] 		<- mysum2(M$Unknown_Moth_t)#
				Z[[i]][j, "Gerstaeckeria_t"] 		<- mysum2(M$Gerstaeckeria_t)#
				Z[[i]][j, "Old_Moth_Evidence_t"]<- mysum2(M$Old_Moth_Evidence_t)#
				Z[[i]][j, "AllSurveyed"] 			<- "TRUE"#
				Z[[i]][j, "Dead"] <- 0#
				Z[[i]][j, "Missing"] <- 0#
				Z[[i]][j, "PlantsSurveyed"] <- paste(#
					M$PlotPlantID, collapse=","#
				)#
			} else {#
				# if all PlotPlantIDs were NOT surveyed on this date consider the insect to be detected if the sum is greater than zero#
				Z[[i]][j, "CA_t"] 					<- mysum1(M$CA_t)#
				Z[[i]][j, "ME_t"] 					<- mysum1(M$ME_t)#
				Z[[i]][j, "CH_t"] 					<- mysum1(M$CH_t)#
				Z[[i]][j, "DA_t"] 					<- mysum1(M$DA_t)#
				Z[[i]][j, "Unknown_Moth_t"] 		<- mysum1(M$Unknown_Moth_t)#
				Z[[i]][j, "Gerstaeckeria_t"] 		<- mysum1(M$Gerstaeckeria_t)#
				Z[[i]][j, "Old_Moth_Evidence_t"]<- mysum1(M$Old_Moth_Evidence_t)#
				Z[[i]][j, "AllSurveyed"] 			<- "FALSE"#
				Z[[i]][j, "Dead"] <- 0#
				Z[[i]][j, "Missing"] <- 0#
				Z[[i]][j, "PlantsSurveyed"] <- paste(#
					M$PlotPlantID, collapse=","#
				)#
			}#
			# Number of segments#
			Z[[i]][j, "Size_t"] 					<- mysum(M$Size_t)#
			Z[[i]][j, "SizeInPlots_t"] <- #
				mysum(M$Size_t[which(M$OutsideOfPlot!="Yes")])#
			Z[[i]][j, "Plant_Segments_w_leaves"] <- #
				mysum(M$Plant_Segments_w_leaves)#
			Z[[i]][j, "Plant_Segments_wo_leaves"] <-#
			 	mysum(M$Plant_Segments_wo_leaves)#
			Z[[i]][j, "Plant_Segments_woody"] <- mysum(M$Plant_Segments_woody)#
			# Size#
			Z[[i]][j, "Height_t"] 			<- Maximum(M$Height_t)#
			Z[[i]][j, "Width_t"] 			<- Maximum(M$Width_t)#
			Z[[i]][j, "Perpen_Width"] 		<- Maximum(M$Perpen_Width)#
			# Fruit	and Flowers#
			Z[[i]][j, "Num_FlowerBuds"] 			<- mysum(M$Num_FlowerBuds)#
			Z[[i]][j, "Num_Fruit_red"] 				<- mysum(M$Num_Fruit_red)#
			Z[[i]][j, "Num_Fruit_green"] 			<- mysum(M$Num_Fruit_green)#
			Z[[i]][j, "Num_Flowers"] 				<- mysum(M$Num_Flowers)#
			Z[[i]][j, "Fruit_t"] 					<- mysum(M$Fruit_t)#
			Z[[i]][j, "Fruit_Flowers_t"] 			<- mysum(M$Fruit_Flowers_t)#
			Z[[i]][j, "DemographicSurvey"] 			<- K$DemographicSurvey[1]#
			Z[[i]][j, "FecundityYear"] 				<- K$FecundityYear[1]#
			Z[[i]][j, "OutsideOfPlot"] 				<- ""#
			Z[[i]][j, "DeadDuetoMothDamage"] 		<- ""#
			# Paste PlotPlantIDs together to know which plants were surveyed on this date#
		}#
		Z[[i]] %<>%#
			select(-(Date)) %>%#
			setnames("maxDate", "Date")#
		cat(i)#
	}#
	temp.B <- do.call(rbind.data.frame, Z)
temp.A <- filter(Plant.Surveys, N.PlotPlantIDs > 1) %>% arrange(Date)#
	Z = list()#
	for (i in 1:length(unique(temp.A$PlantID))) {#
		# pull all records for this PlantID from the plant surveys#
		L = filter(temp.A, PlantID==unique(temp.A$PlantID)[i])#
		# group by window of dates#
		if (max(L$Date) - min(L$Date) > #
			SequenceofDates[2] - SequenceofDates[1]) {#
			L.list <- L %>%#
				split(#
				.,#
				cut(#
					L$Date,#
					SequenceofDates#
				)#
			)#
			L.list %<>% .[sapply(., function(x) dim(x)[1]) > 0]#
			L.list %<>% lapply(., function(x) split(x, x$DemographicSurvey))#
			L.list %<>% unlist(recursive=F)#
			list.names <- gsub("\\..*","", names(L.list))#
			demography.surveys <- gsub("^.*\\.","", names(L.list))#
			Z[[i]] 	<- data.frame(#
				Date = list.names,#
				DemographicSurvey = demography.surveys#
			)#
		} else {#
			L.list <- list(L)#
			names(L.list) <- max(L.list[[1]]$Date)#
			Z[[i]] <- data.frame(Date = max(L.list[[1]]$Date))#
		}#
		Z[[i]][, "PlantID"] 			<- L$PlantID[1]#
		# for each window of dates#
		for (j in 1:length(names(L.list))) {#
			K <- eval(parse(text=paste(#
				"L.list$", #
				'"', #
				names(L.list)[j], #
				'"', #
				sep=""#
			)))#
			# save range of dates used to create whole plant survey#
			if (length(unique(K$Date)) > 1) {#
				Z[[i]][j, "RangeofDates"] <- paste(#
					K$Date[1], #
					" - ", #
					tail(K$Date, n=1),#
					sep=""#
				)#
				Z[[i]][j, "SizeofDateRange"] <- max(K$Date) - min(K$Date)#
				Z[[i]][j, "maxDate"] <- as.character(max(K$Date))#
			} else {#
				Z[[i]][j, "RangeofDates"] <- as.character(K$Date[1])#
				Z[[i]][j, "SizeofDateRange"] <- 0#
				Z[[i]][j, "maxDate"] <- as.character(max(K$Date))#
			}#
			# pull all plant survey records for this date from plant surveys within the window of dates, excluding dead/missing#
			M <- K %>% filter(Dead != 1, Missing != 1)#
			# --------------------------------------------------------- WARNINGS#
			# throw error if a plotplantID is surveyed multiple times within this window and multiple records have size measurements#
			temp <- M %>% filter(SegmentsMeasured > 0) %>%#
				dplyr::add_count(PlotPlantID) %>%				#
				filter(n > 1)#
			if (dim(temp)[1] > 0) {#
				warning(paste(#
					"Multiple records of segment counts for PlotPlantID", #
					M$PlotPlantID[1], #
					"around date", #
					paste(M$Date, collapse=",")#
				))#
			}#
			temp <- M %>% filter(FruitMeasured > 0) %>%#
				dplyr::add_count(PlotPlantID) %>%				#
				filter(n > 1)#
			if (dim(temp)[1] > 0) {#
				warning(paste(#
					"Multiple size records of fruit counts for PlotPlantID", #
					M$PlotPlantID[1], #
					"around date", #
					paste(M$Date, collapse=",")#
				))#
			}#
			temp <- M %>% filter(SizeMeasured > 0) %>%#
				dplyr::add_count(PlotPlantID) %>%				#
				filter(n > 1)#
			if (dim(temp)[1] > 0) {#
				warning(paste(#
					"Multiple records of size measurements for PlotPlantID", #
					M$PlotPlantID[1], #
					"around date", #
					paste(M$Date, collapse=",")#
				))#
			}#
			# ---------------------------------------------------------------- ##
			# get list of PlotPlantIDs alive at this time#
			# plant would be dead if no PlantID records showed up in N#
			N = Plant.Info %>%#
				filter( #
					PlantID==L$PlantID[1], #
					# only include plants that are listed as having been added to Plant.Info on or after Date#
					First.Survey.Date.Alive <= #
						as.Date(Z[[i]]$Date[j]) + date.window,#
					# exclude dead plants (including date plant was first recorded as dead)#
					FirstDeadMissingObservation > #
						as.Date(Z[[i]]$Date[j]) + date.window | #
						is.na(FirstDeadMissingObservation)==T#
				)	#
			# pull all surveys where plant was marked dead#
			O <- K %>% filter(Dead == 1 | Missing == 1)#
			# the plant can only be marked dead if no live part was surveyed and no parts remained unsurveyed#
			if (dim(M)[1] == 0 & dim(N)[1] == 0 & dim(O)[1] > 0) {#
				Z[[i]][j, "Dead"]	 <- Maximum(O$Dead)#
				Z[[i]][j, "Missing"] <- Maximum(O$Missing)#
				Z[[i]][j, "AllSurveyed"] 			<- "TRUE"#
				Z[[i]][j, "PlantsSurveyed"] <- paste(#
					O$PlotPlantID, collapse=","#
				)#
				Z[[i]][j, "DeadDuetoMothDamage"] <- paste(#
					O$DeadDuetoMothDamage,#
					collapse=","#
				)#
			} else#
			# if all PlotPlantIDs were surveyed for a given date:#
			if (dim(M)[1] > 0 & all(M$PlotPlantID %in% N$PlotPlantID)) {#
				Z[[i]][j, "CA_t"] 					<- mysum2(M$CA_t)#
				Z[[i]][j, "ME_t"] 					<- mysum2(M$ME_t)#
				Z[[i]][j, "CH_t"] 					<- mysum2(M$CH_t)#
				Z[[i]][j, "DA_t"] 					<- mysum2(M$DA_t)#
				Z[[i]][j, "Unknown_Moth_t"] 		<- mysum2(M$Unknown_Moth_t)#
				Z[[i]][j, "Gerstaeckeria_t"] 		<- mysum2(M$Gerstaeckeria_t)#
				Z[[i]][j, "Old_Moth_Evidence_t"]<- mysum2(M$Old_Moth_Evidence_t)#
				Z[[i]][j, "AllSurveyed"] 			<- "TRUE"#
				Z[[i]][j, "Dead"] <- 0#
				Z[[i]][j, "Missing"] <- 0#
				Z[[i]][j, "PlantsSurveyed"] <- paste(#
					M$PlotPlantID, collapse=","#
				)#
			} else {#
				# if all PlotPlantIDs were NOT surveyed on this date consider the insect to be detected if the sum is greater than zero#
				Z[[i]][j, "CA_t"] 					<- mysum1(M$CA_t)#
				Z[[i]][j, "ME_t"] 					<- mysum1(M$ME_t)#
				Z[[i]][j, "CH_t"] 					<- mysum1(M$CH_t)#
				Z[[i]][j, "DA_t"] 					<- mysum1(M$DA_t)#
				Z[[i]][j, "Unknown_Moth_t"] 		<- mysum1(M$Unknown_Moth_t)#
				Z[[i]][j, "Gerstaeckeria_t"] 		<- mysum1(M$Gerstaeckeria_t)#
				Z[[i]][j, "Old_Moth_Evidence_t"]<- mysum1(M$Old_Moth_Evidence_t)#
				Z[[i]][j, "AllSurveyed"] 			<- "FALSE"#
				Z[[i]][j, "Dead"] <- 0#
				Z[[i]][j, "Missing"] <- 0#
				Z[[i]][j, "PlantsSurveyed"] <- paste(#
					M$PlotPlantID, collapse=","#
				)#
			}#
			# Number of segments#
			Z[[i]][j, "Size_t"] 					<- mysum(M$Size_t)#
			Z[[i]][j, "SizeInPlots_t"] <- #
				mysum(M$Size_t[which(M$OutsideOfPlot!="Yes")])#
			Z[[i]][j, "Plant_Segments_w_leaves"] <- #
				mysum(M$Plant_Segments_w_leaves)#
			Z[[i]][j, "Plant_Segments_wo_leaves"] <-#
			 	mysum(M$Plant_Segments_wo_leaves)#
			Z[[i]][j, "Plant_Segments_woody"] <- mysum(M$Plant_Segments_woody)#
			# Size#
			Z[[i]][j, "Height_t"] 			<- Maximum(M$Height_t)#
			Z[[i]][j, "Width_t"] 			<- Maximum(M$Width_t)#
			Z[[i]][j, "Perpen_Width"] 		<- Maximum(M$Perpen_Width)#
			# Fruit	and Flowers#
			Z[[i]][j, "Num_FlowerBuds"] 			<- mysum(M$Num_FlowerBuds)#
			Z[[i]][j, "Num_Fruit_red"] 				<- mysum(M$Num_Fruit_red)#
			Z[[i]][j, "Num_Fruit_green"] 			<- mysum(M$Num_Fruit_green)#
			Z[[i]][j, "Num_Flowers"] 				<- mysum(M$Num_Flowers)#
			Z[[i]][j, "Fruit_t"] 					<- mysum(M$Fruit_t)#
			Z[[i]][j, "Fruit_Flowers_t"] 			<- mysum(M$Fruit_Flowers_t)#
			Z[[i]][j, "DemographicSurvey"] 			<- K$DemographicSurvey[1]#
			Z[[i]][j, "FecundityYear"] 				<- K$FecundityYear[1]#
			Z[[i]][j, "OutsideOfPlot"] 				<- ""#
			Z[[i]][j, "DeadDuetoMothDamage"] 		<- ""#
			# Paste PlotPlantIDs together to know which plants were surveyed on this date#
		}#
		Z[[i]] %<>%#
			dplyr::select(-(Date)) %>%#
			setnames("maxDate", "Date")#
		cat(i)#
	}#
	temp.B <- do.call(rbind.data.frame, Z)
setwd('/Users/KSauby/Documents/Projects/GTMNERRproc/R')
temp.B[,c(#
		"Perpen_Width",#
		"Width_t",#
		"Height_t")] %<>% #
		apply(., 2, NA_Function#
	)#
	# - Process plants NOT spanning multiple plots --------------------------- ##
	temp.C <- Plant.Surveys %>% #
		filter(N.PlotPlantIDs == 1) %>%#
		rowwise %>%#
		mutate(#
			SizeInPlots_t = NA,#
			SizeInPlots_t = replace(#
				SizeInPlots_t,#
				which(OutsideOfPlot!="Yes"),#
				Size_t#
			)#
		) %>%#
		as.data.frame#
	# - Merge plant survey data into one file -------------------------------- ##
	# create new file with those plants in only one plot#
	temp.C %<>% select( #
		PlantID, #
		Date, #
		# insects#
		CA_t, #
		ME_t, #
		CH_t,#
		DA_t,#
		Unknown_Moth_t, #
		Gerstaeckeria_t,#
		Old_Moth_Evidence_t, #
		# size#
		Size_t, #
		Plant_Segments_w_leaves, #
		Plant_Segments_wo_leaves, #
		Plant_Segments_woody, #
		Height_t, #
		Width_t, #
		Perpen_Width, #
		# fruit#
		Num_FlowerBuds, #
		Num_Fruit_red, #
		Num_Fruit_green, #
		Num_Flowers,#
		Fruit_t, #
		Fruit_Flowers_t,#
		Dead, #
		Missing, #
		DemographicSurvey,#
		FecundityYear,#
		OutsideOfPlot,#
		DeadDuetoMothDamage#
	)#
	temp.C$AllSurveyed <- "TRUE"#
	temp.C$PlantsSurveyed <- "NA"#
	# merge plants in multiple plots and plants in one plot#
	temp.D <- rbind.fill(temp.B, temp.C)#
	temp.D %<>% arrange(PlantID, Date)
temp.B[,c(#
		"Perpen_Width",#
		"Width_t",#
		"Height_t")] %<>% #
		apply(., 2, NA_Function#
	)#
	# - Process plants NOT spanning multiple plots --------------------------- ##
	temp.C <- Plant.Surveys %>% #
		filter(N.PlotPlantIDs == 1) %>%#
		rowwise %>%#
		mutate(#
			SizeInPlots_t = NA,#
			SizeInPlots_t = replace(#
				SizeInPlots_t,#
				which(OutsideOfPlot!="Yes"),#
				Size_t#
			)#
		) %>%#
		as.data.frame#
	# - Merge plant survey data into one file -------------------------------- ##
	# create new file with those plants in only one plot#
	temp.C %<>% dplyr::select( #
		PlantID, #
		Date, #
		# insects#
		CA_t, #
		ME_t, #
		CH_t,#
		DA_t,#
		Unknown_Moth_t, #
		Gerstaeckeria_t,#
		Old_Moth_Evidence_t, #
		# size#
		Size_t, #
		Plant_Segments_w_leaves, #
		Plant_Segments_wo_leaves, #
		Plant_Segments_woody, #
		Height_t, #
		Width_t, #
		Perpen_Width, #
		# fruit#
		Num_FlowerBuds, #
		Num_Fruit_red, #
		Num_Fruit_green, #
		Num_Flowers,#
		Fruit_t, #
		Fruit_Flowers_t,#
		Dead, #
		Missing, #
		DemographicSurvey,#
		FecundityYear,#
		OutsideOfPlot,#
		DeadDuetoMothDamage#
	)#
	temp.C$AllSurveyed <- "TRUE"#
	temp.C$PlantsSurveyed <- "NA"#
	# merge plants in multiple plots and plants in one plot#
	temp.D <- rbind.fill(temp.B, temp.C)#
	temp.D %<>% arrange(PlantID, Date)
setwd('/Users/KSauby/Documents/Projects/GTMNERRproc/R')
temp1 <- temp.A %>% filter(Dead == 1 | Missing == 1)#
	# Dead/missing observations from plant surveys after merge#
	temp2 <- temp.D %>% filter(Dead == 1 | Missing == 1)#
	temp <- temp1 %>% filter(!(PlantID %in% temp2$PlantID))#
	# which of these plants completely died?#
	temp3 <- Plant.Info %>%#
		filter(PlantID %in% temp$PlantID) %>%#
		group_by(PlantID) %>%#
		summarise(#
			Dead = sum(ConfirmedDeadMissing, na.rm=T)/#
				length(ConfirmedDeadMissing)#
		) %>%#
		filter(Dead >= 1)#
	if (dim(temp3)[1] > 0) {#
		write.csv(temp3,"PlantsNotSurveyedasDead.csv")#
		warning(paste(#
			"Plant that is missing/dead is not indicated as such in merged surveys. Date written to csv file."#
		))#
	}#
	# WARNING IF PLANTS MARKED DEAD HAVE NON-ZERO SIZE/FRUIT COUNT MEASUREMENTS#
	temp <- temp.D %>%#
		filter(#
			Dead == 1,#
			!(#
				is.na(Size_t) |#
				is.na(Plant_Segments_w_leaves) |#
				is.na(Plant_Segments_wo_leaves) |#
				is.na(Plant_Segments_woody) |#
				is.na(Height_t) |#
				is.na(Width_t) |#
				is.na(Perpen_Width)#
			) |#
			Num_FlowerBuds > 0 |#
			Num_Fruit_red > 0 |#
			Num_Fruit_green > 0 |#
			Num_Flowers > 0 |#
			Fruit_t > 0 |#
			Fruit_Flowers_t#
		)#
	if (dim(temp)[1] > 0) {#
		write.csv(temp,"Deadplantswsizemeasurements.csv")#
		warning(paste(#
			"Plant ",#
			paste(temp$PlantID, collapse=","),#
			"Marked dead but has size/fruit measurements. Information written to csv file."#
		))#
	}#
	# WARNING IF PLANTS MARKED DEAD HAVE NON-ZERO SIZE/FRUIT COUNT MEASUREMENTS#
	temp <- temp.D %>%#
		filter(#
			Missing == 1,#
			!(#
				is.na(Size_t) |#
				is.na(Plant_Segments_w_leaves) |#
				is.na(Plant_Segments_wo_leaves) |#
				is.na(Plant_Segments_woody) |#
				is.na(Height_t) |#
				is.na(Width_t) |#
				is.na(Perpen_Width)#
			) |#
			Num_FlowerBuds > 0 |#
			Num_Fruit_red > 0 |#
			Num_Fruit_green > 0 |#
			Num_Flowers > 0 |#
			Fruit_t > 0 |#
			Fruit_Flowers_t#
		)#
	if (dim(temp)[1] > 0) {#
		write.csv(temp,"Missingplantswsizemeasurements.csv")#
		warning(paste(#
			"Plant ",#
			paste(temp$PlantID, collapse=","),#
			"Marked missing but has size/fruit measurements. Information written to csv file."#
		))#
	}#
	# ------------------------- CHANGE SURVEY INFO TO NA FOR DEAD/MISSING PLANTS#
	temp.D %<>%#
		rowwise() %>%#
		mutate(#
			CA_t = replace(#
				CA_t,#
				which(Dead == 1 | Missing == 1),#
				NA#
			),#
			ME_t = replace(#
				ME_t,#
				which(Dead == 1 | Missing == 1),#
				NA#
			),#
			CH_t = replace(#
				CH_t,#
				which(Dead == 1 | Missing == 1),#
				NA#
			),#
			DA_t = replace(#
				DA_t,#
				which(Dead == 1 | Missing == 1),#
				NA#
			),#
			Unknown_Moth_t = replace(#
				Unknown_Moth_t,#
				which(Dead == 1 | Missing == 1),#
				NA#
			),#
			Gerstaeckeria_t = replace(#
				Gerstaeckeria_t,#
				which(Dead == 1 | Missing == 1),#
				NA#
			),#
			Old_Moth_Evidence_t = replace(#
				Old_Moth_Evidence_t,#
				which(Dead == 1 | Missing == 1),#
				NA#
			),#
			Size_t = replace(#
				Size_t,#
				which(Dead == 1 | Missing == 1),#
				NA#
			),#
			Plant_Segments_w_leaves = replace(#
				Plant_Segments_w_leaves,#
				which(Dead == 1 | Missing == 1),#
				NA#
			),#
			Plant_Segments_wo_leaves = replace(#
				Plant_Segments_wo_leaves,#
				which(Dead == 1 | Missing == 1),#
				NA#
			),#
			Plant_Segments_woody = replace(#
				Plant_Segments_woody,#
				which(Dead == 1 | Missing == 1),#
				NA#
			),#
			Height_t = replace(#
				Height_t,#
				which(Dead == 1 | Missing == 1),#
				NA#
			),#
			Width_t = replace(#
				Width_t,#
				which(Dead == 1 | Missing == 1),#
				NA#
			),#
			Perpen_Width = replace(#
				Perpen_Width,#
				which(Dead == 1 | Missing == 1),#
				NA#
			),#
			Num_FlowerBuds = replace(#
				Num_FlowerBuds,#
				which(Dead == 1 | Missing == 1),#
				NA#
			),#
			Num_Fruit_red = replace(#
				Num_Fruit_red,#
				which(Dead == 1 | Missing == 1),#
				NA#
			),#
			Num_Fruit_green = replace(#
				Num_Fruit_green,#
				which(Dead == 1 | Missing == 1),#
				NA#
			),#
			Num_Flowers = replace(#
				Num_Flowers,#
				which(Dead == 1 | Missing == 1),#
				NA#
			),#
			Fruit_t = replace(#
				Fruit_t,#
				which(Dead == 1 | Missing == 1),#
				NA#
			),#
			Fruit_Flowers_t = replace(#
				Fruit_Flowers_t,#
				which(Dead == 1 | Missing == 1),#
				NA#
			)#
		) %>%#
		ungroup()#
	# --------------------------------------------------------------------------#
	temp.D$Date %<>% as.Date
str(temp.D)
unique(temp.D$DeadDuetoMothDamage)
DeadDuetoMothDamage %>% filter(DeadDuetoMothDamage=="Yes")
temp.D %>% filter(DeadDuetoMothDamage=="Yes")
setwd('/Users/KSauby/Documents/Projects')
setwd("./GTMNERRproc")#
#setwd("./dataproc")#
#setwd("./modresproc")#
#setwd("./unmarked")#
#setwd("./RPresence")#
#devtools::test()#
devtools::document()#
devtools::install()
